{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///vueoffcanvas.dist.js","webpack:///webpack/bootstrap 2042dd2d08436a2b514a","webpack:///src/VueOffCanvas.vue","webpack:///./src/event-bus.js","webpack:///./src/plugin.js","webpack:///./src/VueOffCanvas.vue","webpack:///./src/VueOffCanvas.vue?388e","webpack:///./src/VueOffCanvas.vue?31b4","webpack:///./node_modules/css-loader/lib/css-base.js","webpack:///./node_modules/vue-style-loader/lib/addStylesClient.js","webpack:///./node_modules/vue-style-loader/lib/listToStyles.js","webpack:///./node_modules/vue-loader/lib/component-normalizer.js","webpack:///./node_modules/snapsvg/dist/snap.svg.js","webpack:///external \"Vue\"","webpack:///./src/VueOffCanvas.vue?f885"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE_11__","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_0_snapsvg__","__WEBPACK_IMPORTED_MODULE_0_snapsvg___default","__WEBPACK_IMPORTED_MODULE_1__event_bus_js__","data","isOpen","isAnimating","morphEl","path","initialPath","pathOpen","created","$on","openOffCanvas","closeOffCanvas","toggleOffCanvas","beforeDestroy","$off","mounted","document","getElementById","querySelector","select","methods","startAnimate","_this","body","classList","add","animate","mina","easeinout","_this2","remove","setTimeout","attr","VueOffCanvasEventBus","__WEBPACK_IMPORTED_MODULE_0_vue__","__WEBPACK_IMPORTED_MODULE_0_vue___default","a","value","__WEBPACK_IMPORTED_MODULE_0__VueOffCanvas_vue__","plugin","install","Vue","component","$VueOffCanvas","open","$emit","close","toggle","injectStyle","ssrContext","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_VueOffCanvas_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_207b2120_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_VueOffCanvas_vue__","normalizeComponent","__vue_styles__","Component","content","locals","push","cssWithMappingToString","item","useSourceMap","cssMapping","btoa","sourceMapping","toComment","concat","sources","map","source","sourceRoot","join","sourceMap","unescape","encodeURIComponent","JSON","stringify","list","toString","mediaQuery","alreadyImportedModules","length","id","addStylesToDom","styles","domStyle","stylesInDom","refs","j","parts","addStyle","createStyleElement","styleElement","createElement","type","head","appendChild","obj","update","isProduction","noop","parentNode","removeChild","isOldIE","styleIndex","singletonCounter","singletonElement","applyToSingletonTag","bind","applyToTag","newObj","css","media","index","styleSheet","cssText","replaceText","cssNode","createTextNode","childNodes","insertBefore","setAttribute","firstChild","hasDocument","DEBUG","Error","listToStyles","getElementsByTagName","navigator","test","userAgent","toLowerCase","parentId","_isProduction","newList","mayRemove","textStore","replacement","filter","Boolean","newStyles","part","rawScriptExports","compiledTemplate","functionalTemplate","injectStyles","scopeId","moduleIdentifier","esModule","scriptExports","default","options","render","staticRenderFns","_compiled","functional","_scopeId","hook","context","$vnode","parent","__VUE_SSR_CONTEXT__","_registeredComponents","_ssrRegister","existing","beforeCreate","_injectStyles","h","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_LOCAL_MODULE_0__","__WEBPACK_AMD_DEFINE_RESULT__","glob","current_event","stop","has","separator","comaseparator","numsort","b","events","firstDefined","ii","lastDefined","objtos","Str","String","isArray","Array","ar","eve","scope","oldstop","args","slice","arguments","listeners","z","indexed","queue","out","ce","zIndex","sort","apply","_events","items","k","jj","nes","names","split","e","es","f","sep","replace","RegExp","on","exist","event","attrs","nt","subname","cur","nts","off","unbind","key","splice","inodes","unshift","funcs","prune","once","f2","version","undefined","window","requestID","animations","requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","callback","Date","getTime","idgen","idprefix","ID","timer","now","sta","val","ds","dur","B","speed","spd","duration","stopit","pause","pdif","resume","frame","res","start","end","easing","set","timeStamp","len","A","anim","linear","status","time","getById","easeout","Math","pow","easein","q","Q","sqrt","x","X","abs","y","Y","t","backin","backout","elastic","sin","PI","bounce","Snap","w","nodeType","wrap","is","Element","doc","Paper","$","el","text","createComment","substring","getAttributeNS","xlink","xmlns","getAttribute","nodeValue","setAttributeNS","removeAttribute","createElementNS","isFinite","objectToString","clone","constructor","repush","array","cacher","postprocessor","newf","arg","cache","count","shift","angle","x1","y1","x2","y2","x3","y3","math","atan2","rad","deg","svgTransform2string","tstr","all","params","tan","charAt","transform2matrix","bbox","tdata","parseTransformString","Matrix","bb","tlen","command","absolute","inver","invert","translate","rotate","width","height","scale","getSomeDefs","node","ownerSVGElement","pdefs","defs","make","getSomeSVG","unit2px","getW","E","mgr","getBBox","getH","nam","svg","class","fill","add2group","forEach","children","snap","hub","paper","tagName","nodeName","anims","_","transform","g","mask","pattern","symbol","method","Fragment","frag","desc","proto","ownerDocument","dom","contentDocument","jsonFiller","win","toFloat","parseFloat","toInt","parseInt","mmax","max","mmin","min","round","colourRegExp","commaSpaces","hsrg","hs","rg","pathCommand","tCommand","pathValues","url","format","tokenRegex","objNotationRegex","replacer","quote","quotedName","isFunc","str","cos","asin","num","acos","atan","len2","closestPoint","distance2","dx","dy","best","bestLength","scan","scanDistance","pathNode","pathLength","getTotalLength","precision","pathSegList","numberOfItems","bestDistance","Infinity","scanLength","getPointAtLength","before","after","beforeLength","afterLength","beforeDistance","afterDistance","distance","snapTo","values","tolerance","rem","getRGB","colour","indexOf","r","hex","error","rgbtoString","toHex","red","green","blue","opacity","rgb","match","hsb2rgb","hsl2rgb","hsb","hsl","toFixed","color","style","defaultView","getComputedStyle","getPropertyValue","hsbtoString","hsltoString","prepareRGB","string","clr","packageRGB","rgb2hsl","rgb2hsb","v","R","G","C","H","S","V","L","M","parsePathString","pathString","pth","arr","paramCounts","u","TString","rgTransform","_unit2px","contains","compareDocumentPosition","query","selectAll","nodelist","querySelectorAll","setInterval","attributes","json","att","parse","createDocumentFragment","full","div","innerHTML","fragment","ch","toJSON","lastIndexOf","letter","cssAttr","alignment-baseline","baseline-shift","clip","clip-path","clip-rule","color-interpolation","color-interpolation-filters","color-profile","color-rendering","cursor","direction","display","dominant-baseline","enable-background","fill-opacity","fill-rule","flood-color","flood-opacity","font","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","glyph-orientation-horizontal","glyph-orientation-vertical","image-rendering","kerning","letter-spacing","lighting-color","marker","marker-end","marker-mid","marker-start","overflow","pointer-events","shape-rendering","stop-color","stop-opacity","stroke","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","text-anchor","text-decoration","text-rendering","unicode-bidi","visibility","word-spacing","writing-mode","toUpperCase","ajax","postData","req","XMLHttpRequest","pd","setRequestHeader","onreadystatechange","readyState","send","load","responseText","getOffset","elem","box","getBoundingClientRect","docElem","documentElement","clientTop","clientLeft","top","pageYOffset","scrollTop","left","pageXOffset","scrollLeft","getElementByPoint","target","canvas","elementFromPoint","opera","so","sr","createSVGRect","hits","getIntersectionList","extractTransform","doReturn","matrix","fixids","urltest","it","uses","els","ids","oldid","old","fs","chld","elproto","isWithoutTransform","getClientRects","removed","localMatrix","original","href","pathfinder","deflt","bboxwt","realPath","propString","papa","global","getCTM","local","ms","localString","toTransformString","globalMatrix","totalMatrix","diffMatrix","total","gradientTransform","patternTransform","append","appendTo","prepend","first","prependTo","nextSibling","insertAfter","asPX","use","xlink:href","cloneNode","toDefs","toPattern","patternUnits","viewBox","refX","refY","cx","cy","markerWidth","markerHeight","orient","eldata","removeData","outerSVG","innerSVG","toDataURL","contents","from","to","Animation","animation","inAnim","_attrs","_callback","curStatus","setter","eq","fkeys","tkeys","keys","equal","matrixproto","norm","normalize","mag","aNew","bNew","multLeft","cNew","eNew","me","skewX","skew","skewY","fromCharCode","offset","determinant","row","scalex","shear","scaley","isSimple","isSuperSimple","noRotation","shorter","fillStroke","URL","grad","gradient","setFontSize","fontSize","textExtract","chi","getFontSize","reURLValue","deurl","clipIt","gradrg","seed","step","stops","tokens","toAbsolute","txt","className","baseVal","vb","rx","ry","tp","textPath","tuner","chunk","tuned","textContent","internal","rgNotSpace","addClass","clazz","finalValue","classes","curClasses","removeClass","pos","hasClass","toggleClass","flag","getNumber","getUnit","unit","operators","+","-","/","*","reUnit","reAddon","plus","evnt","atr","aUnit","op","isNaN","bplus","rect","circle","preload","onerror","src","img","onload","image","preserveAspectRatio","offsetWidth","offsetHeight","ellipse","group","vbx","vby","vbw","vbh","ptrn","vx","vy","vw","vh","line","polyline","points","polygon","Gstops","GaddStop","inserted","GgetBBox","GsetStops","addStop","gradientLinear","gradientRadial","gradientUnits","setStops","fx","fy","clear","next","paths","ps","sleep","r1","r2","r0","rectPath","p2s","pathClone","pathArray","getPointAtSegmentLength","p1x","p1y","c1x","c1y","c2x","c2y","p2x","p2y","bezlen","findDotsAtSegment","getTotLen","getLengthFactory","istotal","subpath","O","onlystart","path2curve","point","sp","subpaths","t1","t13","t12","t2","t3","mx","my","nx","ny","alpha","bezierBBox","curveDim","isPointInsideBBox","isBBoxIntersect","bbox1","bbox2","base3","p1","p2","p3","p4","x4","y4","z2","Tvalues","Cvalues","sum","ct","xbase","ybase","comb","ll","intersect","denominator","px","py","px2","py2","interHelper","bez1","bez2","justCount","l1","l2","n1","n2","dots1","dots2","xy","di","di1","dj","dj1","ci","cj","pathIntersection","path1","path2","interPathHelper","pathIntersectionNumber","x1m","y1m","x2m","y2m","pi","pj","intr","kk","segment1","segment2","isPointInsidePath","pathBBox","dim","xmin","ymin","xmax","ymax","ellipsePath","pathToRelative","lowerCase","rel","pa","pathToAbsolute","pa0","crz","dots","pop","catmullRom2bezier","l2c","q2c","ax","ay","a2c","large_arc_flag","sweep_flag","recursive","_120","f1","rx2","ry2","df","f2old","x2old","y2old","c1","s1","c2","s2","hx","hy","m1","m2","m3","m4","newres","x0","y0","b2ac","sqrtb2ac","tvalues","bounds","mt","jlen","curve","bx","by","qx","qy","attrs2","processPath","pcom","T","fixArc","pp","pcoms1","pcoms2","fixM","a1","a2","pfirst","seg","seg2","seglen","seg2len","mapPath","pathi","crp","iLen","getSubpathsAtLength","getPath","getSubpath","closest","inside","found","intersection","intersectionNumber","isPointInside","toRelative","toCubic","Set","bindings","setproto","thisArg","each","begin","handler","cb","callbacker","aname","unbound","insertion","tail","todel","arglen","exclude","getEmpty","equaliseTransform","tt1","tt2","maxlength","path2array","getViewBox","getColour","Function","isNumeric","arrayEqual","arr1","arr2","Number","bUnit","supportsTouch","touchMap","mousedown","mousemove","mouseup","getScroll","preventTouch","originalEvent","preventDefault","stopTouch","stopPropagation","addEvent","fn","element","realName","scrollY","scrollX","targetTouches","olde","clientX","clientY","addEventListener","removeEventListener","drag","dragMove","dragi","touch","touches","identifier","_drag","move_scope","dragUp","unmousemove","unmouseup","end_scope","start_scope","eventName","hover","f_in","f_out","scope_in","scope_out","mouseover","mouseout","unhover","unmouseover","unmouseout","draggable","onmove","onstart","onend","init","origTransform","undrag","unmousedown","pproto","rgurl","filstr","filterUnits","blur","def","shadow","grayscale","amount","sepia","saturate","hueRotate","amount2","brightness","contrast","firstLetter","getAlign","way","align","saveColor","colors","A100","A200","A400","A700","mui","flat","pink","purple","deeppurple","indigo","lightblue","cyan","teal","lightgreen","lime","yellow","amber","orange","deeporange","brown","grey","bluegrey","turquoise","greensea","sunflower","emerland","nephritis","carrot","pumpkin","peterriver","belizehole","alizarin","pomegranate","amethyst","wisteria","clouds","silver","wetasphalt","midnightblue","concrete","asbestos","importMUIColors","_vm","_h","$createElement","_c","_self","staticClass","overlay--show","click","_v","_m","esExports"],"mappings":";CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,EAAAG,QAAA,QACA,kBAAAC,gBAAAC,IACAD,OAAA,uBAAAJ,GACA,gBAAAC,SACAA,QAAA,aAAAD,EAAAG,QAAA,QAEAJ,EAAA,aAAAC,EAAAD,EAAA,MACC,mBAAAO,WAAAC,KAAA,SAAAC,GACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAV,OAGA,IAAAC,GAAAU,EAAAD,IACAE,EAAAF,EACAG,GAAA,EACAb,WAUA,OANAQ,GAAAE,GAAAI,KAAAb,EAAAD,QAAAC,IAAAD,QAAAS,GAGAR,EAAAY,GAAA,EAGAZ,EAAAD,QAvBA,GAAAW,KA4DA,OAhCAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,SAAAjB,EAAAkB,EAAAC,GACAV,EAAAW,EAAApB,EAAAkB,IACAG,OAAAC,eAAAtB,EAAAkB,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAzB,GACA,GAAAkB,GAAAlB,KAAA0B,WACA,WAA2B,MAAA1B,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAQ,GAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,SAGAvB,IAAAwB,EAAA,KDgBM,SAAUhC,EAAQiC,EAAqBzB,GAE7C,YACqB,IAAI0B,GAAwC1B,EAAoB,IAC5D2B,EAAgD3B,EAAoBiB,EAAES,GACtEE,EAA8C5B,EAAoB,EEN3FyB,GAAA,GFqFEhB,KEnFF,eFoFEoB,KAAM,WACJ,OACEC,QEnFN,EFoFMC,aEnFN,EFoFMC,QEnFN,KFoFMR,EEnFN,KFoFMS,KEnFN,KFoFMC,YEnFN,kFFoFMC,SElFN,oDFqFEC,QAAS,WAEPR,EAA0E,EAAES,IAAI,OAAQxC,KEnF5FyC,eFoFIV,EAA0E,EAAES,IAAI,QAASxC,KEnF7F0C,gBFoFIX,EAA0E,EAAES,IAAI,SAAUxC,KEnF9F2C,kBFqFEC,cAAe,WACbb,EAA0E,EAAEc,KEnFhF,QFoFId,EAA0E,EAAEc,KEnFhF,SFoFId,EAA0E,EAAEc,KEnFhF,WFqFEC,QAAS,WACP9C,KAAKmC,QAAUY,SAASC,eEnF5B,eFoFIhD,KAAK2B,EAAIG,IAAgD9B,KAAKmC,QAAQc,cEnF1E,QFoFIjD,KAAKoC,KAAOpC,KAAK2B,EAAEuB,OEnFvB,SFsFEC,SACEC,aAAc,WACZ,GAAIpD,KAAKkC,YAAa,OEpF5B,CFqFMlC,MAAKkC,aEpFX,GFsFIS,gBAAiB,WACf3C,KEnFNoD,eFqFUpD,KAAKiC,OACPjC,KEpFR0C,iBFsFQ1C,KEpFRyC,iBFuFIA,cAAe,WEpFnB,GAAAY,GAAArD,IFuFMA,MEtFNoD,eFuFMpD,KAAKiC,QErFX,EFuFMc,SAASO,KAAKC,UAAUC,IEtF9B,aFuFMxD,KAAKoC,KAAKqB,SAAUrB,KAAQpC,KAAKsC,UAAY,IAAKoB,KAAKC,UAAW,WAChEN,EAAMnB,aEtFd,KFyFIQ,eAAgB,WEtFpB,GAAAkB,GAAA5D,IFyFMA,MExFNoD,eFyFMpD,KAAKiC,QEvFX,EFyFMc,SAASO,KAAKC,UAAUM,OExF9B,aFyFMC,WAAW,WACTF,EAAOxB,KAAK2B,KAAK,IAAKH,EExF9BvB,aFyFQuB,EAAO1B,aExFf,GACA,SF+FM,SAAUvC,EAAQiC,EAAqBzB,GAE7C,YAC+BA,GAAoBQ,EAAEiB,EAAqB,IAAK,WAAa,MAAOoC,IAC9E,IAAIC,GAAoC9D,EAAoB,IACxD+D,EAA4C/D,EAAoBiB,EAAE6C,GG5O9ED,EAAuB,GAAIE,GAAAC,GHkPlC,SAAUxE,EAAQiC,EAAqBzB,GAE7C,YACAY,QAAOC,eAAeY,EAAqB,cAAgBwC,OAAO,GAC7C,IAAIC,GAAkDlE,EAAoB,GACtE4B,EAA8C5B,EAAoB,GIrPrFmE,GACJC,QAAS,SAAAC,GACPA,EAAIC,UAAUJ,EAAA,EAAazD,KAAMyD,EAAA,GACjCG,EAAIhD,UAAUkD,eACZC,KAD4B,WAE1B5C,EAAA,EAAqB6C,MAAM,SAE7BC,MAJ4B,WAK1B9C,EAAA,EAAqB6C,MAAM,UAE7BE,OAP4B,WAQ1B/C,EAAA,EAAqB6C,MAAM,aAMnCP,GAAA,EAAaE,QAAUD,EAAOC,QAE9B3C,EAAA,QAAeyC,EAAf,GJ6PM,SAAU1E,EAAQiC,EAAqBzB,GAE7C,YKrRA,SAAA4E,GAAAC,GACA7E,EAAA,GLqRqB,GAAI8E,GAAwH9E,EAAoB,GKtRrK+E,EAAA/E,EAAA,IAGAgF,EAAAhF,EAAA,GASAiF,EAAAL,EAKAM,EAAAF,EACAF,EAAA,EACAC,EAAA,GATA,EAWAE,EAPA,KAEA,KAUAxD,GAAA,EAAAyD,EAAA,SL8RM,SAAU1F,EAAQD,EAASS,GMrTjC,GAAAmF,GAAAnF,EAAA,EACA,iBAAAmF,SAAA3F,EAAAW,EAAAgF,EAAA,MACAA,EAAAC,SAAA5F,EAAAD,QAAA4F,EAAAC,OAEApF,GAAA,cAAAmF,GAAA,IN8TM,SAAU3F,EAAQD,EAASS,GOrUjCT,EAAAC,EAAAD,QAAAS,EAAA,OAKAT,EAAA8F,MAAA7F,EAAAW,EAAA,u9FAAo/F,MP8U9+F,SAAUX,EAAQD,GQlSxB,QAAA+F,GAAAC,EAAAC,GACA,GAAAL,GAAAI,EAAA,OACAE,EAAAF,EAAA,EACA,KAAAE,EACA,MAAAN,EAGA,IAAAK,GAAA,kBAAAE,MAAA,CACA,GAAAC,GAAAC,EAAAH,EAKA,QAAAN,GAAAU,OAJAJ,EAAAK,QAAAC,IAAA,SAAAC,GACA,uBAAAP,EAAAQ,WAAAD,EAAA,SAGAH,QAAAF,IAAAO,KAAA,MAGA,OAAAf,GAAAe,KAAA,MAIA,QAAAN,GAAAO,GAKA,yEAHAT,KAAAU,SAAAC,mBAAAC,KAAAC,UAAAJ,MAGA,MArEA3G,EAAAD,QAAA,SAAAiG,GACA,GAAAgB,KAwCA,OArCAA,GAAAC,SAAA,WACA,MAAA5G,MAAAkG,IAAA,SAAAR,GACA,GAAAJ,GAAAG,EAAAC,EAAAC,EACA,OAAAD,GAAA,GACA,UAAAA,EAAA,OAAmCJ,EAAA,IAEnCA,IAEGe,KAAA,KAIHM,EAAArG,EAAA,SAAAJ,EAAA2G,GACA,gBAAA3G,KACAA,IAAA,KAAAA,EAAA,KAEA,QADA4G,MACAxG,EAAA,EAAgBA,EAAAN,KAAA+G,OAAiBzG,IAAA,CACjC,GAAA0G,GAAAhH,KAAAM,GAAA,EACA,iBAAA0G,KACAF,EAAAE,IAAA,GAEA,IAAA1G,EAAA,EAAYA,EAAAJ,EAAA6G,OAAoBzG,IAAA,CAChC,GAAAoF,GAAAxF,EAAAI,EAKA,iBAAAoF,GAAA,IAAAoB,EAAApB,EAAA,MACAmB,IAAAnB,EAAA,GACAA,EAAA,GAAAmB,EACKA,IACLnB,EAAA,OAAAA,EAAA,aAAAmB,EAAA,KAEAF,EAAAnB,KAAAE,MAIAiB,IRuXM,SAAUhH,EAAQD,EAASS,GSpVjC,QAAA8G,GAAAC,GACA,OAAA5G,GAAA,EAAiBA,EAAA4G,EAAAH,OAAmBzG,IAAA,CACpC,GAAAoF,GAAAwB,EAAA5G,GACA6G,EAAAC,EAAA1B,EAAAsB,GACA,IAAAG,EAAA,CACAA,EAAAE,MACA,QAAAC,GAAA,EAAqBA,EAAAH,EAAAI,MAAAR,OAA2BO,IAChDH,EAAAI,MAAAD,GAAA5B,EAAA6B,MAAAD,GAEA,MAAYA,EAAA5B,EAAA6B,MAAAR,OAAuBO,IACnCH,EAAAI,MAAA/B,KAAAgC,EAAA9B,EAAA6B,MAAAD,IAEAH,GAAAI,MAAAR,OAAArB,EAAA6B,MAAAR,SACAI,EAAAI,MAAAR,OAAArB,EAAA6B,MAAAR,YAEK,CAEL,OADAQ,MACAD,EAAA,EAAqBA,EAAA5B,EAAA6B,MAAAR,OAAuBO,IAC5CC,EAAA/B,KAAAgC,EAAA9B,EAAA6B,MAAAD,IAEAF,GAAA1B,EAAAsB,KAA8BA,GAAAtB,EAAAsB,GAAAK,KAAA,EAAAE,WAK9B,QAAAE,KACA,GAAAC,GAAA3E,SAAA4E,cAAA,QAGA,OAFAD,GAAAE,KAAA,WACAC,EAAAC,YAAAJ,GACAA,EAGA,QAAAF,GAAAO,GACA,GAAAC,GAAAnE,EACA6D,EAAA3E,SAAAE,cAAA,2BAAA8E,EAAAf,GAAA,KAEA,IAAAU,EAAA,CACA,GAAAO,EAGA,MAAAC,EAOAR,GAAAS,WAAAC,YAAAV,GAIA,GAAAW,EAAA,CAEA,GAAAC,GAAAC,GACAb,GAAAc,MAAAf,KACAO,EAAAS,EAAAC,KAAA,KAAAhB,EAAAY,GAAA,GACAzE,EAAA4E,EAAAC,KAAA,KAAAhB,EAAAY,GAAA,OAGAZ,GAAAD,IACAO,EAAAW,EAAAD,KAAA,KAAAhB,GACA7D,EAAA,WACA6D,EAAAS,WAAAC,YAAAV,GAMA,OAFAM,GAAAD,GAEA,SAAAa,GACA,GAAAA,EAAA,CACA,GAAAA,EAAAC,MAAAd,EAAAc,KACAD,EAAAE,QAAAf,EAAAe,OACAF,EAAAtC,YAAAyB,EAAAzB,UACA,MAEA0B,GAAAD,EAAAa,OAEA/E,MAcA,QAAA4E,GAAAf,EAAAqB,EAAAlF,EAAAkE,GACA,GAAAc,GAAAhF,EAAA,GAAAkE,EAAAc,GAEA,IAAAnB,EAAAsB,WACAtB,EAAAsB,WAAAC,QAAAC,EAAAH,EAAAF,OACG,CACH,GAAAM,GAAApG,SAAAqG,eAAAP,GACAQ,EAAA3B,EAAA2B,UACAA,GAAAN,IAAArB,EAAAU,YAAAiB,EAAAN,IACAM,EAAAtC,OACAW,EAAA4B,aAAAH,EAAAE,EAAAN,IAEArB,EAAAI,YAAAqB,IAKA,QAAAR,GAAAjB,EAAAK,GACA,GAAAc,GAAAd,EAAAc,IACAC,EAAAf,EAAAe,MACAxC,EAAAyB,EAAAzB,SAcA,IAZAwC,GACApB,EAAA6B,aAAA,QAAAT,GAGAxC,IAGAuC,GAAA,mBAAAvC,EAAAL,QAAA,SAEA4C,GAAA,uDAAyDhD,KAAAU,SAAAC,mBAAAC,KAAAC,UAAAJ,MAAA,OAGzDoB,EAAAsB,WACAtB,EAAAsB,WAAAC,QAAAJ,MACG,CACH,KAAAnB,EAAA8B,YACA9B,EAAAU,YAAAV,EAAA8B,WAEA9B,GAAAI,YAAA/E,SAAAqG,eAAAP,KA9MA,GAAAY,GAAA,mBAAA1G,SAEA,uBAAA2G,gBACAD,EACA,SAAAE,OACA,0JAKA,IAAAC,GAAAzJ,EAAA,GAeAiH,KAQAS,EAAA4B,IAAA1G,SAAA8E,MAAA9E,SAAA8G,qBAAA,YACArB,EAAA,KACAD,EAAA,EACAN,GAAA,EACAC,EAAA,aAIAG,EAAA,mBAAAyB,YAAA,eAAAC,KAAAD,UAAAE,UAAAC,cAEAtK,GAAAD,QAAA,SAAAwK,EAAAvD,EAAAwD,GACAlC,EAAAkC,CAEA,IAAAjD,GAAA0C,EAAAM,EAAAvD,EAGA,OAFAM,GAAAC,GAEA,SAAAkD,GAEA,OADAC,MACA/J,EAAA,EAAmBA,EAAA4G,EAAAH,OAAmBzG,IAAA,CACtC,GAAAoF,GAAAwB,EAAA5G,GACA6G,EAAAC,EAAA1B,EAAAsB,GACAG,GAAAE,OACAgD,EAAA7E,KAAA2B,GAEAiD,GACAlD,EAAA0C,EAAAM,EAAAE,GACAnD,EAAAC,IAEAA,IAEA,QAAA5G,GAAA,EAAmBA,EAAA+J,EAAAtD,OAAsBzG,IAAA,CACzC,GAAA6G,GAAAkD,EAAA/J,EACA,QAAA6G,EAAAE,KAAA,CACA,OAAAC,GAAA,EAAuBA,EAAAH,EAAAI,MAAAR,OAA2BO,IAClDH,EAAAI,MAAAD,WAEAF,GAAAD,EAAAH,OAwFA,IAAAkC,GAAA,WACA,GAAAoB,KAEA,iBAAAvB,EAAAwB,GAEA,MADAD,GAAAvB,GAAAwB,EACAD,EAAAE,OAAAC,SAAApE,KAAA,WT0dM,SAAU1G,EAAQD,GU9nBxBC,EAAAD,QAAA,SAAAwK,EAAAvD,GAGA,OAFAO,MACAwD,KACApK,EAAA,EAAiBA,EAAAqG,EAAAI,OAAiBzG,IAAA,CAClC,GAAAoF,GAAAiB,EAAArG,GACA0G,EAAAtB,EAAA,GACAmD,EAAAnD,EAAA,GACAoD,EAAApD,EAAA,GACAY,EAAAZ,EAAA,GACAiF,GACA3D,GAAAkD,EAAA,IAAA5J,EACAuI,MACAC,QACAxC,YAEAoE,GAAA1D,GAGA0D,EAAA1D,GAAAO,MAAA/B,KAAAmF,GAFAzD,EAAA1B,KAAAkF,EAAA1D,IAAmCA,KAAAO,OAAAoD,KAKnC,MAAAzD,KV0oBM,SAAUvH,EAAQD,GW7pBxBC,EAAAD,QAAA,SACAkL,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,GAAAC,GACAC,EAAAP,QAGAhD,QAAAgD,GAAAQ,OACA,YAAAxD,GAAA,aAAAA,IACAsD,EAAAN,EACAO,EAAAP,EAAAQ,QAIA,IAAAC,GAAA,kBAAAF,GACAA,EAAAE,QACAF,CAGAN,KACAQ,EAAAC,OAAAT,EAAAS,OACAD,EAAAE,gBAAAV,EAAAU,gBACAF,EAAAG,WAAA,GAIAV,IACAO,EAAAI,YAAA,GAIAT,IACAK,EAAAK,SAAAV,EAGA,IAAAW,EA4BA,IA3BAV,GACAU,EAAA,SAAAC,GAEAA,EACAA,GACA5L,KAAA6L,QAAA7L,KAAA6L,OAAA7G,YACAhF,KAAA8L,QAAA9L,KAAA8L,OAAAD,QAAA7L,KAAA8L,OAAAD,OAAA7G,WAEA4G,GAAA,mBAAAG,uBACAH,EAAAG,qBAGAhB,GACAA,EAAAvK,KAAAR,KAAA4L,GAGAA,KAAAI,uBACAJ,EAAAI,sBAAAxI,IAAAyH,IAKAI,EAAAY,aAAAN,GACGZ,IACHY,EAAAZ,GAGAY,EAAA,CACA,GAAAF,GAAAJ,EAAAI,WACAS,EAAAT,EACAJ,EAAAC,OACAD,EAAAc,YAEAV,IAQAJ,EAAAe,cAAAT,EAEAN,EAAAC,OAAA,SAAAe,EAAAT,GAEA,MADAD,GAAAnL,KAAAoL,GACAM,EAAAG,EAAAT,KAVAP,EAAAc,aAAAD,KACAlG,OAAAkG,EAAAP,IACAA,GAaA,OACAT,WACAxL,QAAAyL,EACAE,aX4qBM,SAAU1L,EAAQD,EAASS,GAEjC,GAAImM,GAA8BC,EYlxBlCD,EAAAE,GACA,WACA7M,EAAAD,QAAA,GAuCA,SAAA+M,GACA,GASAC,GACAC,EATAC,EAAA,iBACAC,EAAA,SACAC,EAAA,UAGAC,EAAA,SAAA5I,EAAA6I,GACA,MAAA7I,GAAA6I,GAIAC,GAAkB7L,MAClB8L,EAAA,WACA,OAAA5M,GAAA,EAAA6M,EAAAnN,KAAA+G,OAA6CzG,EAAA6M,EAAQ7M,IACrD,YAAAN,KAAAM,GACA,MAAAN,MAAAM,IAIA8M,EAAA,WAEA,IADA,GAAA9M,GAAAN,KAAA+G,SACAzG,GACA,YAAAN,KAAAM,GACA,MAAAN,MAAAM,IAIA+M,EAAAtM,OAAAS,UAAAoF,SACA0G,EAAAC,OACAC,EAAAC,MAAAD,SAAA,SAAAE,GACA,MAAAA,aAAAD,QAAA,kBAAAJ,EAAA7M,KAAAkN,GAgBAC,KAAA,SAAA/M,EAAAgN,GACA,GAMArN,GALAsN,EAAAlB,EACAmB,EAAAL,MAAAjM,UAAAuM,MAAAvN,KAAAwN,UAAA,GACAC,EAAAN,IAAAM,UAAArN,GACAsN,EAAA,EAGAC,KACAC,KACAC,KACAC,EAAA5B,CAEA2B,GAAAnB,eACAmB,EAAAjB,cACAV,EAAA9L,EACA+L,EAAA,CACA,QAAArM,GAAA,EAAA6M,EAAAc,EAAAlH,OAAkDzG,EAAA6M,EAAQ7M,IAAA,UAAA2N,GAAA3N,KAC1D6N,EAAA3I,KAAAyI,EAAA3N,GAAAiO,QACAN,EAAA3N,GAAAiO,OAAA,IACAH,EAAAH,EAAA3N,GAAAiO,QAAAN,EAAA3N,IAIA,KADA6N,EAAAK,KAAAzB,GACAoB,EAAAD,GAAA,GAGA,GAFA3N,EAAA6N,EAAAD,EAAAD,MACAG,EAAA7I,KAAAjF,EAAAkO,MAAAb,EAAAE,IACAnB,EAEA,MADAA,GAAAkB,EACAQ,CAGA,KAAA/N,EAAA,EAAuBA,EAAA6M,EAAQ7M,IAE/B,cADAC,EAAA0N,EAAA3N,IAEA,GAAAC,EAAAgO,QAAAJ,EAAAD,GAAA,CAEA,GADAG,EAAA7I,KAAAjF,EAAAkO,MAAAb,EAAAE,IACAnB,EACA,KAEA,IAIA,GAHAuB,IACA3N,EAAA6N,EAAAD,EAAAD,IACA3N,GAAA8N,EAAA7I,KAAAjF,EAAAkO,MAAAb,EAAAE,IACAnB,EACA,YAEyBpM,OAEzB6N,GAAA7N,EAAAgO,QAAAhO,MAIA,IADA8N,EAAA7I,KAAAjF,EAAAkO,MAAAb,EAAAE,IACAnB,EACA,KAMA,OAFAA,GAAAkB,EACAnB,EAAA4B,EACAD,GAGAV,IAAAe,QAAAzB,EAaAU,IAAAM,UAAA,SAAArN,GACA,GAEA8E,GACAiJ,EACAC,EACAtO,EACA6M,EACA7F,EACAuH,EACAC,EATAC,EAAAvB,EAAA5M,OAAAoO,MAAAnC,GACAoC,EAAAhC,EASAiC,GAAAD,GACAZ,IACA,KAAA/N,EAAA,EAAA6M,EAAA4B,EAAAhI,OAAsCzG,EAAA6M,EAAQ7M,IAAA,CAE9C,IADAwO,KACAxH,EAAA,EAAAuH,EAAAK,EAAAnI,OAAuCO,EAAAuH,EAAQvH,IAI/C,IAHA2H,EAAAC,EAAA5H,GAAAlG,EACAuN,GAAAM,EAAAF,EAAAzO,IAAA2O,EAvIA,MAwIAL,EAAA,EACAA,MACAlJ,EAAAiJ,EAAAC,MAEAE,EAAAtJ,KAAAE,GACA2I,IAAArI,OAAAN,EAAAyJ,OAIAD,GAAAJ,EAEA,MAAAT,IAYAV,IAAAd,UAAA,SAAAuC,GACAA,GACAA,EAAA9B,EAAA8B,GAAAC,QAAA,0BACAD,EAAA,IAAAA,EAAA,IACAvC,EAAA,GAAAyC,QAAAF,IAEAvC,EAAA,UA4BAc,IAAA4B,GAAA,SAAA3O,EAAAuO,GACA,qBAAAA,GACA,mBAGA,QADAJ,GAAAvB,EAAA5M,GAAA4M,EAAA5M,EAAA,IAAAA,MAAA0M,EAAA1M,GAAAoO,MAAAlC,GACAxM,EAAA,EAAA6M,EAAA4B,EAAAhI,OAA0CzG,EAAA6M,EAAQ7M,KAClD,SAAAM,GAIA,OADA4O,GAFAT,EAAAvB,EAAA5M,KAAA0M,EAAA1M,GAAAoO,MAAAnC,GACAoC,EAAAhC,EAEA3M,EAAA,EAAA6M,EAAA4B,EAAAhI,OAAkDzG,EAAA6M,EAAQ7M,IAC1D2O,IAAA7N,EACA6N,IAAAxN,eAAAsN,EAAAzO,KAAA2O,EAAAF,EAAAzO,MAAA2O,EAAAF,EAAAzO,KAAqFc,MAGrF,KADA6N,EAAAE,EAAAF,EAAAE,MACA7O,EAAA,EAAA6M,EAAA8B,EAAAE,EAAApI,OAA4CzG,EAAA6M,EAAQ7M,IAAA,GAAA2O,EAAAE,EAAA7O,IAAA6O,EAAA,CACpDK,GAAA,CACA,QAEAA,GAAAP,EAAAE,EAAA3J,KAAA2J,IACaJ,EAAAzO,GAEb,iBAAAiO,IACAA,QACAY,EAAAZ,aAoBAZ,IAAAwB,EAAA,SAAAM,GACA,GAAAC,MAAA3B,MAAAvN,KAAAwN,UAAA,EACA,mBACAL,IAAAc,MAAA,MAAAgB,EAAA,MAAAzJ,OAAA0J,GAAA1J,UAAA+H,MAAAvN,KAAAwN,UAAA,OASAL,IAAAhB,KAAA,WACAA,EAAA,GAgBAgB,IAAAgC,GAAA,SAAAC,GACA,GAAAC,GAAArC,EAAAd,KAAArG,KAAA,KAAAqG,CACA,OAAAkD,GACA,GAAAN,QAAA,gBAAAM,EAAA,iBAAA7F,KAAA8F,GAEAA,GAWAlC,IAAAmC,IAAA,WACA,MAAAtC,GAAAd,OAAAsC,MAAAnC,IAoBAc,IAAAoC,IAAApC,IAAAqC,OAAA,SAAApP,EAAAuO,GACA,IAAAvO,EAEA,YADA+M,IAAAe,QAAAzB,GAAoC7L,MAGpC,IAAA2N,GAAAvB,EAAA5M,GAAA4M,EAAA5M,EAAA,IAAAA,MAAA0M,EAAA1M,GAAAoO,MAAAlC,EACA,IAAAiC,EAAAhI,OAAA,EACA,OAAAzG,GAAA,EAAA6M,EAAA4B,EAAAhI,OAA8CzG,EAAA6M,EAAQ7M,IACtDqN,IAAAoC,IAAAhB,EAAAzO,GAAA6O,OAFA,CAMAJ,EAAAvB,EAAA5M,KAAA0M,EAAA1M,GAAAoO,MAAAnC,EACA,IAAAoC,GACAgB,EACAC,EACA5P,EAAA6M,EAAA7F,EAAAuH,EACAgB,GAAA5C,GACAkD,IACA,KAAA7P,EAAA,EAAA6M,EAAA4B,EAAAhI,OAAsCzG,EAAA6M,EAAQ7M,IAC9C,IAAAgH,EAAA,EAAuBA,EAAAuI,EAAA9I,OAAgBO,GAAA4I,EAAAnJ,OAAA,GAGvC,GAFAmJ,GAAA5I,EAAA,GACA2H,EAAAY,EAAAvI,GAAAlG,EArUA,KAsUA2N,EAAAzO,GACA2O,EAAAF,EAAAzO,MACA4P,EAAA1K,KAAAyJ,EAAAF,EAAAzO,KACA6P,EAAAC,SACAhP,EAAA6N,EACArO,KAAAmO,EAAAzO,UAIA,KAAA2P,IAAAhB,KAAArC,GAAAqD,KACAC,EAAA1K,KAAAyJ,EAAAgB,IACAE,EAAAC,SACAhP,EAAA6N,EACArO,KAAAqP,IAIAJ,GAAAK,OAAAzB,MAAAoB,EAAAK,GAGA,IAAA5P,EAAA,EAAA6M,EAAA0C,EAAA9I,OAAoCzG,EAAA6M,EAAQ7M,IAE5C,IADA2O,EAAAY,EAAAvP,GACA2O,EAAA7N,GAAA,CACA,GAAA+N,EAAA,CACA,GAAAF,EAAAE,EAAA,CACA,IAAA7H,EAAA,EAAAuH,EAAAI,EAAAE,EAAApI,OAAoDO,EAAAuH,EAAQvH,IAAA,GAAA2H,EAAAE,EAAA7H,IAAA6H,EAAA,CAC5DF,EAAAE,EAAAe,OAAA5I,EAAA,EACA,QAEA2H,EAAAE,EAAApI,cAAAkI,GAAAE,EAEA,IAAAc,IAAAhB,GAAA7N,EAAA,GAAA6N,EAAA7N,EAAAwL,GAAAqD,IAAAhB,EAAA7N,EAAA6O,GAAAd,EAAA,CACA,GAAAkB,GAAApB,EAAA7N,EAAA6O,GAAAd,CACA,KAAA7H,EAAA,EAAAuH,EAAAwB,EAAAtJ,OAAsDO,EAAAuH,EAAQvH,IAAA,GAAA+I,EAAA/I,IAAA6H,EAAA,CAC9DkB,EAAAH,OAAA5I,EAAA,EACA,QAEA+I,EAAAtJ,cAAAkI,GAAA7N,EAAA6O,GAAAd,OAEiB,OACjBF,GAAAE,CACA,KAAAc,IAAAhB,GAAA7N,EAAA6N,EAAA7N,EAAAwL,GAAAqD,IAAAhB,EAAA7N,EAAA6O,GAAAd,SACAF,GAAA7N,EAAA6O,GAAAd,EAGAF,IAAA7N,EAIAkP,EAAA,IAAAhQ,EAAA,EAAA6M,EAAAgD,EAAApJ,OAA8CzG,EAAA6M,EAAQ7M,IAAA,CACtD2O,EAAAkB,EAAA7P,EACA,KAAA2P,IAAAhB,GAAA7N,EAAA6N,EAAArO,MAAAuO,EAEA,QAAAmB,EAEA,KAAAL,IAAAhB,GAAA7N,EAAA6N,EAAArO,MAAAQ,EAEA,QAAAkP,SAGArB,GAAA7N,EAAA6N,EAAArO,SAoBA+M,IAAA4C,KAAA,SAAA3P,EAAAuO,GACA,GAAAqB,GAAA,WAEA,MADA7C,KAAAoC,IAAAnP,EAAA4P,GACArB,EAAAV,MAAAzO,KAAAgO,WAEA,OAAAL,KAAA4B,GAAA3O,EAAA4P,IAQA7C,IAAA8C,QAvaA,QAwaA9C,IAAA/G,SAAA,WACA,uCAEA,KAAAjH,KAAAD,QAAAC,EAAAD,QAAAiO,KAAArB,KAAAC,EAAA,WAA6J,MAAAoB,MAAcc,MAAA/O,EAAA4M,OAG3K,SAAAG,EAAAhN,GAIA6M,GAAAC,OAESmE,MAFTlE,EAAA,SAAAmB,GACA,MAAAlO,GAAAgN,EAAAkB,IACSc,MAAA/O,EAAA4M,MAAA3M,EAAAD,QAAA8M,IAURmE,QAAA3Q,KAAA,SAAA2Q,EAAAhD,GAeD,GAAAjK,GAAA,SAAAiK,GACA,GAUAiD,GAVAC,KACAC,EAAAH,EAAAI,uBACAJ,EAAAK,6BACAL,EAAAM,0BACAN,EAAAO,wBACAP,EAAAQ,yBACA,SAAAC,GAEA,MADAtN,YAAAsN,EAAA,OAAAC,OAAAC,YACA,GAGA9D,EAAAC,MAAAD,SAAA,SAAArJ,GACA,MAAAA,aAAAsJ,QACA,kBAAA1M,OAAAS,UAAAoF,SAAApG,KAAA2D,IAEAoN,EAAA,EACAC,EAAA,SAAAH,OAAAzK,SAAA,IACA6K,EAAA,WACA,MAAAD,IAAAD,KAAA3K,SAAA,KAeA8K,EAAAL,KAAAM,KAAA,WACA,UAAAN,OAEAO,EAAA,SAAAC,GACA,GAAA1N,GAAAnE,IACA,UAAA6R,EACA,MAAA1N,GAAAxC,CAEA,IAAAmQ,GAAA3N,EAAAxC,EAAAkQ,CACA1N,GAAA6I,GAAA7I,EAAA4N,IAAAD,EACA3N,EAAA6N,GAAA7N,EAAA4N,IAAAD,EACA3N,EAAAxC,EAAAkQ,GAEAI,EAAA,SAAAJ,GACA,GAAA1N,GAAAnE,IACA,UAAA6R,EACA,MAAA1N,GAAA+N,GAEA/N,GAAA+N,IAAAL,GAEAM,EAAA,SAAAN,GACA,GAAA1N,GAAAnE,IACA,UAAA6R,EACA,MAAA1N,GAAA4N,GAEA5N,GAAAxC,EAAAwC,EAAAxC,EAAAkQ,EAAA1N,EAAA4N,IACA5N,EAAA4N,IAAAF,GAEAO,EAAA,WACA,GAAAjO,GAAAnE,WACA6Q,GAAA1M,EAAA6C,IACA7C,EAAA6D,SACA2F,EAAA,aAAAxJ,EAAA6C,GAAA7C,IAEAkO,EAAA,WACA,GAAAlO,GAAAnE,IACAmE,GAAAmO,aAGAzB,GAAA1M,EAAA6C,IACA7C,EAAA6D,SACA7D,EAAAmO,KAAAnO,EAAAhD,MAAAgD,EAAA6I,IAEAuF,EAAA,WACA,GAAApO,GAAAnE,IACAmE,GAAAmO,OAGAnO,EAAA6I,EAAA7I,EAAAhD,MAAAgD,EAAAmO,WACAnO,GAAAmO,KACAzB,EAAA1M,EAAA6C,IAAA7C,EACAqO,MAEAxK,EAAA,WACA,GACAyK,GADAtO,EAAAnE,IAEA,IAAAwN,EAAArJ,EAAAuO,OAAA,CACAD,IACA,QAAAnL,GAAA,EAAAuH,EAAA1K,EAAAuO,MAAA3L,OAAgDO,EAAAuH,EAAQvH,IACxDmL,EAAAnL,IAAAnD,EAAAuO,MAAApL,IACAnD,EAAAwO,IAAArL,GAAAnD,EAAAuO,MAAApL,IAAAnD,EAAAyO,OAAAzO,EAAAxC,OAGA8Q,IAAAtO,EAAAuO,OAAAvO,EAAAwO,IAAAxO,EAAAuO,OAAAvO,EAAAyO,OAAAzO,EAAAxC,EAEAwC,GAAA0O,IAAAJ,IAEAD,EAAA,SAAAM,GAEA,IAAAA,EAMA,YAJAlC,IAEAA,EAAAE,EAAA0B,IAIA,IAAAO,GAAA,CACA,QAAAzS,KAAAuQ,GAAA,GAAAA,EAAApP,eAAAnB,GAAA,CACA,GAAA6D,GAAA0M,EAAAvQ,GACA0M,EAAA7I,EAAAhD,KAEA4R,KACA5O,EAAAxC,GAAAqL,EAAA7I,EAAA6I,IAAA7I,EAAA4N,IAAA5N,EAAA+N,KACA/N,EAAAxC,GAAA,UACAkP,GAAAvQ,GACA6D,EAAAxC,EAAA,EACAoR,IACA,SAAA5O,GACAL,WAAA,WACA6J,EAAA,eAAAxJ,EAAA6C,GAAA7C,MAEiBA,IAEjBA,EAAA6D,SAEA4I,IAAAmC,GAAAjC,EAAA0B,IAoCA9O,EAAA,SAAAS,EAAA6O,EAAAhG,EAAAgF,EAAA7Q,EAAA0R,EAAAD,GACA,GAAAK,IACAjM,GAAAyK,IACAiB,MAAAvO,EACAwO,IAAAK,EACAhG,IACArL,EAAA,EACAoQ,IAAAC,EAAAhF,EACAkF,IAAA,EACA/Q,MACA0R,MACAD,UAAAlP,EAAAwP,OACAC,OAAAvB,EACAK,QACAE,WACAxF,KAAAyF,EACAC,QACAE,SACAvK,SAEA6I,GAAAoC,EAAAjM,IAAAiM,CACA,IAAA3S,GAAAyS,EAAA,CACA,KAAAzS,IAAAuQ,GAAA,GAAAA,EAAApP,eAAAnB,IAEA,KADAyS,EAEA,KAIA,OADA,IAAAA,GAAAP,IACAS,EA8JA,OAnJAvP,GAAA0P,KAAA1B,EASAhO,EAAA2P,QAAA,SAAArM,GACA,MAAA6J,GAAA7J,IAAA,MAWAtD,EAAAwP,OAAA,SAAA9R,GACA,MAAAA,IAUAsC,EAAA4P,QAAA,SAAAlS,GACA,MAAAmS,MAAAC,IAAApS,EAAA,MAUAsC,EAAA+P,OAAA,SAAArS,GACA,MAAAmS,MAAAC,IAAApS,EAAA,MAUAsC,EAAAC,UAAA,SAAAvC,GACA,MAAAA,EACA,QAEA,OAAAA,EACA,QAEA,IAAAsS,GAAA,IAAAtS,EAAA,KACAuS,EAAAJ,KAAAK,KAAA,MAAAF,KACAG,EAAAF,EAAAD,EACAI,EAAAP,KAAAC,IAAAD,KAAAQ,IAAAF,GAAA,MAAAA,EAAA,QACAG,GAAAL,EAAAD,EACAO,EAAAV,KAAAC,IAAAD,KAAAQ,IAAAC,GAAA,MAAAA,EAAA,QACAE,EAAAJ,EAAAG,EAAA,EACA,aAAAC,cAUAxQ,EAAAyQ,OAAA,SAAA/S,GACA,MAAAA,EACA,QAEA,IAAAO,GAAA,OACA,OAAAP,OAAAO,EAAA,GAAAP,EAAAO,IAUA+B,EAAA0Q,QAAA,SAAAhT,GACA,MAAAA,EACA,QAEAA,IAAA,CACA,IAAAO,GAAA,OACA,OAAAP,OAAAO,EAAA,GAAAP,EAAAO,GAAA,GAUA+B,EAAA2Q,QAAA,SAAAjT,GACA,MAAAA,QACAA,EAEAmS,KAAAC,IAAA,MAAApS,GAAAmS,KAAAe,KAAAlT,EAAA,OACA,EAAAmS,KAAAgB,IAAA,OAUA7Q,EAAA8Q,OAAA,SAAApT,GACA,GAEAb,GAFAoB,EAAA,OACAD,EAAA,IAkBA,OAhBAN,GAAA,EAAAM,EACAnB,EAAAoB,EAAAP,IAEAA,EAAA,EAAAM,GACAN,GAAA,IAAAM,EACAnB,EAAAoB,EAAAP,IAAA,KAEAA,EAAA,IAAAM,GACAN,GAAA,KAAAM,EACAnB,EAAAoB,EAAAP,IAAA,QAEAA,GAAA,MAAAM,EACAnB,EAAAoB,EAAAP,IAAA,SAIAb,GAEAoQ,EAAAjN,OACAA,OACC,KAAAiK,EAAA,aAA4CA,GAgB7C8G,EAAA,SAAAjV,GAkBA,QAAAiV,GAAAC,EAAArI,GACA,GAAAqI,EAAA,CACA,GAAAA,EAAAC,SACA,MAAAC,GAAAF,EAEA,IAAAG,EAAAH,EAAA,UAAAD,EAAA5B,IACA,MAAA4B,GAAA5B,IAAApE,MAAAgG,EAAAC,EAEA,IAAAA,YAAAI,GACA,MAAAJ,EAEA,UAAArI,EAGA,MADAqI,GAAAjI,EAAAsI,IAAA9R,cAAAsK,OAAAmH,IACAE,EAAAF,GAQA,MAFAA,GAAA,MAAAA,EAAA,OAAAA,EACArI,EAAA,MAAAA,EAAA,OAAAA,EACA,GAAA2I,GAAAN,EAAArI,GAuDA,QAAA4I,GAAAC,EAAAnR,GACA,GAAAA,EAAA,CAUA,GATA,SAAAmR,IACAA,EAAAzI,EAAAsI,IAAA3L,eAAArF,EAAAoR,MAAApR,EAAA,eAEA,YAAAmR,IACAA,EAAAzI,EAAAsI,IAAAK,cAAArR,EAAAoR,MAAApR,EAAA,eAEA,gBAAAmR,KACAA,EAAAD,EAAAC,IAEA,gBAAAnR,GACA,UAAAmR,EAAAP,SACA,UAAA5Q,EAAAsR,UAAA,KACAH,EAAAI,eAAAC,EAAAxR,EAAAsR,UAAA,IAEA,QAAAtR,EAAAsR,UAAA,KACAH,EAAAI,eAAAE,EAAAzR,EAAAsR,UAAA,IAEAH,EAAAO,aAAA1R,GACa,QAAAA,EACbmR,EAAAQ,UAEA,IAGA,OAAAR,EAAAP,UACA,OAAA1E,KAAAlM,GAAA,GAAAA,EAAA6I,GAAAqD,GAAA,CACA,GAAA4B,GAAAvE,EAAAvJ,EAAAkM,GACA4B,GACA,UAAA5B,EAAAoF,UAAA,KACAH,EAAAS,eAAAJ,EAAAtF,EAAAoF,UAAA,GAAAxD,GACqB,QAAA5B,EAAAoF,UAAA,KACrBH,EAAAS,eAAAH,EAAAvF,EAAAoF,UAAA,GAAAxD,GAEAqD,EAAA3L,aAAA0G,EAAA4B,GAGAqD,EAAAU,gBAAA3F,QAGS,QAAAlM,KACTmR,EAAAQ,UAAA3R,EAAAoR,UAGAD,GAAAzI,EAAAsI,IAAAc,gBAAAL,EAAAN,EAEA,OAAAA,GAmBA,QAAAL,GAAA/T,EAAA8G,GAEA,MADAA,GAAA0F,EAAA9L,UAAAyI,YAAAzJ,KAAAoH,GACA,UAAAA,EACAkO,SAAAhV,KAEA,SAAA8G,KACA9G,YAAA2M,cAAAD,SAAAC,MAAAD,QAAA1M,OAGA,QAAA8G,GAAA,OAAA9G,GACA8G,SAAA9G,IAAA,OAAAA,GACA,UAAA8G,GAAA9G,IAAAC,OAAAD,IACAiV,EAAAvV,KAAAM,GAAAiN,MAAA,MAAA9D,eAAArC,GA8CA,QAAAoO,GAAAjO,GACA,qBAAAA,IAAAhH,OAAAgH,OACA,MAAAA,EAEA,IAAA0K,GAAA,GAAA1K,GAAAkO,WACA,QAAAhG,KAAAlI,KAAA6E,GAAAqD,KACAwC,EAAAxC,GAAA+F,EAAAjO,EAAAkI,IAEA,OAAAwC,GAGA,QAAAyD,GAAAC,EAAAzQ,GACA,OAAApF,GAAA,EAAA6M,EAAAgJ,EAAApP,OAAsCzG,EAAA6M,EAAQ7M,IAAA,GAAA6V,EAAA7V,KAAAoF,EAC9C,MAAAyQ,GAAA3Q,KAAA2Q,EAAAjG,OAAA5P,EAAA,OAGA,QAAA8V,GAAAjH,EAAAvB,EAAAyI,GACA,QAAAC,KACA,GAAAC,GAAA9I,MAAAjM,UAAAuM,MAAAvN,KAAAwN,UAAA,GACAF,EAAAyI,EAAAlQ,KAAA,KACAmQ,EAAAF,EAAAE,MAAAF,EAAAE,UACAC,EAAAH,EAAAG,MAAAH,EAAAG,SACA,OAAAD,GAAA5J,GAAAkB,IACAoI,EAAAO,EAAA3I,GACAuI,IAAAG,EAAA1I,IAAA0I,EAAA1I,KAEA2I,EAAA1P,QAAA,WAAAyP,GAAAC,EAAAC,SACAD,EAAAjR,KAAAsI,GACA0I,EAAA1I,GAAAqB,EAAAV,MAAAb,EAAA2I,GACAF,IAAAG,EAAA1I,IAAA0I,EAAA1I,IAEA,MAAAwI,GAGA,QAAAK,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,SAAAD,EAAA,CACA,GAAAnD,GAAA+C,EAAAE,EACA9C,EAAA6C,EAAAE,CACA,OAAAlD,IAAAG,GAGA,QAAAkD,EAAAC,OAAAnD,GAAAH,GAAAU,EAAA,SAFA,EAIA,MAAAoC,GAAAC,EAAAC,EAAAG,EAAAC,GAAAN,EAAAG,EAAAC,EAAAC,EAAAC,GAGA,QAAAG,GAAAC,GACA,MAAAA,GAAA,IAAA9C,EAAA,IAEA,QAAA8C,GAAAD,GACA,WAAAA,EAAA7C,EAAA,IAmvBA,QAAA+C,GAAAC,GACA,GAAA9E,KAyBA,OAxBA8E,KAAAlI,QAAA,qCAAAmI,EAAA5W,EAAA6W,GAsBA,MArBAA,KAAAzI,MAAA,eACA,UAAApO,GAAA,GAAA6W,EAAA1Q,QACA0Q,EAAAjS,KAAA,KAEA,SAAA5E,IACA6W,EAAA1Q,OAAA,EACA0Q,IAAA1J,MAAA,KACa,GAAA0J,EAAA1Q,QACb0Q,EAAAjS,KAAA,KAEA,GAAAiS,EAAA1Q,QACA0Q,EAAAjS,KAAAiS,EAAA,SAGA,SAAA7W,EACA6R,EAAAjN,MAAA,QAAA0R,EAAAQ,IAAAN,EAAAK,EAAA,aACS,SAAA7W,EACT6R,EAAAjN,MAAA,MAAA0R,EAAAQ,IAAAN,EAAAK,EAAA,eAEAhF,EAAAjN,MAAA5E,EAAA+W,OAAA,IAAA3R,OAAAyR,IAEAD,IAEA/E,EAIA,QAAAmF,GAAAL,EAAAM,GACA,GAAAC,GAAAC,GAAAR,GACA9W,EAAA,GAAAgU,GAAAuD,MACA,IAAAF,EACA,OAAAxX,GAAA,EAAA6M,EAAA2K,EAAA/Q,OAA0CzG,EAAA6M,EAAQ7M,IAAA,CAClD,GAKAsW,GACAC,EACAC,EACAC,EACAkB,EATA/D,EAAA4D,EAAAxX,GACA4X,EAAAhE,EAAAnN,OACAoR,EAAA7K,EAAA4G,EAAA,IAAAjK,cACAmO,EAAAlE,EAAA,IAAAiE,EACAE,EAAAD,EAAA3X,EAAA6X,SAAA,CAMA,MAAAH,GAAA,GAAAD,EACAzX,EAAA8X,UAAArE,EAAA,MACa,KAAAiE,GAAA,GAAAD,EACbE,GACAxB,EAAAyB,EAAAxE,EAAA,KACAgD,EAAAwB,EAAArE,EAAA,KACA8C,EAAAuB,EAAAxE,EAAAK,EAAA,GAAAA,EAAA,IACA6C,EAAAsB,EAAArE,EAAAE,EAAA,GAAAA,EAAA,IACAzT,EAAA8X,UAAAzB,EAAAF,EAAAG,EAAAF,IAEApW,EAAA8X,UAAArE,EAAA,GAAAA,EAAA,IAEa,KAAAiE,EACb,GAAAD,GACAD,KAAAJ,EACApX,EAAA+X,OAAAtE,EAAA,GAAA+D,EAAApE,EAAAoE,EAAAQ,MAAA,EAAAR,EAAAjE,EAAAiE,EAAAS,OAAA,IACiB,GAAAR,IACjBE,GACAtB,EAAAuB,EAAAxE,EAAAK,EAAA,GAAAA,EAAA,IACA6C,EAAAsB,EAAArE,EAAAE,EAAA,GAAAA,EAAA,IACAzT,EAAA+X,OAAAtE,EAAA,GAAA4C,EAAAC,IAEAtW,EAAA+X,OAAAtE,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAGa,KAAAiE,EACb,GAAAD,GAAA,GAAAA,GACAD,KAAAJ,EACApX,EAAAkY,MAAAzE,EAAA,GAAAA,EAAAgE,EAAA,GAAAD,EAAApE,EAAAoE,EAAAQ,MAAA,EAAAR,EAAAjE,EAAAiE,EAAAS,OAAA,IACiB,GAAAR,EACjBE,GACAtB,EAAAuB,EAAAxE,EAAAK,EAAA,GAAAA,EAAA,IACA6C,EAAAsB,EAAArE,EAAAE,EAAA,GAAAA,EAAA,IACAzT,EAAAkY,MAAAzE,EAAA,GAAAA,EAAA,GAAA4C,EAAAC,IAEAtW,EAAAkY,MAAAzE,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAEiB,GAAAgE,IACjBE,GACAtB,EAAAuB,EAAAxE,EAAAK,EAAA,GAAAA,EAAA,IACA6C,EAAAsB,EAAArE,EAAAE,EAAA,GAAAA,EAAA,IACAzT,EAAAkY,MAAAzE,EAAA,GAAAA,EAAA,GAAA4C,EAAAC,IAEAtW,EAAAkY,MAAAzE,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAGa,KAAAiE,GAAA,GAAAD,GACbzX,EAAA+C,IAAA0Q,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAIA,MAAAzT,GAyBA,QAAAmY,GAAA1D,GACA,GAAAxT,GAAAwT,EAAA2D,KAAAC,iBAAAlE,EAAAM,EAAA2D,KAAAC,kBACA5D,EAAA2D,KAAA1Q,YAAAyM,EAAAM,EAAA2D,KAAA1Q,aACAsM,EAAAvR,OAAA,QACAuR,EAAA,KACAsE,EAAArX,EAAAwB,OAAA,QACA8V,EAAA,MAAAD,KAAAF,IAIA,OAHAG,KACAA,EAAAC,EAAA,OAAAvX,EAAAmX,YAEAG,EAEA,QAAAE,GAAAhE,GACA,MAAAA,GAAA2D,KAAAC,iBAAAlE,EAAAM,EAAA2D,KAAAC,kBAAArE,EAAAvR,OAAA,OAIA,QAAAiW,GAAAjE,EAAAtU,EAAAwD,GASA,QAAAgV,GAAAvH,GACA,SAAAA,EACA,MAAAwH,EAEA,IAAAxH,MACA,MAAAA,EAEAoD,GAAAqE,GAAgBb,MAAA5G,GAChB,KACA,MAAAyH,GAAAC,UAAAd,MACS,MAAAxJ,GACT,UAGA,QAAAuK,GAAA3H,GACA,SAAAA,EACA,MAAAwH,EAEA,IAAAxH,MACA,MAAAA,EAEAoD,GAAAqE,GAAgBZ,OAAA7G,GAChB,KACA,MAAAyH,GAAAC,UAAAb,OACS,MAAAzJ,GACT,UAGA,QAAA4D,GAAA4G,EAAAtK,GACA,MAAAvO,EACAyN,EAAAoL,GAAAtK,EAAA+F,EAAAnR,KAAA0V,IAAA,GACSA,GAAA7Y,IACTyN,EAAAc,EAAA,MAAA/K,EAAA8Q,EAAAnR,KAAA0V,IAAA,EAAArV,IAxCA,GAAAsV,GAAAR,EAAAhE,GAAA2D,KACAxK,KACAiL,EAAAI,EAAAzW,cAAA,aAyCA,QAxCAqW,IACAA,EAAArE,EAAA,QACAA,EAAAqE,GAAgBzF,GAAA,IAAAG,GAAA,IAAAyE,MAAA,GAAAC,OAAA,GAAAiB,MAAA,YAAAC,KAAA,SAChBF,EAAA5R,YAAAwR,IAqCApE,EAAAtN,MACA,WACAiL,EAAA,KAAAuG,GACAvG,EAAA,KAAA2G,EACA,aACA3G,EAAA,QAAAuG,GACAvG,EAAA,SAAA2G,EACA,YACA3G,EAAA,IAAAuG,GACAvG,EAAA,IAAA2G,EACA,MACA,cACA3G,EAAA,KAAAuG,GACAvG,EAAA,KAAA2G,GACA3G,EAAA,IAAAuG,EACA,MACA,eACAvG,EAAA,KAAAuG,GACAvG,EAAA,KAAA2G,GACA3G,EAAA,KAAAuG,GACAvG,EAAA,KAAA2G,EACA,MACA,YACA3G,EAAA,KAAAuG,GACAvG,EAAA,KAAAuG,GACAvG,EAAA,KAAA2G,GACA3G,EAAA,KAAA2G,EACA,MACA,cACA3G,EAAA,OAAAuG,GACAvG,EAAA,cAAAuG,GACAvG,EAAA,OAAA2G,GACA3G,EAAA,eAAA2G,EACA,MACA,sBACA3G,EAAA,KAAAuG,GACAvG,EAAA,KAAA2G,EACA,MACA,aACA3G,EAAA,KAAAuG,GACAvG,EAAA,KAAA2G,EACA,MACA,SACA3G,EAAAjS,EAAAwY,GAGA,MADAM,GAAAtR,YAAAkR,GACAjL,EA+BA,QAAAwL,GAAAlT,GACAkO,EAAAlO,EAAA,WACAA,EAAA8G,MAAAjM,UAAAuM,MAAAvN,KAAAwN,UAAA,GAKA,KAHA,GAAA1N,GAAA,EACAgH,EAAA,EACAuR,EAAA7Y,KAAA6Y,KACA7Y,KAAAM,UAAAN,MAAAM,IACA,KAAAA,EAAA,EAAeA,EAAAqG,EAAAI,OAAiBzG,IAChC,OAAAqG,EAAArG,GAAAsH,KACAjB,EAAArG,GAAAwZ,QAAA,SAAA5E,GACA2D,EAAA/Q,YAAAoN,EAAA2D,QAGAA,EAAA/Q,YAAAnB,EAAArG,GAAAuY,KAGA,IAAAkB,GAAAlB,EAAAxP,UACA,KAAA/I,EAAA,EAAeA,EAAAyZ,EAAAhT,OAAqBzG,IACpCN,KAAAsH,KAAAsN,EAAAmF,EAAAzZ,GAEA,OAAAN,MAYA,QAAA8U,GAAAI,GACA,GAAAA,EAAA8E,OAAAC,GACA,MAAAA,GAAA/E,EAAA8E,KAEA,IAAAN,EACA,KACAA,EAAAxE,EAAA4D,gBACK,MAAA7J,IAaLjP,KAAA6Y,KAAA3D,EACAwE,IACA1Z,KAAAka,MAAA,GAAAlF,GAAA0E,IAQA1Z,KAAA4H,KAAAsN,EAAAiF,SAAAjF,EAAAkF,QACA,IAAApT,GAAAhH,KAAAgH,GAAAyK,EAAAzR,KAUA,IATAA,KAAAqa,SACAra,KAAAsa,GACAC,cAEArF,EAAA8E,KAAAhT,EACAiT,EAAAjT,GAAAhH,KACA,KAAAA,KAAA4H,OACA5H,KAAAwD,IAAAqW,GAEA7Z,KAAA4H,QAAsB4S,EAAA,EAAAC,KAAA,EAAAC,QAAA,EAAAC,OAAA,GACtB,OAAAC,KAAA5F,GAAAxT,UAAAwT,EAAAxT,UAAAoL,GAAAgO,KACA5a,KAAA4a,GAAA5F,EAAAxT,UAAAoZ,IA4FA,QAAAC,GAAAC,GACA9a,KAAA6Y,KAAAiC,EA6BA,QAAA7B,GAAArY,EAAAkL,GACA,GAAA2G,GAAAwC,EAAArU,EAGA,OAFAkL,GAAAhE,YAAA2K,GACAmC,EAAAnC,GAGA,QAAAuC,GAAAN,EAAArI,GACA,GAAAoG,GACAsI,EACA/B,EACAgC,EAAAhG,EAAAxT,SACA,IAAAkT,KAAAyF,SAAA,OAAAzF,EAAAyF,QAAAlQ,cAAA,CACA,GAAAyK,EAAAsF,OAAAC,GACA,MAAAA,GAAAvF,EAAAsF,KAEA,IAAAjF,GAAAL,EAAAuG,aACAxI,GAAA,GAAAqC,GAAAJ,GACAqG,EAAArG,EAAA7K,qBAAA,WACAmP,EAAAtE,EAAA7K,qBAAA,WACAkR,IACAA,EAAA9F,EAAA,QACA8F,EAAAjT,YAAAiN,EAAA3L,eAAA,sBACAqJ,EAAAoG,KAAA/Q,YAAAiT,IAEA/B,IACAA,EAAA/D,EAAA,QACAxC,EAAAoG,KAAA/Q,YAAAkR,IAEAvG,EAAAuG,MACA,QAAA/I,KAAA+K,KAAApO,GAAAqD,KACAwC,EAAAxC,GAAA+K,EAAA/K,GAEAwC,GAAAyH,MAAAzH,EAAAjT,KAAAiT,MAEAA,GAAAwG,EAAA,MAAAxM,EAAAsI,IAAAzR,MACA2R,EAAAxC,EAAAoG,MACAH,OAAArM,EACAoE,QAAA,IACAgI,MAAA/D,EACAc,SAGA,OAAA/C,GAEA,QAAAmC,GAAAsG,GACA,MAAAA,GAGAA,YAAApG,IAAAoG,YAAAL,GACAK,EAEAA,EAAAf,SAAA,OAAAe,EAAAf,QAAAlQ,cACA,GAAA+K,GAAAkG,GAEAA,EAAAf,SAAA,UAAAe,EAAAf,QAAAlQ,eAAA,iBAAAiR,EAAAtT,KACA,GAAAoN,GAAAkG,EAAAC,gBAAAtR,qBAAA,WAEA,GAAAiL,GAAAoG,GAXAA,EA2DA,QAAAE,GAAA5b,EAAAsB,GACA,OAAAR,GAAA,EAAA6M,EAAA3N,EAAAuH,OAAqCzG,EAAA6M,EAAQ7M,IAAA,CAC7C,GAAAoF,IACAkC,KAAApI,EAAAc,GAAAsH,KACA7D,KAAAvE,EAAAc,GAAAyD,QAEAgW,EAAAva,EAAAc,GAAAyZ,UACAjZ,GAAA0E,KAAAE,GACAqU,EAAAhT,QACAqU,EAAArB,EAAArU,EAAA2D,gBA1jDAoL,EAAAhE,QAAA,QAyCAgE,EAAA7N,SAAA,WACA,eAAA5G,KAAAyQ,SAEAgE,EAAA6F,IACA,IAAA7N,IACA4O,IAAA7b,EAAAmR,OACAoE,IAAAvV,EAAAmR,OAAA5N,SAEA0R,GAAA6F,EAAA7N,MACA,IAAAG,GAAA,iBACAU,EAAAC,OACA+N,EAAAC,WACAC,EAAAC,SACAvE,EAAA3D,KACAmI,EAAAxE,EAAAyE,IACAC,EAAA1E,EAAA2E,IACA9H,EAAAmD,EAAAnD,IAEAQ,GADA2C,EAAA1D,IACA0D,EAAA3C,IAEA8E,GADAnC,EAAA4E,MACA,IAEA/F,EAAAhV,OAAAS,UAAAoF,SAEAmV,EAAA,mTAIAC,GAFAvH,EAAA6F,EAAAzN,UAAA,SAEA,eACAoP,GAAYC,GAAA,EAAAC,GAAA,GACZC,EAAA,6DACAC,EAAA,8DACAC,EAAA,6CACA/K,EAAA,EACAC,EAAA,SAAAH,OAAAzK,SAAA,IACA6K,EAAA,SAAAyD,GACA,OAAAA,KAAAtN,KAAAsN,EAAAtN,KAAAyR,GAAA7H,GAAAD,KAAA3K,SAAA,KAEA2O,EAAA,+BACAC,EAAA,6BACAyE,IASAxF,GAAA8H,IAAA,SAAAA,GACA,eAAAA,EAAA,KAoDA9H,GAAA6F,EAAArF,IACAR,EAAA6F,EAAAtT,GAAAyK,EAmDAgD,EAAA+H,OAAA,WACA,GAAAC,GAAA,gBACAC,EAAA,2DACAC,EAAA,SAAAnF,EAAAvH,EAAAlI,GACA,GAAA0K,GAAA1K,CAWA,OAVAkI,GAAAZ,QAAAqN,EAAA,SAAAlF,EAAA5W,EAAAgc,EAAAC,EAAAC,GACAlc,KAAAic,EACApK,IACA7R,IAAA6R,KACAA,IAAA7R,IAEA,kBAAA6R,IAAAqK,IAAArK,UAGAA,GAAA,MAAAA,MAAA1K,EAAAyP,EAAA/E,GAAA,GAGA,iBAAAsK,EAAAhV,GACA,MAAAuF,GAAAyP,GAAA1N,QAAAoN,EAAA,SAAAjF,EAAAvH,GACA,MAAA0M,GAAAnF,EAAAvH,EAAAlI,SAcA0M,EAAA6F,EAAAtE,QAuBAvB,EAAA6F,EAAAlE,SAkCA3B,EAAA2C,MASA3C,EAAA4C,MASA5C,EAAAH,IAAA,SAAAqC,GACA,MAAAO,GAAA5C,IAAAG,EAAA2C,IAAAT,KAUAlC,EAAAiD,IAAA,SAAAf,GACA,MAAAO,GAAAQ,IAAAjD,EAAA2C,IAAAT,KAUAlC,EAAAuI,IAAA,SAAArG,GACA,MAAAO,GAAA8F,IAAAvI,EAAA2C,IAAAT,KAUAlC,EAAAwI,KAAA,SAAAC,GACA,MAAAzI,GAAA4C,IAAAH,EAAA+F,KAAAC,KAUAzI,EAAA0I,KAAA,SAAAD,GACA,MAAAzI,GAAA4C,IAAAH,EAAAiG,KAAAD,KAUAzI,EAAA2I,KAAA,SAAAF,GACA,MAAAzI,GAAA4C,IAAAH,EAAAkG,KAAAF,KAUAzI,EAAA0C,MAAA,SAAA+F,GACA,MAAAzI,GAAA4C,IAAAH,EAAAC,MAAA+F,KAeAzI,EAAAkC,QAYAlC,EAAA1B,IAAA,SAAA6D,EAAAC,EAAAC,EAAAC,GACA,MAAAxD,MAAAK,KAAAa,EAAA4I,KAAAzG,EAAAC,EAAAC,EAAAC,KAaAtC,EAAA4I,KAAA,SAAAzG,EAAAC,EAAAC,EAAAC,GACA,OAAAH,EAAAE,IAAAF,EAAAE,IAAAD,EAAAE,IAAAF,EAAAE,IAmBAtC,EAAA6I,aAAA,SAAAlb,EAAAyR,EAAAG,GACA,QAAAuJ,GAAA7b,GACA,GAAA8b,GAAA9b,EAAAmS,IACA4J,EAAA/b,EAAAsS,GACA,OAAAwJ,KAAAC,IAUA,OALAC,GACAC,EAIAC,EAAAC,EARAC,EAAA1b,EAAAyW,KACAkF,EAAAD,EAAAE,iBACAC,EAAAF,EAAAD,EAAAI,YAAAC,cAAA,KAGAC,EAAAC,IAGAC,EAAA,EAAgDA,GAAAP,EAA0BO,GAAAL,GAC1EJ,EAAAN,EAAAK,EAAAE,EAAAS,iBAAAD,KAAAF,IACAV,EAAAE,EACAD,EAAAW,EACAF,EAAAP,EAMA,KADAI,GAAA,GACAA,EAAA,KACA,GAAAO,GACAC,EACAC,EACAC,EACAC,EACAC,GACAH,EAAAf,EAAAM,IAAA,IAAAW,EAAArB,EAAAiB,EAAAV,EAAAS,iBAAAG,KAAAN,GACAV,EAAAc,EACAb,EAAAe,EACAN,EAAAQ,IACSD,EAAAhB,EAAAM,IAAAF,IAAAc,EAAAtB,EAAAkB,EAAAX,EAAAS,iBAAAI,KAAAP,GACTV,EAAAe,EACAd,EAAAgB,EACAP,EAAAS,GAEAZ,GAAA,GAUA,MANAP,IACA7J,EAAA6J,EAAA7J,EACAG,EAAA0J,EAAA1J,EACAjN,OAAA4W,EACAmB,SAAAvL,KAAAK,KAAAwK,KAaA3J,EAAAI,KAWAJ,EAAAsK,OAAA,SAAAC,EAAA5a,EAAA6a,GAEA,GADAA,EAAApK,EAAAoK,EAAA,UAAAA,EAAA,GACApK,EAAAmK,EAAA,UAEA,IADA,GAAA1e,GAAA0e,EAAAjY,OACAzG,KAAA,GAAAyT,EAAAiL,EAAA1e,GAAA8D,IAAA6a,EACA,MAAAD,GAAA1e,OAEK,CACL0e,IACA,IAAAE,GAAA9a,EAAA4a,CACA,IAAAE,EAAAD,EACA,MAAA7a,GAAA8a,CAEA,IAAAA,EAAAF,EAAAC,EACA,MAAA7a,GAAA8a,EAAAF,EAGA,MAAA5a,IAoCAqQ,EAAA0K,OAAA/I,EAAA,SAAAgJ,GACA,IAAAA,MAAA9R,EAAA8R,IAAAC,QAAA,OACA,OAAgBC,GAAA,EAAA9E,GAAA,EAAAxN,GAAA,EAAAuS,IAAA,OAAAC,MAAA,EAAA5Y,SAAA6Y,EAEhB,YAAAL,EACA,OAAgBE,GAAA,EAAA9E,GAAA,EAAAxN,GAAA,EAAAuS,IAAA,OAAA3Y,SAAA6Y,EAGhB,MADAxD,EAAArP,GAAAwS,EAAAnV,cAAAoL,UAAA,YAAA+J,EAAAzH,YAAAyH,EAAAM,EAAAN,KACAA,EACA,OAAgBE,GAAA,EAAA9E,GAAA,EAAAxN,GAAA,EAAAuS,IAAA,OAAAC,MAAA,EAAA5Y,SAAA6Y,EAEhB,IACAE,GACAC,EACAC,EACAC,EACA5L,EACA8K,EACAe,EAAAX,EAAAY,MAAAjE,EACA,OAAAgE,IACAA,EAAA,KACAF,EAAArE,EAAAuE,EAAA,GAAA1K,UAAA,OACAuK,EAAApE,EAAAuE,EAAA,GAAA1K,UAAA,SACAsK,EAAAnE,EAAAuE,EAAA,GAAA1K,UAAA,UAEA0K,EAAA,KACAF,EAAArE,GAAAtH,EAAA6L,EAAA,GAAApI,OAAA,IAAAzD,EAAA,IACA0L,EAAApE,GAAAtH,EAAA6L,EAAA,GAAApI,OAAA,IAAAzD,EAAA,IACAyL,EAAAnE,GAAAtH,EAAA6L,EAAA,GAAApI,OAAA,IAAAzD,EAAA,KAEA6L,EAAA,KACAf,EAAAe,EAAA,GAAA/Q,MAAAgN,GACA2D,EAAArE,EAAA0D,EAAA,IACA,KAAAA,EAAA,GAAAjR,OAAA,KAAA4R,GAAA,MACAC,EAAAtE,EAAA0D,EAAA,IACA,KAAAA,EAAA,GAAAjR,OAAA,KAAA6R,GAAA,MACAC,EAAAvE,EAAA0D,EAAA,IACA,KAAAA,EAAA,GAAAjR,OAAA,KAAA8R,GAAA,MACA,QAAAE,EAAA,GAAA9V,cAAA8D,MAAA,OAAA+R,EAAAxE,EAAA0D,EAAA,KACAA,EAAA,SAAAA,EAAA,GAAAjR,OAAA,KAAA+R,GAAA,MAEAC,EAAA,IACAf,EAAAe,EAAA,GAAA/Q,MAAAgN,GACA2D,EAAArE,EAAA0D,EAAA,IACA,KAAAA,EAAA,GAAAjR,OAAA,KAAA4R,GAAA,KACAC,EAAAtE,EAAA0D,EAAA,IACA,KAAAA,EAAA,GAAAjR,OAAA,KAAA6R,GAAA,KACAC,EAAAvE,EAAA0D,EAAA,IACA,KAAAA,EAAA,GAAAjR,OAAA,KAAA8R,GAAA,MACA,OAAAb,EAAA,GAAAjR,OAAA,SAAAiR,EAAA,GAAAjR,OAAA,MAAA4R,GAAA,KACA,QAAAI,EAAA,GAAA9V,cAAA8D,MAAA,OAAA+R,EAAAxE,EAAA0D,EAAA,KACAA,EAAA,SAAAA,EAAA,GAAAjR,OAAA,KAAA+R,GAAA,KACArL,EAAAwL,QAAAN,EAAAC,EAAAC,EAAAC,IAEAC,EAAA,IACAf,EAAAe,EAAA,GAAA/Q,MAAAgN,GACA2D,EAAArE,EAAA0D,EAAA,IACA,KAAAA,EAAA,GAAAjR,OAAA,KAAA4R,GAAA,KACAC,EAAAtE,EAAA0D,EAAA,IACA,KAAAA,EAAA,GAAAjR,OAAA,KAAA6R,GAAA,KACAC,EAAAvE,EAAA0D,EAAA,IACA,KAAAA,EAAA,GAAAjR,OAAA,KAAA8R,GAAA,MACA,OAAAb,EAAA,GAAAjR,OAAA,SAAAiR,EAAA,GAAAjR,OAAA,MAAA4R,GAAA,KACA,QAAAI,EAAA,GAAA9V,cAAA8D,MAAA,OAAA+R,EAAAxE,EAAA0D,EAAA,KACAA,EAAA,SAAAA,EAAA,GAAAjR,OAAA,KAAA+R,GAAA,KACArL,EAAAyL,QAAAP,EAAAC,EAAAC,EAAAC,KAEAH,EAAA/D,EAAA1E,EAAA4E,MAAA6D,GAAA,KACAC,EAAAhE,EAAA1E,EAAA4E,MAAA8D,GAAA,KACAC,EAAAjE,EAAA1E,EAAA4E,MAAA+D,GAAA,KACAC,EAAAlE,EAAAF,EAAAoE,EAAA,MACAC,GAAeT,EAAAK,EAAAnF,EAAAoF,EAAA5S,EAAA6S,EAAAjZ,SAAA6Y,GACfM,EAAAR,IAAA,cAAAM,EAAAD,GAAA,EAAAD,GAAA,IAAA/Y,SAAA,IAAAmH,MAAA,GACAgS,EAAAD,QAAAjL,EAAAiL,EAAA,UAAAA,EAAA,EACAC,KAEYT,GAAA,EAAA9E,GAAA,EAAAxN,GAAA,EAAAuS,IAAA,OAAAC,MAAA,EAAA5Y,SAAA6Y,IACXhL,GAWDA,EAAA0L,IAAA/J,EAAA,SAAA/J,EAAA1K,EAAAqL,GACA,MAAAyH,GAAAwL,QAAA5T,EAAA1K,EAAAqL,GAAAuS,MAYA9K,EAAA2L,IAAAhK,EAAA,SAAA/J,EAAA1K,EAAApB,GACA,MAAAkU,GAAAyL,QAAA7T,EAAA1K,EAAApB,GAAAgf,MAYA9K,EAAAsL,IAAA3J,EAAA,SAAAkJ,EAAA9E,EAAAxN,EAAAlM,GACA,GAAA+T,EAAA/T,EAAA,WACA,GAAAgb,GAAA5E,EAAA4E,KACA,gBAAAA,EAAAwD,GAAAxD,EAAAtB,GAAAsB,EAAA9O,IAAAlM,EAAAuf,QAAA,QAEA,oBAAArT,EAAAwN,GAAA,EAAA8E,GAAA,IAAA1Y,SAAA,IAAAmH,MAAA,IAEA,IAAA2R,GAAA,SAAAY,GACA,GAAAhgB,GAAAmM,EAAAsI,IAAAlL,qBAAA,YAAA4C,EAAAsI,IAAAlL,qBAAA,UACA8V,EAAA,gBAUA,QATAD,EAAAtJ,EAAA,SAAAkK,GACA,UAAAA,EAAArW,cACA,MAAA0V,EAEArf,GAAAigB,MAAAD,MAAAX,EACArf,EAAAigB,MAAAD,OACA,IAAAjS,GAAA5B,EAAAsI,IAAAyL,YAAAC,iBAAAngB,EAAA+Y,GAAAqH,iBAAA,QACA,OAAArS,IAAAsR,EAAA,KAAAtR,KAEAiS,IAEAK,EAAA,WACA,cAAA3gB,KAAAqM,EAAArM,KAAA2B,EAAA3B,KAAAgN,GAAA,KAEA4T,EAAA,WACA,cAAA5gB,KAAAqM,EAAArM,KAAA2B,EAAA3B,KAAAO,GAAA,KAEAkf,EAAA,WACA,UAAAzf,KAAA8f,SAAA,MAAA9f,KAAA8f,QACA9f,KAAAuf,IACA,SAAAvf,KAAAsf,EAAAtf,KAAAwa,EAAAxa,KAAAgN,EAAAhN,KAAA8f,SAAA,KAEAe,EAAA,SAAAvB,EAAA9E,EAAAxN,GAMA,GALA,MAAAwN,GAAA3F,EAAAyK,EAAA,gBAAAA,IAAA,KAAAA,IAAA,KAAAA,KACAtS,EAAAsS,EAAAtS,EACAwN,EAAA8E,EAAA9E,EACA8E,OAEA,MAAA9E,GAAA3F,EAAAyK,EAAAwB,QAAA,CACA,GAAAC,GAAAtM,EAAA0K,OAAAG,EACAA,GAAAyB,EAAAzB,EACA9E,EAAAuG,EAAAvG,EACAxN,EAAA+T,EAAA/T,EAQA,OANAsS,EAAA,GAAA9E,EAAA,GAAAxN,EAAA,KACAsS,GAAA,IACA9E,GAAA,IACAxN,GAAA,MAGAsS,EAAA9E,EAAAxN,IAEAgU,EAAA,SAAA1B,EAAA9E,EAAAxN,EAAAlM,GACAwe,EAAApI,EAAA4E,MAAA,IAAAwD,GACA9E,EAAAtD,EAAA4E,MAAA,IAAAtB,GACAxN,EAAAkK,EAAA4E,MAAA,IAAA9O,EACA,IAAA+S,IACAT,IACA9E,IACAxN,IACA8S,QAAAjL,EAAA/T,EAAA,UAAAA,EAAA,EACAye,IAAA9K,EAAAsL,IAAAT,EAAA9E,EAAAxN,GACApG,SAAA6Y,EAGA,OADA5K,GAAA/T,EAAA,YAAAif,EAAAD,QAAAhf,GACAif,EAqBAtL,GAAA6L,MAAA,SAAAS,GACA,GAAAhB,EAiCA,OAhCAlL,GAAAkM,EAAA,gBAAAA,IAAA,KAAAA,IAAA,KAAAA,IACAhB,EAAAtL,EAAAwL,QAAAc,GACAA,EAAAzB,EAAAS,EAAAT,EACAyB,EAAAvG,EAAAuF,EAAAvF,EACAuG,EAAA/T,EAAA+S,EAAA/S,EACA+T,EAAAjB,QAAA,EACAiB,EAAAxB,IAAAQ,EAAAR,KACK1K,EAAAkM,EAAA,gBAAAA,IAAA,KAAAA,IAAA,KAAAA,IACLhB,EAAAtL,EAAAyL,QAAAa,GACAA,EAAAzB,EAAAS,EAAAT,EACAyB,EAAAvG,EAAAuF,EAAAvF,EACAuG,EAAA/T,EAAA+S,EAAA/S,EACA+T,EAAAjB,QAAA,EACAiB,EAAAxB,IAAAQ,EAAAR,MAEA1K,EAAAkM,EAAA,YACAA,EAAAtM,EAAA0K,OAAA4B,IAEAlM,EAAAkM,EAAA,gBAAAA,IAAA,KAAAA,IAAA,KAAAA,MAAA,SAAAA,KACAhB,EAAAtL,EAAAwM,QAAAF,GACAA,EAAA1U,EAAA0T,EAAA1T,EACA0U,EAAApf,EAAAoe,EAAApe,EACAof,EAAAxgB,EAAAwf,EAAAxf,EACAwf,EAAAtL,EAAAyM,QAAAH,GACAA,EAAAI,EAAApB,EAAA/S,IAEA+T,GAAmBxB,IAAA,QACnBwB,EAAAzB,EAAAyB,EAAAvG,EAAAuG,EAAA/T,EAAA+T,EAAA1U,EAAA0U,EAAApf,EAAAof,EAAAI,EAAAJ,EAAAxgB,GAAA,EACAwgB,EAAAvB,MAAA,IAGAuB,EAAAna,SAAA6Y,EACAsB,GAkBAtM,EAAAwL,QAAA,SAAA5T,EAAA1K,EAAAwf,EAAArgB,GACA+T,EAAAxI,EAAA,gBAAAA,IAAA,KAAAA,IAAA,KAAAA,KACA8U,EAAA9U,EAAAW,EACArL,EAAA0K,EAAA1K,EACAb,EAAAuL,EAAAvL,EACAuL,OAEAA,GAAA,GACA,IAAA+U,GAAAC,EAAArP,EAAA8B,EAAAwN,CAUA,OATAjV,KAAA,OACAiV,EAAAH,EAAAxf,EACAmS,EAAAwN,GAAA,EAAAvN,EAAA1H,EAAA,MACA+U,EAAAC,EAAArP,EAAAmP,EAAAG,EAEAjV,MACA+U,IAAAE,EAAAxN,EAAA,IAAAA,EAAAwN,GAAAjV,GACAgV,IAAAvN,EAAAwN,IAAAxN,EAAA,KAAAzH,GACA2F,IAAA,IAAA8B,EAAAwN,IAAAxN,GAAAzH,GACA2U,EAAAI,EAAAC,EAAArP,EAAAlR,IAkBA2T,EAAAyL,QAAA,SAAA7T,EAAA1K,EAAApB,EAAAO,GACA+T,EAAAxI,EAAA,gBAAAA,IAAA,KAAAA,IAAA,KAAAA,KACA9L,EAAA8L,EAAA9L,EACAoB,EAAA0K,EAAA1K,EACA0K,QAEAA,EAAA,GAAA1K,EAAA,GAAApB,EAAA,KACA8L,GAAA,IACA1K,GAAA,IACApB,GAAA,KAEA8L,GAAA,GACA,IAAA+U,GAAAC,EAAArP,EAAA8B,EAAAwN,CAUA,OATAjV,KAAA,OACAiV,EAAA,EAAA3f,GAAApB,EAAA,GAAAA,EAAA,EAAAA,GACAuT,EAAAwN,GAAA,EAAAvN,EAAA1H,EAAA,MACA+U,EAAAC,EAAArP,EAAAzR,EAAA+gB,EAAA,EAEAjV,MACA+U,IAAAE,EAAAxN,EAAA,IAAAA,EAAAwN,GAAAjV,GACAgV,IAAAvN,EAAAwN,IAAAxN,EAAA,KAAAzH,GACA2F,IAAA,IAAA8B,EAAAwN,IAAAxN,GAAAzH,GACA2U,EAAAI,EAAAC,EAAArP,EAAAlR,IAiBA2T,EAAAyM,QAAA,SAAA5B,EAAA9E,EAAAxN,GACAA,EAAA6T,EAAAvB,EAAA9E,EAAAxN,GACAsS,EAAAtS,EAAA,GACAwN,EAAAxN,EAAA,GACAA,IAAA,EAEA,IAAAuU,GAAAC,EAAAC,EAAAH,CASA,OARAG,GAAA/F,EAAA4D,EAAA9E,EAAAxN,GACAsU,EAAAG,EAAA7F,EAAA0D,EAAA9E,EAAAxN,GACAuU,EAAA,GAAAD,EAAA,KACAG,GAAAnC,GAAA9E,EAAAxN,GAAAsU,EACAG,GAAAjH,GAAAxN,EAAAsS,GAAAgC,EAAA,GACAhC,EAAA9E,GAAA8G,EAAA,EACAC,KAAA,cACAC,EAAA,GAAAF,EAAA,EAAAA,EAAAG,GACYpV,EAAAkV,EAAA5f,EAAA6f,EAAAxU,EAAAyU,EAAA7a,SAAA+Z,IAiBZlM,EAAAwM,QAAA,SAAA3B,EAAA9E,EAAAxN,GACAA,EAAA6T,EAAAvB,EAAA9E,EAAAxN,GACAsS,EAAAtS,EAAA,GACAwN,EAAAxN,EAAA,GACAA,IAAA,EAEA,IAAAuU,GAAAC,EAAAE,EAAAC,EAAAlhB,EAAA6gB,CAaA,OAZAK,GAAAjG,EAAA4D,EAAA9E,EAAAxN,GACAvM,EAAAmb,EAAA0D,EAAA9E,EAAAxN,GACAsU,EAAAK,EAAAlhB,EACA8gB,EAAA,GAAAD,EAAA,KACAK,GAAArC,GAAA9E,EAAAxN,GAAAsU,EACAK,GAAAnH,GAAAxN,EAAAsS,GAAAgC,EAAA,GACAhC,EAAA9E,GAAA8G,EAAA,EACAC,KAAA,cACAG,GAAAC,EAAAlhB,GAAA,EACA+gB,EAAA,GAAAF,EAAA,EACAI,EAAA,GAAAJ,GAAA,EAAAI,GACAJ,GAAA,IAAAI,IACYrV,EAAAkV,EAAA5f,EAAA6f,EAAAjhB,EAAAmhB,EAAA9a,SAAAga,IAcZnM,EAAAmN,gBAAA,SAAAC,GACA,IAAAA,EACA,WAEA,IAAAC,GAAArN,EAAArS,KAAAyf,EACA,IAAAC,EAAAC,IACA,MAAAtN,GAAArS,KAAA4T,MAAA8L,EAAAC,IAGA,IAAAC,IAAuB7d,EAAA,EAAAzD,EAAA,EAAAI,EAAA,EAAAuL,EAAA,EAAA9L,EAAA,EAAAE,EAAA,EAAA6e,EAAA,EAAA5L,EAAA,EAAA/R,EAAA,EAAAuS,EAAA,EAAAiN,EAAA,EAAAc,EAAA,EAAA/T,EAAA,GACvBlM,IA+BA,OA9BA6S,GAAAgN,EAAA,UAAAhN,EAAAgN,EAAA,cACA7f,EAAAyS,EAAArS,KAAA4T,MAAA6L,IAEA7f,EAAA+E,QACAuG,EAAAuU,GAAAxS,QAAA+M,EAAA,SAAAjY,EAAA6I,EAAAtM,GACA,GAAA+W,MACA7W,EAAAoM,EAAA/C,aAYA,IAXAvJ,EAAA2O,QAAAiN,EAAA,SAAAnY,EAAA6I,GACAA,GAAAyK,EAAAjS,MAAAwH,KAEA,KAAApM,GAAA6W,EAAA1Q,OAAA,IACA/E,EAAAwD,MAAAwH,GAAAhH,OAAAyR,EAAAvH,OAAA,OACAtP,EAAA,IACAoM,EAAA,KAAAA,EAAA,SAEA,KAAApM,GAAA,GAAA6W,EAAA1Q,QACA/E,EAAAwD,MAAAwH,EAAAyK,EAAA,KAEA,KAAA7W,EACAoB,EAAAwD,MAAAwH,GAAAhH,OAAAyR,QACa,MAAAA,EAAA1Q,QAAAib,EAAAphB,KACboB,EAAAwD,MAAAwH,GAAAhH,OAAAyR,EAAAvH,OAAA,EAAA8R,EAAAphB,MACAohB,EAAAphB,SAMAoB,EAAA4E,SAAA6N,EAAArS,KAAAwE,SACAkb,EAAAC,IAAAtN,EAAArS,KAAA4T,MAAAhU,GACAA,EAYA,IAAA+V,IAAAtD,EAAAsD,qBAAA,SAAAmK,GACA,IAAAA,EACA,WAEA,IACAlgB,KAeA,OAdA6S,GAAAqN,EAAA,UAAArN,EAAAqN,EAAA,cACAlgB,EAAAyS,EAAArS,KAAA4T,MAAAkM,IAEAlgB,EAAA+E,QACAuG,EAAA4U,GAAA7S,QAAAgN,EAAA,SAAAlY,EAAA6I,EAAAtM,GACA,GAAA+W,KACAzK,GAAA/C,aACAvJ,GAAA2O,QAAAiN,EAAA,SAAAnY,EAAA6I,GACAA,GAAAyK,EAAAjS,MAAAwH,KAEAhL,EAAAwD,MAAAwH,GAAAhH,OAAAyR,MAGAzV,EAAA4E,SAAA6N,EAAArS,KAAAwE,SACA5E,EA8BAyS,GAAA6F,EAAAhD,sBACA7C,EAAA6F,EAAA6H,YAAA,sBAqEA1N,EAAA6F,EAAA1C,mBACAnD,EAAA2N,SAAAjJ,CACA1M,GAAAsI,IAAAsN,UAAA5V,EAAAsI,IAAAuN,uBAoCA7N,GAAA6F,EAAA1B,cACAnE,EAAA6F,EAAApB,aAqGAzE,EAAAvR,OAAA,SAAAqf,GAEA,MADAA,GAAAjV,EAAAiV,GAAAlT,QAAA,qBACAuF,EAAAnI,EAAAsI,IAAA9R,cAAAsf,KAUA9N,EAAA+N,UAAA,SAAAD,GAGA,OAFAE,GAAAhW,EAAAsI,IAAA2N,iBAAAH,GACA1P,GAAA4B,EAAA5B,KAAApF,SACAnN,EAAA,EAAmBA,EAAAmiB,EAAA1b,OAAqBzG,IACxCuS,EAAArN,KAAAoP,EAAA6N,EAAAniB,IAEA,OAAAuS,IA2BA8P,YAAA,WACA,OAAA1S,KAAAgK,GAAA,GAAAA,EAAArN,GAAAqD,GAAA,CACA,GAAAiF,GAAA+E,EAAAhK,GACA4I,EAAA3D,EAAA2D,MACA,OAAA3D,EAAAtN,OAAAiR,EAAAC,iBAAA,OAAA5D,EAAAtN,QAAAiR,EAAA1Q,YAAA,mBAAA0Q,GAAA1Q,aAAA0Q,EAAAC,yBACAmB,GAAAhK,KAGC,KAyED6E,EAAAtT,UAAAuC,KAAA,SAAA0T,EAAArT,GACA,GAAA8Q,GAAAlV,KACA6Y,EAAA3D,EAAA2D,IACA,KAAApB,EAAA,CACA,MAAAoB,EAAAlE,SACA,OACAQ,KAAA0D,EAAAnD,UAKA,QAFA3R,GAAA8U,EAAA+J,WACAvU,KACA/N,EAAA,EAAA6M,EAAApJ,EAAAgD,OAA6CzG,EAAA6M,EAAQ7M,IACrD+N,EAAAtK,EAAAzD,GAAA8Z,UAAArW,EAAAzD,GAAAoV,SAEA,OAAArH,GAEA,GAAAwG,EAAA4C,EAAA,WACA,KAAAzJ,UAAAjH,OAAA,GAKA,MAAA4G,GAAA,qBAAA8J,EAAAvC,GAAAhI,cAJA,IAAA2V,KACAA,GAAApL,GAAArT,EACAqT,EAAAoL,EAKA,OAAAC,KAAArL,GACAA,EAAA7K,GAAAkW,IACAnV,EAAA,kBAAAmV,EAAA5N,EAAAuC,EAAAqL,GAGA,OAAA5N,IAWAT,EAAAsO,MAAA,SAAArJ,GACA,GAAAvK,GAAA1C,EAAAsI,IAAAiO,yBACAC,GAAA,EACAC,EAAAzW,EAAAsI,IAAApN,cAAA,MAQA,IAPA+R,EAAApM,EAAAoM,GACAA,EAAAsG,MAAA,yBACAtG,EAAA,QAAAA,EAAA,SACAuJ,GAAA,GAEAC,EAAAC,UAAAzJ,EACAA,EAAAwJ,EAAArZ,qBAAA,UAEA,GAAAoZ,EACA9T,EAAAuK,MAEA,MAAAA,EAAAlQ,YACA2F,EAAArH,YAAA4R,EAAAlQ,WAIA,WAAAqR,GAAA1L,IAcAsF,EAAA2O,SAAA,WAGA,OAFAtV,GAAAL,MAAAjM,UAAAuM,MAAAvN,KAAAwN,UAAA,GACAmB,EAAA1C,EAAAsI,IAAAiO,yBACA1iB,EAAA,EAAA6M,EAAAW,EAAA/G,OAAqCzG,EAAA6M,EAAQ7M,IAAA,CAC7C,GAAAoF,GAAAoI,EAAAxN,EACAoF,GAAAmT,MAAAnT,EAAAmT,KAAAlE,UACAxF,EAAArH,YAAApC,EAAAmT,MAEAnT,EAAAiP,UACAxF,EAAArH,YAAApC,GAEA,gBAAAA,IACAyJ,EAAArH,YAAA2M,EAAAsO,MAAArd,GAAAmT,MAGA,UAAAgC,GAAA1L,IA+DAsF,EAAA6F,EAAArB,OACAxE,EAAA6F,EAAA1F,OAwBAI,EAAAxT,UAAA0T,GAAA,SAAAtU,EAAAmD,GACA,GAAAmR,GAAA+D,EAAArY,EAAAZ,KAAA6Y,KAEA,OADA9U,IAAAmR,EAAAnR,QACAmR,GASAJ,EAAAtT,UAAAuY,SAAA,WAGA,OAFA1L,MACAgV,EAAArjB,KAAA6Y,KAAAxP,WACA/I,EAAA,EAAA6M,EAAAkW,EAAAtc,OAAmCzG,EAAA6M,EAAQ7M,IAC3C+N,EAAA/N,GAAAmU,EAAA4O,EAAA/iB,GAEA,OAAA+N,IA2BAyG,EAAAtT,UAAA8hB,OAAA,WACA,GAAAjV,KAEA,OADA+M,IAAApb,MAAAqO,GACAA,EAAA,IAGAV,EAAA4B,GAAA,+BACA,GAAAuT,GAAAnV,EAAAgC,IACAmT,KAAAzN,UAAAyN,EAAAS,YAAA,OACA,IAAA1a,GAAAia,EAAAzT,QAAA,kBAAAmU,GACA,UAAAA,EAAAvZ,eAEA,OAAAwZ,IAAA7W,GAAA/D,GACA7I,KAAA6Y,KAAAoC,cAAAuF,YAAAC,iBAAAzgB,KAAA6Y,KAAA,MAAA6H,iBAAA7X,GAEAoM,EAAAjV,KAAA6Y,KAAAiK,IAGA,IAAAW,KACAC,qBAAA,EACAC,iBAAA,EACAC,KAAA,EACAC,YAAA,EACAC,YAAA,EACAxD,MAAA,EACAyD,sBAAA,EACAC,8BAAA,EACAC,gBAAA,EACAC,kBAAA,EACAC,OAAA,EACAC,UAAA,EACAC,QAAA,EACAC,oBAAA,EACAC,oBAAA,EACA3K,KAAA,EACA4K,eAAA,EACAC,YAAA,EACAja,OAAA,EACAka,cAAA,EACAC,gBAAA,EACAC,KAAA,EACAC,cAAA,EACAC,YAAA,EACAC,mBAAA,EACAC,eAAA,EACAC,aAAA,EACAC,eAAA,EACAC,cAAA,EACAC,+BAAA,EACAC,6BAAA,EACAC,kBAAA,EACAC,QAAA,EACAC,iBAAA,EACAC,iBAAA,EACAC,OAAA,EACAC,aAAA,EACAC,aAAA,EACAC,eAAA,EACApL,KAAA,EACAqF,QAAA,EACAgG,SAAA,EACAC,iBAAA,EACAC,kBAAA,EACAC,aAAA,EACAC,eAAA,EACAC,OAAA,EACAC,mBAAA,EACAC,oBAAA,EACAC,iBAAA,EACAC,kBAAA,EACAC,oBAAA,EACAC,iBAAA,EACAC,eAAA,EACAC,cAAA,EACAC,kBAAA,EACAC,iBAAA,EACAC,eAAA,EACAC,WAAA,EACAC,eAAA,EACAC,eAAA,EAGAtZ,GAAA4B,GAAA,0BAAAnL,GACA,GAAA0e,GAAAnV,EAAAgC,KACA5L,IACA+e,KAAAzN,UAAAyN,EAAAS,YAAA,QACAxf,EAAA+e,GAAA1e,CACA,IAAAmc,GAAAuC,EAAAzT,QAAA,mBAAAmI,EAAAgM,GACA,MAAAA,GAAA0D,gBAEAre,EAAAia,EAAAzT,QAAA,kBAAAmU,GACA,UAAAA,EAAAvZ,eAEAwZ,IAAA7W,GAAA/D,GACA7I,KAAA6Y,KAAA0H,SAAA,MAAAnc,EAAAiV,EAAAjV,EAEA6Q,EAAAjV,KAAA6Y,KAAA9U,KAGoBiR,EAAAxT,UAmBpBiT,EAAA0S,KAAA,SAAA5K,EAAA6K,EAAAhW,EAAAxD,GACA,GAAAyZ,GAAA,GAAAC,gBACAtgB,EAAAyK,GACA,IAAA4V,EAAA,CACA,GAAAxS,EAAAuS,EAAA,YACAxZ,EAAAwD,EACAA,EAAAgW,EACAA,EAAA,SACS,IAAAvS,EAAAuS,EAAA,WACT,GAAAG,KACA,QAAAtX,KAAAmX,KAAA3lB,eAAAwO,IACAsX,EAAA/hB,KAAAgB,mBAAAyJ,GAAA,IAAAzJ,mBAAA4gB,EAAAnX,IAEAmX,GAAAG,EAAAlhB,KAAA,KAgBA,MAdAghB,GAAA1iB,KAAAyiB,EAAA,aAAA7K,GAAA,IACA6K,IACAC,EAAAG,iBAAA,qCACAH,EAAAG,iBAAA,qDAEApW,IACAzD,EAAA4C,KAAA,aAAAvJ,EAAA,KAAAoK,GACAzD,EAAA4C,KAAA,aAAAvJ,EAAA,OAAAoK,GACAzD,EAAA4C,KAAA,aAAAvJ,EAAA,OAAAoK,IAEAiW,EAAAI,mBAAA,WACA,GAAAJ,EAAAK,YACA/Z,EAAA,aAAA3G,EAAA,IAAAqgB,EAAAlU,OAAAvF,EAAAyZ,IAEA,GAAAA,EAAAK,YACAL,GAEAA,EAAAM,KAAAP,GACAC,KAaA5S,EAAAmT,KAAA,SAAArL,EAAAnL,EAAAxD,GACA6G,EAAA0S,KAAA5K,EAAA,SAAA8K,GACA,GAAAlY,GAAAsF,EAAAsO,MAAAsE,EAAAQ,aACAja,GAAAwD,EAAA5Q,KAAAoN,EAAAuB,GAAAiC,EAAAjC,KAGA,IAAA2Y,IAAA,SAAAC,GACA,GAAAC,GAAAD,EAAAE,wBACAlT,EAAAgT,EAAA9M,cACA3X,EAAAyR,EAAAzR,KACA4kB,EAAAnT,EAAAoT,gBACAC,EAAAF,EAAAE,WAAA9kB,EAAA8kB,WAAA,EAAAC,EAAAH,EAAAG,YAAA/kB,EAAA+kB,YAAA,CAGA,QACArU,EAHAgU,EAAAM,KAAA9N,EAAAa,IAAAkN,aAAAL,EAAAM,WAAAllB,EAAAklB,WAAAJ,EAIAvU,EAHAmU,EAAAS,MAAAjO,EAAAa,IAAAqN,aAAAR,EAAAS,YAAArlB,EAAAqlB,YAAAN,GAyDA,OAvCA5T,GAAAmU,kBAAA,SAAA/U,EAAAG,GACA,GAAAkG,GAAAla,KAEA6oB,GADA3O,EAAA4O,OACArc,EAAAsI,IAAAgU,iBAAAlV,EAAAG,GACA,IAAAvH,EAAA4O,IAAA2N,OAAA,OAAAH,EAAA1O,QAAA,CACA,GAAA8O,GAAAnB,GAAAe,GACAK,EAAAL,EAAAM,eACAD,GAAArV,IAAAoV,EAAApV,EACAqV,EAAAlV,IAAAiV,EAAAjV,EACAkV,EAAAzQ,MAAAyQ,EAAAxQ,OAAA,CACA,IAAA0Q,GAAAP,EAAAQ,oBAAAH,EAAA,KACAE,GAAAriB,SACA8hB,EAAAO,IAAAriB,OAAA,IAGA,MAAA8hB,GAGAjU,EAAAiU,GAFA,MAmBApU,EAAAnQ,OAAA,SAAA6K,GACAA,EAAAsF,EAAAK,EAAAE,EAAAvI,EAAAoO,IAEApO,EAAA4O,IAAA5G,OACAA,GACC9D,GAAA3Q,KAyxLD,OA1wLAyU,GAAAnQ,OAAA,SAAAmQ,EAAAK,EAAAE,EAAAvI,EAAAoO,GA8EA,QAAAyO,GAAApU,EAAAqC,GACA,SAAAA,EAAA,CACA,GAAAgS,IAAA,CAQA,MANAhS,EADA,kBAAArC,EAAAtN,MAAA,kBAAAsN,EAAAtN,KACAsN,EAAA2D,KAAApD,aAAA,qBACa,WAAAP,EAAAtN,KACbsN,EAAA2D,KAAApD,aAAA,oBAEAP,EAAA2D,KAAApD,aAAA,cAGA,UAAAhB,GAAAuD,MAEAT,GAAA9C,EAAA6F,EAAAhD,oBAAAC,OAKAA,GAHA9C,EAAA6F,EAAA6H,YAAApY,KAAAwN,GAGAjK,EAAAiK,GAAAlI,QAAA,gBAA+C6F,EAAAoF,EAAAC,WAAA,IAF/C9F,EAAA6F,EAAAhD,oBAAAC,GAIA1C,EAAA0C,EAAA,WACAA,EAAA9C,EAAArS,KAAAqS,EAAArS,KAAAwE,SAAApG,KAAA+W,GAAAjK,EAAAiK,IAEArC,EAAAoF,EAAAC,UAAAhD,CAEA,IAAA9W,GAAAgU,EAAA6F,EAAA1C,iBAAAL,EAAArC,EAAAqE,QAAA,GACA,IAAAgQ,EACA,MAAA9oB,EAEAyU,GAAAsU,OAAA/oB,EAkWA,QAAAgpB,GAAAvU,GAMA,QAAAwU,GAAAC,EAAA/oB,GACA,GAAAiR,GAAAoD,EAAA0U,EAAA9Q,KAAAjY,EACAiR,QAAAmO,MAAAzD,IACA1K,OAAA,KACA,KAAAA,EAAA8F,WACA9F,IAAAwD,UAAA,MAKAuU,EAAA/X,IAAA+X,EAAA/X,QAAA7L,OAAA,SAAAgB,GACA,GAAAjD,KACAA,GAAAnD,GAAA6T,EAAA8H,IAAAvV,GACAiO,EAAA0U,EAAA9Q,KAAA9U,MAiBA,OAlCA4lB,GADAE,EAAA3U,EAAAsN,UAAA,KAEAjG,EAAA,8BACAuN,KACAF,KA+BAtpB,EAAA,EAAA6M,EAAA0c,EAAA9iB,OAAwCzG,EAAA6M,EAAQ7M,IAAA,CAChDqpB,EAAAE,EAAAvpB,GACAopB,EAAAC,EAAA,QACAD,EAAAC,EAAA,UACAD,EAAAC,EAAA,UACAD,EAAAC,EAAA,QACAD,EAAAC,EAAA,aAnBA,SAAAA,GACA,GAAA9X,GAAAoD,EAAA0U,EAAA9Q,KAAA,aACAhH,IAAA,KAAAA,EAAA8F,WACA9F,IAAAwD,UAAA,MAKAuU,EAAA/X,IAAA+X,EAAA/X,QAAA7L,OAAA,SAAAgB,GACA2iB,EAAA5lB,KAAA,iBAAAiD,OAWA2iB,EACA,IAAAI,GAAA9U,EAAA0U,EAAA9Q,KAAA,KACAkR,KACA9U,EAAA0U,EAAA9Q,MAA4B7R,GAAA2iB,EAAA3iB,KAC5B8iB,EAAAtkB,MACAwkB,IAAAD,EACA/iB,GAAA2iB,EAAA3iB,MAIA,IAAA1G,EAAA,EAAA6M,EAAA2c,EAAA/iB,OAAoCzG,EAAA6M,EAAQ7M,IAAA,CAC5C,GAAA2pB,GAAAL,EAAAE,EAAAxpB,GAAA0pB,IACA,IAAAC,EACA,OAAA3iB,GAAA,EAAAuH,EAAAob,EAAAljB,OAA+CO,EAAAuH,EAAQvH,IACvD2iB,EAAA3iB,GAAAwiB,EAAAxpB,GAAA0G,KAkNA,QAAAJ,GAAAgB,GACA,kBACA,GAAA6K,GAAA7K,EAAA,IAAA5H,KAAA4H,KAAA,GACA7D,EAAA/D,KAAA6Y,KAAA+J,WACAsH,EAAAlqB,KAAA6Y,KAAAxP,UACA,IAAAzB,EACA,OAAAtH,GAAA,EAAA6M,EAAApJ,EAAAgD,OAAiDzG,EAAA6M,EAAQ7M,IACzDmS,GAAA,IAAA1O,EAAAzD,GAAAM,KAAA,KACAmD,EAAAzD,GAAA8D,MAAAiL,QAAA,eAGA,IAAA6a,EAAAnjB,OAAA,CAEA,IADAa,IAAA6K,GAAA,KACAnS,EAAA,EAAA6M,EAAA+c,EAAAnjB,OAA6CzG,EAAA6M,EAAQ7M,IACrD,GAAA4pB,EAAA5pB,GAAAqU,SACAlC,GAAAyX,EAAA5pB,GAAAoV,UACqB,GAAAwU,EAAA5pB,GAAAqU,WACrBlC,GAAAmC,EAAAsV,EAAA5pB,IAAAsG,WAGAgB,KAAA6K,GAAA,KAAAzS,KAAA4H,KAAA,SAEAA,KAAA6K,GAAA,KAEA,OAAAA,IA/uBA,GAAA0X,GAAArV,EAAAtT,UACAqT,EAAAJ,EAAAI,GACAvH,EAAAC,OACA4L,EAAA1E,EAAA2N,SACAnN,EAAAR,EAAA6F,EAAArF,EACAgE,EAAAxE,EAAA6F,EAAArB,KACAL,EAAAnE,EAAA6F,EAAA1B,YAEAhE,EAAAH,EAAA6F,EAAA1F,IA0BAuV,GAAA5Q,QAAA,SAAA6Q,GACA,YAAApqB,KAAA4H,KACA,MAAA6M,GAAA6F,EAAA0N,IAAAhoB,KAAA6Y,KAAAwR,iBAAA3kB,KAAA,GAEA,KAAA+O,EAAAuD,SAAAvD,EAAArS,KACA,MAAApC,MAAA6Y,KAAAU,SAEA,IAAArE,GAAAlV,KACAS,EAAA,GAAAgU,GAAAuD,MACA,IAAA9C,EAAAoV,QACA,MAAA7V,GAAA6F,EAAA0N,KAEA,aAAA9S,EAAAtN,MAIA,GAHAwiB,IACA3pB,IAAA+C,IAAA0R,EAAAqF,YAAAgQ,YAAAhS,UAAArD,EAAAnR,KAAA,QAAAmR,EAAAnR,KAAA,WAEAmR,EAAAsV,SACAtV,IAAAsV,aACa,CACb,GAAAC,GAAAvV,EAAAnR,KAAA,aACAmR,KAAAsV,SAAAtV,EAAA2D,KAAAoC,cAAAjY,eAAAynB,EAAApV,UAAAoV,EAAApL,QAAA,SAGA,GAAA/E,GAAApF,EAAAoF,EACAoQ,EAAAjW,EAAArS,KAAAjB,IAAA+T,EAAAtN,OAAA6M,EAAArS,KAAAjB,IAAAwpB,KACA,KACA,MAAAP,IACA9P,EAAAsQ,OAAAF,EAAAjW,EAAArS,KAAAmX,QAAArE,EAAA2V,SAAAH,EAAAxV,IAAAT,EAAA6F,EAAA0N,IAAA9S,EAAA2D,KAAAU,WACA9E,EAAA6F,EAAA0N,IAAA1N,EAAAsQ,UAEA1V,EAAA2V,SAAAH,EAAAxV,GACAA,EAAAsU,OAAAtU,EAAAqF,YAAAgQ,YACAjQ,EAAAzC,KAAApD,EAAArS,KAAAmX,QAAA9E,EAAArS,KAAA8D,IAAAgP,EAAA2V,SAAApqB,EAAA+C,IAAA0R,EAAAsU,UACA/U,EAAA6F,EAAA0N,IAAA1N,EAAAzC,OAES,MAAA5I,GAET,MAAAwF,GAAA6F,EAAA0N,OAGA,IAAA8C,GAAA,WACA,MAAA9qB,MAAA8gB,OAsDAqJ,GAAA5P,UAAA,SAAAhD,GACA,GAAA+C,GAAAta,KAAAsa,CACA,UAAA/C,EAAA,CAUA,IATA,GAKAjX,GALAyqB,EAAA/qB,KACAgrB,EAAA,GAAAvW,GAAAuD,OAAAhY,KAAA6Y,KAAAoS,UACAC,EAAA5B,EAAAtpB,MACAmrB,GAAAD,GACAzqB,EAAA,GAAAgU,GAAAuD,OAEAoT,EAAAF,EAAAG,oBACAvK,EAAAxT,EAAA4d,IAAA5d,EAAAtN,KAAAwpB,QACAlc,EAAAgN,EAAAC,WAAA6Q,EACA,OAAAL,EAAAnjB,OAAAmjB,IAAAjf,WACAqf,EAAA3lB,KAAA8jB,EAAAyB,GAGA,KADAzqB,EAAA6qB,EAAApkB,OACAzG,KACAG,EAAA+C,IAAA2nB,EAAA7qB,GAEA,QACAwgB,SACAwK,aAAAN,EACAO,YAAA9qB,EACA8pB,YAAAW,EACAM,WAAAR,EAAAhV,QAAAxS,IAAA0nB,EAAA5S,UACA0S,SAAAK,oBACAI,MAAAhrB,EAAA4qB,oBACAH,MAAAE,EACAxkB,SAAAkkB,GAoBA,MAjBAvT,aAAA9C,GAAAuD,QACAhY,KAAAwpB,OAAAjS,EACAvX,KAAAsa,EAAAC,UAAAhD,EAAA8T,qBAEA/B,EAAAtpB,KAAAuX,GAGAvX,KAAA6Y,OACA,kBAAA7Y,KAAA4H,MAAA,kBAAA5H,KAAA4H,KACAqN,EAAAjV,KAAA6Y,MAA8B6S,kBAAA1rB,KAAAwpB,SACjB,WAAAxpB,KAAA4H,KACbqN,EAAAjV,KAAA6Y,MAA8B8S,iBAAA3rB,KAAAwpB,SAE9BvU,EAAAjV,KAAA6Y,MAA8B0B,UAAAva,KAAAwpB,UAI9BxpB,MAUAmqB,EAAAre,OAAA,WACA,MAAA8I,GAAA5U,KAAA6Y,KAAA1Q,aAiBAgiB,EAAAyB,OAAAzB,EAAA3mB,IAAA,SAAA0R,GACA,GAAAA,EAAA,CACA,UAAAA,EAAAtN,KAAA,CACA,GAAA+hB,GAAA3pB,IAIA,OAHAkV,GAAA4E,QAAA,SAAA5E,GACAyU,EAAAnmB,IAAA0R,KAEAlV,KAEAkV,EAAAN,EAAAM,GACAlV,KAAA6Y,KAAA/Q,YAAAoN,EAAA2D,MACA3D,EAAAgF,MAAAla,KAAAka,MAEA,MAAAla,OAWAmqB,EAAA0B,SAAA,SAAA3W,GAKA,MAJAA,KACAA,EAAAN,EAAAM,GACAA,EAAA0W,OAAA5rB,OAEAA,MAWAmqB,EAAA2B,QAAA,SAAA5W,GACA,GAAAA,EAAA,CACA,UAAAA,EAAAtN,KAAA,CACA,GACAmkB,GADApC,EAAA3pB,IAUA,OARAkV,GAAA4E,QAAA,SAAA5E,GACA6W,EACAA,EAAAtN,MAAAvJ,GAEAyU,EAAAmC,QAAA5W,GAEA6W,EAAA7W,IAEAlV,KAEAkV,EAAAN,EAAAM,EACA,IAAApJ,GAAAoJ,EAAApJ,QACA9L,MAAA6Y,KAAAvP,aAAA4L,EAAA2D,KAAA7Y,KAAA6Y,KAAArP,YACAxJ,KAAAwD,KAAAxD,KAAAwD,MACA0R,EAAAgF,MAAAla,KAAAka,MACAla,KAAA8L,UAAA9L,KAAA8L,SAAAtI,MACAsI,KAAAtI,MAEA,MAAAxD,OAWAmqB,EAAA6B,UAAA,SAAA9W,GAGA,MAFAA,GAAAN,EAAAM,GACAA,EAAA4W,QAAA9rB,MACAA,MAWAmqB,EAAA3L,OAAA,SAAAtJ,GACA,UAAAA,EAAAtN,KAAA,CACA,GAAA+hB,GAAA3pB,IAOA,OANAkV,GAAA4E,QAAA,SAAA5E,GACA,GAAApJ,GAAAoJ,EAAApJ,QACA6d,GAAA9Q,KAAA1Q,WAAAmB,aAAA4L,EAAA2D,KAAA8Q,EAAA9Q,MACA/M,KAAAtI,QAEAxD,KAAA8L,SAAAtI,MACAxD,KAEAkV,EAAAN,EAAAM,EACA,IAAApJ,GAAAoJ,EAAApJ,QAKA,OAJA9L,MAAA6Y,KAAA1Q,WAAAmB,aAAA4L,EAAA2D,KAAA7Y,KAAA6Y,MACA7Y,KAAA8L,UAAA9L,KAAA8L,SAAAtI,MACAsI,KAAAtI,MACA0R,EAAAgF,MAAAla,KAAAka,MACAla,MAWAmqB,EAAA1L,MAAA,SAAAvJ,GACAA,EAAAN,EAAAM,EACA,IAAApJ,GAAAoJ,EAAApJ,QASA,OARA9L,MAAA6Y,KAAAoT,YACAjsB,KAAA6Y,KAAA1Q,WAAAmB,aAAA4L,EAAA2D,KAAA7Y,KAAA6Y,KAAAoT,aAEAjsB,KAAA6Y,KAAA1Q,WAAAL,YAAAoN,EAAA2D,MAEA7Y,KAAA8L,UAAA9L,KAAA8L,SAAAtI,MACAsI,KAAAtI,MACA0R,EAAAgF,MAAAla,KAAAka,MACAla,MAWAmqB,EAAA7gB,aAAA,SAAA4L,GACAA,EAAAN,EAAAM,EACA,IAAApJ,GAAA9L,KAAA8L,QAKA,OAJAoJ,GAAA2D,KAAA1Q,WAAAmB,aAAAtJ,KAAA6Y,KAAA3D,EAAA2D,MACA7Y,KAAAka,MAAAhF,EAAAgF,MACApO,KAAAtI,MACA0R,EAAApJ,UAAAoJ,EAAApJ,SAAAtI,MACAxD,MAWAmqB,EAAA+B,YAAA,SAAAhX,GACAA,EAAAN,EAAAM,EACA,IAAApJ,GAAA9L,KAAA8L,QAKA,OAJAoJ,GAAA2D,KAAA1Q,WAAAmB,aAAAtJ,KAAA6Y,KAAA3D,EAAA2D,KAAAoT,aACAjsB,KAAAka,MAAAhF,EAAAgF,MACApO,KAAAtI,MACA0R,EAAApJ,UAAAoJ,EAAApJ,SAAAtI,MACAxD,MASAmqB,EAAAtmB,OAAA,WACA,GAAAiI,GAAA9L,KAAA8L,QAKA,OAJA9L,MAAA6Y,KAAA1Q,YAAAnI,KAAA6Y,KAAA1Q,WAAAC,YAAApI,KAAA6Y,YACA7Y,MAAAka,MACAla,KAAAsqB,SAAA,EACAxe,KAAAtI,MACAxD,MAWAmqB,EAAAjnB,OAAA,SAAAqf,GACA,MAAA3N,GAAA5U,KAAA6Y,KAAA5V,cAAAsf,KAWA4H,EAAA3H,UAAA,SAAAD,GAGA,OAFAE,GAAAziB,KAAA6Y,KAAA6J,iBAAAH,GACA1P,GAAA4B,EAAA5B,KAAApF,SACAnN,EAAA,EAAuBA,EAAAmiB,EAAA1b,OAAqBzG,IAC5CuS,EAAArN,KAAAoP,EAAA6N,EAAAniB,IAEA,OAAAuS,IAYAsX,EAAAgC,KAAA,SAAApoB,EAAAK,GAIA,MAHA,OAAAA,IACAA,EAAApE,KAAA+D,UAEAoV,EAAAnZ,KAAA+D,EAAAK,IAWA+lB,EAAAiC,IAAA,WACA,GAAAA,GACAplB,EAAAhH,KAAA6Y,KAAA7R,EAiBA,OAhBAA,KACAA,EAAAhH,KAAAgH,GACAiO,EAAAjV,KAAA6Y,MACA7R,QAKAolB,EAFA,kBAAApsB,KAAA4H,MAAA,kBAAA5H,KAAA4H,MACA,WAAA5H,KAAA4H,KACAqR,EAAAjZ,KAAA4H,KAAA5H,KAAA6Y,KAAA1Q,YAEA8Q,EAAA,MAAAjZ,KAAA6Y,KAAA1Q,YAEA8M,EAAAmX,EAAAvT,MACAwT,aAAA,IAAArlB,IAEAolB,EAAA5B,SAAAxqB,KACAosB,GAwEAjC,EAAAnU,MAAA,WACA,GAAAA,GAAApB,EAAA5U,KAAA6Y,KAAAyT,WAAA,GAMA,OALArX,GAAAe,EAAA6C,KAAA,OACA5D,EAAAe,EAAA6C,MAA2B7R,GAAAgP,EAAAhP,KAE3ByiB,EAAAzT,GACAA,EAAAkW,YAAAlsB,MACAgW,GAUAmU,EAAAoC,OAAA,WAGA,MAFA3T,GAAA5Y,MACA8H,YAAA9H,KAAA6Y,MACA7Y,MAyBAmqB,EAAAzP,QAAAyP,EAAAqC,UAAA,SAAA3Y,EAAAG,EAAAyE,EAAAC,GACA,GAAAhX,GAAAuX,EAAA,UAAAL,EAAA5Y,MAoBA,OAnBA,OAAA6T,IACAA,EAAA7T,KAAAuZ,WAEA1E,EAAAhB,EAAA,gBAAAA,KACAG,EAAAH,EAAAG,EACAyE,EAAA5E,EAAA4E,MACAC,EAAA7E,EAAA6E,OACA7E,OAEAoB,EAAAvT,EAAAmX,MACAhF,IACAG,IACAyE,QACAC,SACA+T,aAAA,iBACAzlB,GAAAtF,EAAAsF,GACA0lB,SAAA7Y,EAAAG,EAAAyE,EAAAC,GAAArS,KAAA,OAEA3E,EAAAmX,KAAA/Q,YAAA9H,KAAA6Y,MACAnX,GAqBAyoB,EAAAzE,OAAA,SAAA7R,EAAAG,EAAAyE,EAAAC,EAAAiU,EAAAC,GACA,GAAAlrB,GAAAuX,EAAA,SAAAL,EAAA5Y,MAsBA,OArBA,OAAA6T,IACAA,EAAA7T,KAAAuZ,WAEA1E,EAAAhB,EAAA,gBAAAA,KACAG,EAAAH,EAAAG,EACAyE,EAAA5E,EAAA4E,MACAC,EAAA7E,EAAA6E,OACAiU,EAAA9Y,EAAA8Y,MAAA9Y,EAAAgZ,GACAD,EAAA/Y,EAAA+Y,MAAA/Y,EAAAiZ,GACAjZ,OAEAoB,EAAAvT,EAAAmX,MACA6T,SAAA7Y,EAAAG,EAAAyE,EAAAC,GAAArS,KAAA,KACA0mB,YAAAtU,EACAuU,aAAAtU,EACAuU,OAAA,OACAN,QAAA,EACAC,QAAA,EACA5lB,GAAAtF,EAAAsF,KAEAtF,EAAAmX,KAAA/Q,YAAA9H,KAAA6Y,MACAnX,EAEA,IAAAwrB,KAwBA/C,GAAAnoB,KAAA,SAAAiO,EAAA7L,GACA,GAAApC,GAAAkrB,EAAAltB,KAAAgH,IAAAkmB,EAAAltB,KAAAgH,OACA,OAAAgH,UAAAjH,OAEA,MADA4G,GAAA,iBAAA3N,KAAAgH,GAAAhH,KAAAgC,EAAA,MACAA,CAEA,OAAAgM,UAAAjH,OAAA,CACA,GAAA0N,EAAAI,GAAA5E,EAAA,WACA,OAAA3P,KAAA2P,KAAA,eAAA3P,IACAN,KAAAgC,KAAA1B,EAAA2P,EAAA3P,GAEA,OAAAN,MAGA,MADA2N,GAAA,iBAAA3N,KAAAgH,GAAAhH,KAAAgC,EAAAiO,MACAjO,EAAAiO,GAIA,MAFAjO,GAAAiO,GAAA7L,EACAuJ,EAAA,iBAAA3N,KAAAgH,GAAAhH,KAAAoE,EAAA6L,GACAjQ,MAWAmqB,EAAAgD,WAAA,SAAAld,GAMA,MALA,OAAAA,EACAid,EAAAltB,KAAAgH,OAEAkmB,EAAAltB,KAAAgH,WAAAkmB,GAAAltB,KAAAgH,IAAAiJ,GAEAjQ,MAiBAmqB,EAAAiD,SAAAjD,EAAAvjB,WAAA,GAQAujB,EAAAkD,SAAAzmB,IA4BAujB,EAAAmD,UAAA,WACA,GAAA3c,KAAA9K,KAAA,CACA,GAAAoS,GAAAjY,KAAAuZ,UACAG,EAAAjF,EAAA+H,OAAA,0LACA3I,GAAAoE,EAAApE,EAAAwM,QAAA,GACArM,GAAAiE,EAAAjE,EAAAqM,QAAA,GACA5H,OAAAR,EAAAQ,MAAA4H,QAAA,GACA3H,QAAAT,EAAAS,OAAA2H,QAAA,GACAkN,SAAAvtB,KAAAotB,YAEA,oCAAuCvnB,KAAAU,SAAAC,mBAAAkT,OASvCmB,EAAArZ,UAAA0B,OAAAinB,EAAAjnB,OAOA2X,EAAArZ,UAAAghB,UAAA2H,EAAA3H,YAgBA/N,EAAAnQ,OAAA,SAAAmQ,EAAAK,EAAAE,EAAAvI,EAAAoO,GAKA,QAAA9M,GAAAyf,EAAAC,EAAAte,GACA,gBAAA4S,GACA,GAAAtP,GAAAsP,EAAAhU,MAAAyf,EAAAC,EAIA,OAHA,IAAAhb,EAAA1L,SACA0L,IAAA,IAEAtD,IAAAsD,MAVA,GAAA0X,GAAArV,EAAAtT,UACAqT,EAAAJ,EAAAI,GACAvH,EAAAC,OACAX,EAAA,iBAUA8gB,EAAA,SAAA3pB,EAAAonB,EAAAvY,EAAAxB,GACA,kBAAAwB,MAAA7L,SACAqK,EAAAwB,EACAA,EAAAlP,EAAAwP,QAEAlT,KAAA+D,OACA/D,KAAA+R,IAAAoZ,EACAvY,IAAA5S,KAAA4S,UACAxB,IAAApR,KAAAoR,YAEAqD,GAAA6F,EAAAoT,YAaAjZ,EAAAkZ,UAAA,SAAA5pB,EAAAonB,EAAAvY,EAAAxB,GACA,UAAAsc,GAAA3pB,EAAAonB,EAAAvY,EAAAxB,IAiBA+Y,EAAAyD,OAAA,WACA,GAAA1Y,GAAAlV,KACAyS,IACA,QAAAzL,KAAAkO,GAAAmF,MAAAnF,EAAAmF,MAAAzN,GAAA5F,IACA,SAAA7C,GACAsO,EAAAjN,MACAyN,KAAA,GAAAya,GAAAvpB,EAAA0pB,OAAA1pB,EAAA4N,IAAA5N,EAAAyO,OAAAzO,EAAA2pB,WACApqB,KAAAS,EACA4pB,UAAA5pB,EAAAgP,SACAA,OAAA,SAAAtB,GACA,MAAA1N,GAAAgP,OAAAtB,IAEAlF,KAAA,WACAxI,EAAAwI,WAGauI,EAAAmF,MAAArT,GAEb,OAAAyL,IAgCAgC,EAAAhR,QAAA,SAAA+pB,EAAAC,EAAAO,EAAA7C,EAAAvY,EAAAxB,GACA,kBAAAwB,MAAA7L,SACAqK,EAAAwB,EACAA,EAAAlP,EAAAwP,OAEA,IAAAvB,GAAAjO,EAAA0P,OACAH,EAAAvP,EAAA8pB,EAAAC,EAAA9b,IAAAwZ,EAAAznB,EAAA0P,KAAA4a,EAAApb,EAEA,OADAxB,IAAAzD,EAAA4C,KAAA,eAAA0C,EAAAjM,GAAAoK,GACA6B,GAUAkX,EAAAxd,KAAA,WAEA,OADA0N,GAAAra,KAAA4tB,SACAttB,EAAA,EAAA6M,EAAAkN,EAAAtT,OAA0CzG,EAAA6M,EAAQ7M,IAClD+Z,EAAA/Z,GAAAqM,MAEA,OAAA3M,OAcAmqB,EAAA1mB,QAAA,SAAAiM,EAAAyb,EAAAvY,EAAAxB,GACA,kBAAAwB,MAAA7L,SACAqK,EAAAwB,EACAA,EAAAlP,EAAAwP,QAEAxD,YAAAge,KACAtc,EAAA1B,EAAA0B,SACAwB,EAAAlD,EAAAkD,OACAuY,EAAAzb,EAAAqC,IACArC,IAAA3L,KAEA,IAA6CypB,GAAAC,EAAAte,EAAA8e,EAA7CC,KAAAC,KAAAC,KACAlZ,EAAAlV,IACA,QAAAiQ,KAAAP,GAAA,GAAAA,EAAA9C,GAAAqD,GAAA,CACAiF,EAAAmZ,OACAJ,EAAA/Y,EAAAmZ,MAAApe,EAAA3C,EAAAoC,EAAAO,KACAud,EAAAS,EAAAT,KACAC,EAAAQ,EAAAR,GACAte,EAAA8e,EAAA9e,IAEAqe,GAAAtY,EAAAnR,KAAAkM,GACAwd,GAAA/d,EAAAO,GAEA,IAAA8C,GAAA8B,EAAA2Y,EAAA,SAAAA,EAAAzmB,OAAA,CACAqnB,GAAAne,GAAAlC,EAAAmgB,EAAAnnB,OAAAmnB,EAAAnnB,OAAAgM,EAAA5D,GACA+e,IAAAloB,OAAAwnB,GACAW,IAAAnoB,OAAAynB,GAEA,GAAA9b,GAAAjO,EAAA0P,OACAH,EAAAvP,EAAAwqB,EAAAC,EAAAxc,IAAAwZ,EAAAznB,EAAA0P,KAAA,SAAAvB,GACA,GAAA9N,KACA,QAAAkM,KAAAme,KAAAxhB,GAAAqD,KACAlM,EAAAkM,GAAAme,EAAAne,GAAA4B,GAEAqD,GAAAnR,SACa6O,EAcb,OAbAsC,GAAAmF,MAAApH,EAAAjM,IAAAiM,EACAA,EAAA4a,OAAAne,EACAuD,EAAA6a,UAAA1c,EACAzD,EAAA,oBAAAuH,EAAAlO,GAAAiM,GACAtF,EAAA4C,KAAA,eAAA0C,EAAAjM,GAAA,WACA2G,EAAAoC,IAAA,UAAAkD,EAAAjM,UACAkO,GAAAmF,MAAApH,EAAAjM,IACAoK,KAAA5Q,KAAA0U,KAEAvH,EAAA4C,KAAA,aAAA0C,EAAAjM,GAAA,WACA2G,EAAAoC,IAAA,UAAAkD,EAAAjM,UACAkO,GAAAmF,MAAApH,EAAAjM,MAEAkO,KAiBAT,EAAAnQ,OAAA,SAAAmQ,EAAAK,EAAAE,EAAAvI,EAAAoO,GAKA,QAAA7C,GAAA7T,EAAA6I,EAAAtM,EAAAC,EAAAsO,EAAAE,GACA,SAAAnC,GAAA,sBAAA+I,EAAAvV,KAAA2D,GAOA,MANAnE,MAAAmE,MACAnE,KAAAgN,EAAA7I,EAAA6I,EACAhN,KAAAU,EAAAyD,EAAAzD,EACAV,KAAAW,EAAAwD,EAAAxD,EACAX,KAAAiP,EAAA9K,EAAA8K,OACAjP,KAAAmP,EAAAhL,EAAAgL,EAGA,OAAAhL,GACAnE,KAAAmE,KACAnE,KAAAgN,KACAhN,KAAAU,KACAV,KAAAW,KACAX,KAAAiP,KACAjP,KAAAmP,OAEAnP,KAAAmE,EAAA,EACAnE,KAAAgN,EAAA,EACAhN,KAAAU,EAAA,EACAV,KAAAW,EAAA,EACAX,KAAAiP,EAAA,EACAjP,KAAAmP,EAAA,GA3BA,GAAA4G,GAAAhV,OAAAS,UAAAoF,SACA0G,EAAAC,OACA2J,EAAA3D,MA4BA,SAAA+a,GA4MA,QAAAC,GAAApqB,GACA,MAAAA,GAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAEA,QAAAqqB,GAAArqB,GACA,GAAAsqB,GAAAvX,EAAAtD,KAAA2a,EAAApqB,GACAA,GAAA,KAAAA,EAAA,IAAAsqB,GACAtqB,EAAA,KAAAA,EAAA,IAAAsqB,GAnMAH,EAAA9qB,IAAA,SAAAW,EAAA6I,EAAAtM,EAAAC,EAAAsO,EAAAE,GACA,GAAAhL,eAAA6T,GACA,MAAAhY,MAAAwD,IAAAW,MAAA6I,EAAA7I,EAAAzD,EAAAyD,EAAAxD,EAAAwD,EAAA8K,EAAA9K,EAAAgL,EAEA,IAAAuf,GAAAvqB,EAAAnE,KAAAmE,EAAA6I,EAAAhN,KAAAU,EACAiuB,EAAAxqB,EAAAnE,KAAAgN,IAAAhN,KAAAW,CAQA,OAPAX,MAAAiP,KAAAjP,KAAAmE,EAAAgL,EAAAnP,KAAAU,EACAV,KAAAmP,GAAAF,EAAAjP,KAAAgN,EAAAmC,EAAAnP,KAAAW,EACAX,KAAAU,IAAAV,KAAAmE,EAAAxD,EAAAX,KAAAU,EACAV,KAAAW,EAAAD,EAAAV,KAAAgN,EAAArM,EAAAX,KAAAW,EAEAX,KAAAmE,EAAAuqB,EACA1uB,KAAAgN,EAAA2hB,EACA3uB,MAgBAgY,EAAAxW,UAAAotB,SAAA,SAAAzqB,EAAA6I,EAAAtM,EAAAC,EAAAsO,EAAAE,GACA,GAAAhL,eAAA6T,GACA,MAAAhY,MAAA4uB,SAAAzqB,MAAA6I,EAAA7I,EAAAzD,EAAAyD,EAAAxD,EAAAwD,EAAA8K,EAAA9K,EAAAgL,EAEA,IAAAuf,GAAAvqB,EAAAnE,KAAAmE,EAAAzD,EAAAV,KAAAgN,EACA6hB,EAAA1qB,EAAAnE,KAAAU,IAAAV,KAAAW,EACAmuB,EAAA3qB,EAAAnE,KAAAiP,EAAAvO,EAAAV,KAAAmP,EAAAF,CAQA,OAPAjP,MAAAgN,IAAAhN,KAAAmE,EAAAxD,EAAAX,KAAAgN,EACAhN,KAAAW,EAAAqM,EAAAhN,KAAAU,EAAAC,EAAAX,KAAAW,EACAX,KAAAmP,EAAAnC,EAAAhN,KAAAiP,EAAAtO,EAAAX,KAAAmP,IAEAnP,KAAAmE,EAAAuqB,EACA1uB,KAAAU,EAAAmuB,EACA7uB,KAAAiP,EAAA6f,EACA9uB,MASAsuB,EAAAhW,OAAA,WACA,GAAAyW,GAAA/uB,KACA6T,EAAAkb,EAAA5qB,EAAA4qB,EAAApuB,EAAAouB,EAAA/hB,EAAA+hB,EAAAruB,CACA,WAAAsX,GAAA+W,EAAApuB,EAAAkT,GAAAkb,EAAA/hB,EAAA6G,GAAAkb,EAAAruB,EAAAmT,EAAAkb,EAAA5qB,EAAA0P,GAAAkb,EAAAruB,EAAAquB,EAAA5f,EAAA4f,EAAApuB,EAAAouB,EAAA9f,GAAA4E,GAAAkb,EAAA/hB,EAAA+hB,EAAA9f,EAAA8f,EAAA5qB,EAAA4qB,EAAA5f,GAAA0E,IASAya,EAAAtY,MAAA,WACA,UAAAgC,GAAAhY,KAAAmE,EAAAnE,KAAAgN,EAAAhN,KAAAU,EAAAV,KAAAW,EAAAX,KAAAiP,EAAAjP,KAAAmP,IAUAmf,EAAA/V,UAAA,SAAA1E,EAAAG,GAGA,MAFAhU,MAAAiP,GAAA4E,EAAA7T,KAAAmE,EAAA6P,EAAAhU,KAAAU,EACAV,KAAAmP,GAAA0E,EAAA7T,KAAAgN,EAAAgH,EAAAhU,KAAAW,EACAX,MAaAsuB,EAAA3V,MAAA,SAAA9E,EAAAG,EAAA6Y,EAAAC,GAQA,MAPA,OAAA9Y,MAAAH,IACAgZ,GAAAC,IAAA9sB,KAAAuY,UAAAsU,EAAAC,GACA9sB,KAAAmE,GAAA0P,EACA7T,KAAAgN,GAAA6G,EACA7T,KAAAU,GAAAsT,EACAhU,KAAAW,GAAAqT,GACA6Y,GAAAC,IAAA9sB,KAAAuY,WAAAsU,GAAAC,GACA9sB,MAWAsuB,EAAA9V,OAAA,SAAArU,EAAA0P,EAAAG,GACA7P,EAAAsQ,EAAA2C,IAAAjT,GACA0P,KAAA,EACAG,KAAA,CACA,IAAAgJ,IAAA9F,EAAA8F,IAAA7Y,GAAAkc,QAAA,GACA/L,GAAA4C,EAAA5C,IAAAnQ,GAAAkc,QAAA,EAEA,OADArgB,MAAAwD,IAAAwZ,EAAA1I,KAAA0I,EAAAnJ,EAAAG,GACAhU,KAAAwD,IAAA,SAAAqQ,GAAAG,IASAsa,EAAAU,MAAA,SAAAnb,GACA,MAAA7T,MAAAivB,KAAApb,EAAA,IASAya,EAAAY,MAAA,SAAAlb,GACA,MAAAhU,MAAAivB,KAAA,EAAAjb,IAUAsa,EAAAW,KAAA,SAAApb,EAAAG,GACAH,KAAA,EACAG,KAAA,EACAH,EAAAY,EAAA2C,IAAAvD,GACAG,EAAAS,EAAA2C,IAAApD,EACA,IAAAtT,GAAAwW,EAAAQ,IAAA7D,GAAAwM,QAAA,GACArT,EAAAkK,EAAAQ,IAAA1D,GAAAqM,QAAA,EACA,OAAArgB,MAAAwD,IAAA,EAAAwJ,EAAAtM,EAAA,QAWA4tB,EAAAza,EAAA,SAAAA,EAAAG,GACA,MAAAH,GAAA7T,KAAAmE,EAAA6P,EAAAhU,KAAAU,EAAAV,KAAAiP,GAWAqf,EAAAta,EAAA,SAAAH,EAAAG,GACA,MAAAH,GAAA7T,KAAAgN,EAAAgH,EAAAhU,KAAAW,EAAAX,KAAAmP,GAEAmf,EAAAntB,IAAA,SAAAb,GACA,OAAAN,KAAAsN,EAAA6hB,aAAA,GAAA7uB,IAAA+f,QAAA,IAEAiO,EAAA1nB,SAAA,WACA,iBAAA5G,KAAAmB,IAAA,GAAAnB,KAAAmB,IAAA,GAAAnB,KAAAmB,IAAA,GAAAnB,KAAAmB,IAAA,GAAAnB,KAAAmB,IAAA,GAAAnB,KAAAmB,IAAA,IAAAkF,OAAA,KAEAioB,EAAAc,OAAA,WACA,OAAApvB,KAAAiP,EAAAoR,QAAA,GAAArgB,KAAAmP,EAAAkR,QAAA,KAiBAiO,EAAAe,YAAA,WACA,MAAArvB,MAAAmE,EAAAnE,KAAAW,EAAAX,KAAAgN,EAAAhN,KAAAU,GAgBA4tB,EAAAtf,MAAA,WACA,GAAAX,KAEAA,GAAAmP,GAAAxd,KAAAiP,EACAZ,EAAAoP,GAAAzd,KAAAmP,CAGA,IAAAmgB,KAAAtvB,KAAAmE,EAAAnE,KAAAgN,IAAAhN,KAAAU,EAAAV,KAAAW,GACA0N,GAAAkhB,OAAArY,EAAAtD,KAAA2a,EAAAe,EAAA,KACAd,EAAAc,EAAA,IAEAjhB,EAAAmhB,MAAAF,EAAA,MAAAA,EAAA,MAAAA,EAAA,MAAAA,EAAA,MACAA,EAAA,IAAAA,EAAA,MAAAA,EAAA,MAAAjhB,EAAAmhB,MAAAF,EAAA,MAAAA,EAAA,MAAAjhB,EAAAmhB,OAEAnhB,EAAAohB,OAAAvY,EAAAtD,KAAA2a,EAAAe,EAAA,KACAd,EAAAc,EAAA,IACAjhB,EAAAmhB,OAAAnhB,EAAAohB,OAEAzvB,KAAAqvB,cAAA,IACAhhB,EAAAkhB,QAAAlhB,EAAAkhB,OAIA,IAAAjb,GAAAgb,EAAA,MACAtS,EAAAsS,EAAA,KAaA,OAZAtS,GAAA,GACA3O,EAAAmK,OAAA/D,EAAA4C,IAAAH,EAAAiG,KAAAH,IACA1I,EAAA,IACAjG,EAAAmK,OAAA,IAAAnK,EAAAmK,SAGAnK,EAAAmK,OAAA/D,EAAA4C,IAAAH,EAAA+F,KAAA3I,IAGAjG,EAAAqhB,YAAArhB,EAAAmhB,MAAAnP,QAAA,IAAAhS,EAAAkhB,OAAAlP,QAAA,IAAAhS,EAAAohB,OAAApP,QAAA,IAAAhS,EAAAmK,QACAnK,EAAAshB,gBAAAthB,EAAAmhB,MAAAnP,QAAA,IAAAhS,EAAAkhB,OAAAlP,QAAA,IAAAhS,EAAAohB,OAAApP,QAAA,KAAAhS,EAAAmK,OACAnK,EAAAuhB,aAAAvhB,EAAAmhB,MAAAnP,QAAA,KAAAhS,EAAAmK,OACAnK,GASAigB,EAAAjD,kBAAA,SAAAwE,GACA,GAAAluB,GAAAkuB,GAAA7vB,KAAAgP,OACA,QAAArN,EAAA6tB,MAAAnP,QAAA,GAQA,KAAArgB,KAAAmB,IAAA,GAAAnB,KAAAmB,IAAA,GAAAnB,KAAAmB,IAAA,GAAAnB,KAAAmB,IAAA,GAAAnB,KAAAmB,IAAA,GAAAnB,KAAAmB,IAAA,KAPAQ,EAAA4tB,QAAA5tB,EAAA4tB,OAAAlP,QAAA,GACA1e,EAAA8tB,QAAA9tB,EAAA8tB,OAAApP,QAAA,GACA1e,EAAA6W,QAAA7W,EAAA6W,OAAA6H,QAAA,IACA1e,EAAA6b,IAAA7b,EAAA8b,GAAA,MAAA9b,EAAA6b,GAAA6C,QAAA,IAAA1e,EAAA8b,GAAA4C,QAAA,IA3TA,KA4TA1e,EAAA6W,OAAA,MAAA7W,EAAA6W,OAAA6H,QAAA,QA5TA,KA6TA,GAAA1e,EAAA4tB,QAAA,GAAA5tB,EAAA8tB,OAAA,KAAA9tB,EAAA4tB,OAAA5tB,EAAA8tB,OAAA,KA7TA,OAkUKzX,EAAAxW,WAQLiT,EAAAuD,SAkBAvD,EAAA+U,OAAA,SAAArlB,EAAA6I,EAAAtM,EAAAC,EAAAsO,EAAAE,GACA,UAAA6I,GAAA7T,EAAA6I,EAAAtM,EAAAC,EAAAsO,EAAAE,MAiBAsF,EAAAnQ,OAAA,SAAAmQ,EAAAK,EAAAE,EAAAvI,EAAAoO,GA+EA,QAAAiV,GAAAlvB,GACA,gBAAAwD,GAUA,GATAuJ,EAAAhB,OACAvI,YAAAyW,IAAA,GAAAzW,EAAAyU,KAAAxP,WAAAtC,SACA,kBAAA3C,EAAAyU,KAAArP,WAAA2Q,SACA,kBAAA/V,EAAAyU,KAAArP,WAAA2Q,SACA,WAAA/V,EAAAyU,KAAArP,WAAA2Q,WACA/V,IAAAyU,KAAArP,WACAoP,EAAA5Y,MAAA8H,YAAA1D,GACAA,EAAAwQ,EAAAxQ,IAEAA,YAAA0Q,GACA,qBAAA1Q,EAAAwD,MAAA,kBAAAxD,EAAAwD,MACA,WAAAxD,EAAAwD,KAAA,CACAxD,EAAAyU,KAAA7R,IACAiO,EAAA7Q,EAAAyU,MACA7R,GAAA5C,EAAA4C,IAGA,IAAA4S,GAAAmW,EAAA3rB,EAAAyU,KAAA7R,QAEA4S,GAAAxV,EAAAL,KAAAnD,OAIA,IADAgZ,EAAAnF,EAAA6L,MAAAlc,GACAwV,EAAA4F,MAAA,CACA,GAAAwQ,GAAAvb,EAAAmE,EAAA5Y,MAAA8Y,iBAAAmX,SAAA7rB,EACA4rB,IACAA,EAAAnX,KAAA7R,IACAiO,EAAA+a,EAAAnX,MACA7R,GAAAgpB,EAAAhpB,KAGA4S,EAAAmW,EAAAC,EAAAnX,KAAA7R,KAEA4S,EAAAxV,MAGAwV,GAAAtM,EAAAsM,EAGA,IAAAlK,KACAA,GAAA9O,GAAAgZ,EACA3E,EAAAjV,KAAA6Y,KAAAnJ,GACA1P,KAAA6Y,KAAA0H,MAAA3f,GAAAyY,GAwLA,QAAA6W,GAAA9rB,GACAuJ,EAAAhB,OACAvI,QACAA,GAAA,MAEApE,KAAA6Y,KAAA0H,MAAA4P,SAAA/rB,EAgEA,QAAAgsB,GAAAvX,GAGA,OAFAxK,MACA0L,EAAAlB,EAAAxP,WACA/I,EAAA,EAAA6M,EAAA4M,EAAAhT,OAA6CzG,EAAA6M,EAAQ7M,IAAA,CACrD,GAAA+vB,GAAAtW,EAAAzZ,EACA,IAAA+vB,EAAA1b,UACAtG,EAAA7I,KAAA6qB,EAAA3a,WAEA,SAAA2a,EAAAlW,UACA,GAAAkW,EAAAhnB,WAAAtC,QAAA,GAAAspB,EAAA7mB,WAAAmL,SACAtG,EAAA7I,KAAA6qB,EAAA7mB,WAAAkM,WAEArH,EAAA7I,KAAA4qB,EAAAC,KAIA,MAAAhiB,GAuDA,QAAAiiB,KAEA,MADA3iB,GAAAhB,OACA3M,KAAA6Y,KAAA0H,MAAA4P,SAhcA,GACAlX,GAAAxE,EAAA6F,EAAArB,KACArE,EAAAH,EAAA6F,EAAA1F,KACAC,EAAAJ,EAAAI,GACA+D,EAAAnE,EAAA6F,EAAA1B,YACA2X,EAAA,4BACAtb,EAAAR,EAAA6F,EAAArF,EACA8a,EAAAtb,EAAA8H,IACAjP,EAAAC,OACAV,EAAA4H,EAAA6F,EAAAzN,UACAwM,EAAA,EASA5E,GAAA+b,MAAA,SAAApsB,GACA,GAAAqO,GAAAlF,OAAAnJ,GAAA4b,MAAAuQ,EACA,OAAA9d,KAAA,GAAArO,GAGAuJ,EAAA4B,GAAA,+BAAAnL,GACA,GAAAA,YAAA0Q,IAAA1Q,YAAAyW,GAAA,CAOA,GANAlN,EAAAhB,OACAvI,YAAAyW,IAAA,GAAAzW,EAAAyU,KAAAxP,WAAAtC,SACA3C,IAAAyU,KAAArP,WACAoP,EAAA5Y,MAAA8H,YAAA1D,GACAA,EAAAwQ,EAAAxQ,IAEA,QAAAA,EAAAwD,KACA,GAAA6S,GAAArW,MAEAqW,GAAAxB,EAAA,OAAAL,EAAA5Y,OACAya,EAAA5B,KAAA/Q,YAAA1D,EAAAyU,OAEA4B,EAAA5B,KAAA7R,IAAAiO,EAAAwF,EAAA5B,MACA7R,GAAAyT,EAAAzT,KAEAiO,EAAAjV,KAAA6Y,MACA4B,KAAAsV,EAAAtV,EAAAzT,SAIA,SAAAypB,GACA9iB,EAAA4B,GAAA,sBAAAkhB,GACA9iB,EAAA4B,GAAA,2BAAAkhB,GACA9iB,EAAA4B,GAAA,0BAAAkhB,IACK,SAAArsB,GACL,GAAAA,YAAA0Q,IAAA1Q,YAAAyW,GAAA,CACAlN,EAAAhB,MAGA,KAFA,GAAAiX,GACA/K,EAAAzU,EAAAyU,KACAA,GAAA,CACA,gBAAAA,EAAAuB,SAAA,CACAwJ,EAAA,GAAA9O,GAAA+D,EACA,OAEA,WAAAA,EAAAuB,SAAA,CACAwJ,MAAAlT,EACA,OAEAmI,IAAA1Q,WAEAyb,IACAA,EAAA3K,EAAA,WAAAL,EAAA5Y,OACA4jB,EAAA/K,KAAA/Q,YAAA1D,EAAAyU,OACA+K,EAAA/K,KAAA7R,IAAAiO,EAAA2O,EAAA/K,MACA7R,GAAA4c,EAAA5c,MAGAiO,EAAAjV,KAAA6Y,MACAgL,YAAAkM,EAAAnM,EAAA/K,KAAA7R,IAAA4c,EAAA5c,SAmDA2G,EAAA4B,GAAA,sBAAAugB,EAAA,SACAniB,EAAA4B,GAAA,wBAAAugB,EAAA,UACA,IAAAY,GAAA,+BACA/iB,GAAA4B,GAAA,gCAAAuR,GA6BA,QAAA6P,GAAArwB,EAAAqS,GAEA,OADAie,IAAAje,EAAAD,IAAApS,EAAAgH,GACAsH,EAAAtH,EAA2BsH,EAAAtO,EAAOsO,IAClCiiB,EAAAjiB,GAAAwgB,UAAA1c,EAAAke,GAAAhiB,EAAAtH,IAAA+Y,QAAA,EAEA/Y,GAAAhH,EACAoS,EAAAC,EAlCAmO,EAAAxT,EAAAwT,EACA,IAAAgQ,GAAAhQ,EAAAd,MAAA0Q,EACA,KAAAI,EACA,WAEA,IAAAlpB,GAAAkpB,EAAA,GACArZ,EAAAqZ,EAAA,GACAD,EAAAC,EAAA,EACArZ,KAAAzI,MAAA,WAAA9I,IAAA,SAAAgP,GACA,OAAAA,YAEA,GAAAuC,EAAA1Q,QAAA,GAAA0Q,EAAA,KACAA,MAEAoZ,IAAA7hB,MAAA,KACA6hB,IAAA3qB,IAAA,SAAAgP,GACAA,IAAAlG,MAAA,IACA,IAAAX,IACAiS,MAAApL,EAAA,GAKA,OAHAA,GAAA,KACA7G,EAAA+gB,OAAA7T,WAAArG,EAAA,KAEA7G,GAEA,IAAA0E,GAAA8d,EAAA9pB,OACA2L,EAAA,EACApL,EAAA,CASAyL,IACA,QAAAzS,GAAA,EAAuBA,EAAAyS,EAASzS,IAAA,UAAAuwB,GAAAvwB,IAChCqwB,EAAArwB,EAAAuwB,EAAAvwB,GAAA8uB,OAIA,OAFAyB,GAAA9d,GAAAqc,OAAAyB,EAAA9d,GAAAqc,QAAA,IACAuB,EAAA5d,EAAA8d,EAAA9d,GAAAqc,SAEAxnB,OACA6P,SACAoZ,WAIAljB,EAAA4B,GAAA,4BAAAnL,GACAuJ,EAAAhB,OACAkI,EAAAzQ,EAAA,UAAAyQ,EAAAzQ,EAAA,cACAA,EAAAqQ,EAAArS,KAAAwE,SAAApG,KAAA4D,IAEAA,EAAAkJ,EAAAlJ,GACAA,EAAA4b,MAAA,YACA5b,EAAAqQ,EAAArS,KAAA2uB,WAAA3sB,IAEA6Q,EAAAjV,KAAA6Y,MAAsBlY,EAAAyD,OACjB,GACLuJ,EAAA4B,GAAA,gCAAAnL,GACAuJ,EAAAhB,OACAvI,EAAAkJ,EAAAlJ,EAEA,KADA,GAAA4sB,GAAAvkB,EAAAsI,IAAA3L,eAAAhF,GACApE,KAAA6Y,KAAArP,YACAxJ,KAAA6Y,KAAAzQ,YAAApI,KAAA6Y,KAAArP,WAEAxJ,MAAA6Y,KAAA/Q,YAAAkpB,MACK,GACLrjB,EAAA4B,GAAA,+BAAAnL,GACAuJ,EAAAhB,OACA3M,KAAA+D,MAAmBpD,EAAAyD,OACd,GACLuJ,EAAA4B,GAAA,gCAAAnL,GACAuJ,EAAAhB,OACA3M,KAAA6Y,KAAAoY,UAAAC,QAAA9sB,KACK,GACLuJ,EAAA4B,GAAA,kCAAAnL,GACA,GAAA+sB,EAEAA,GADAtc,EAAAzQ,EAAA,gBAAAA,IACAA,EAAAyP,EAAAzP,EAAA4P,EAAA5P,EAAAqU,MAAArU,EAAAsU,QAAArS,KAAA,KACSwO,EAAAzQ,EAAA,SACTA,EAAAiC,KAAA,KAEAjC,EAEA6Q,EAAAjV,KAAA6Y,MACA6T,QAAAyE,IAEAxjB,EAAAhB,UACK,GACLgB,EAAA4B,GAAA,oCAAAnL,GACApE,KAAAua,UAAAnW,GACAuJ,EAAAhB,UACK,GACLgB,EAAA4B,GAAA,4BAAAnL,GACA,QAAApE,KAAA4H,OACA+F,EAAAhB,OACAsI,EAAAjV,KAAA6Y,MACAuY,GAAAhtB,EACAitB,GAAAjtB,QAGK,GACLuJ,EAAA4B,GAAA,mCAAAnL,GAEA,GADAuJ,EAAAhB,OACA,QAAA3M,KAAA4H,KAAA,CACA,GAAAZ,GAAAsqB,EAAAzY,CACA,KAAAzU,GAAApE,KAAAuxB,SAAA,CAEA,IADAD,EAAAtxB,KAAAuxB,SACAD,EAAAzY,KAAArP,YACAxJ,KAAA6Y,KAAA/Q,YAAAwpB,EAAAzY,KAAArP,WAIA,OAFA8nB,GAAAztB,oBACA7D,MAAAuxB,SAGA,GAAA1c,EAAAzQ,EAAA,WACA,GAAA4U,GAAAJ,EAAA5Y,MACAoC,EAAAwS,EAAAoE,EAAA7Q,YAAA/F,KAAAgC,EACA4U,GAAAlR,YAAA1F,EAAAyW,MACA7R,EAAA5E,EAAA4E,GACA5E,EAAA2B,MAA2BiD,YAE3B5C,EAAAwQ,EAAAxQ,aACA0Q,MACA9N,EAAA5C,EAAAL,KAAA,SAEAiD,EAAA5C,EAAA4C,GACA5C,EAAAL,MAAoCiD,QAIpC,IAAAA,EAGA,GAFAsqB,EAAAtxB,KAAAuxB,SACA1Y,EAAA7Y,KAAA6Y,KACAyY,EACAA,EAAAvtB,MAA6BsoB,aAAA,IAAArlB,QACZ,CAIjB,IAHAsqB,EAAArc,EAAA,YACAoX,aAAA,IAAArlB,IAEA6R,EAAArP,YACA8nB,EAAAxpB,YAAA+Q,EAAArP,WAEAqP,GAAA/Q,YAAAwpB,GACAtxB,KAAAuxB,SAAA3c,EAAA0c,QAIK,GACL3jB,EAAA4B,GAAA,+BAAAnL,GACA,WAAApE,KAAA4H,KAAA,CAeA,IAdA,GACAiR,GAAA7Y,KAAA6Y,KACA2Y,EAAA,SAAAC,GACA,GAAApjB,GAAA4G,EAAA,QACA,IAAAJ,EAAA4c,EAAA,SACA,OAAAnxB,GAAA,EAAuCA,EAAAmxB,EAAA1qB,OAAkBzG,IACzD+N,EAAAvG,YAAA0pB,EAAAC,EAAAnxB,SAGA+N,GAAAvG,YAAA2E,EAAAsI,IAAA3L,eAAAqoB,GAGA,OADApjB,GAAAmgB,WAAAngB,EAAAmgB,YACAngB,GAEAwK,EAAArP,YACAqP,EAAAzQ,YAAAyQ,EAAArP,WAGA,KADA,GAAAkoB,GAAAF,EAAAptB,GACAstB,EAAAloB,YACAqP,EAAA/Q,YAAA4pB,EAAAloB,YAGAmE,EAAAhB,UACK,GAQLgB,EAAA4B,GAAA,0BAAA2gB,IAAA,GACAviB,EAAA4B,GAAA,2BAAA2gB,IAAA,GAGAviB,EAAA4B,GAAA,yCAEA,MADA5B,GAAAhB,OACA3M,KAAAua,eACK,GACL5M,EAAA4B,GAAA,wCAEA,MADA5B,GAAAhB,OACA3M,KAAAuxB,YACK,GAEL,WACA,QAAA1wB,GAAA8R,GACA,kBACAhF,EAAAhB,MACA,IAAA4T,GAAA9T,EAAAsI,IAAAyL,YAAAC,iBAAAzgB,KAAA6Y,KAAA,MAAA6H,iBAAA,UAAA/N,EACA,eAAA4N,EACAA,EAEA9L,EAAAhI,EAAAsI,IAAA/R,eAAAud,EAAAP,MAAAuQ,GAAA,MAIA,QAAAvC,GAAArb,GACA,gBAAAvO,GACAuJ,EAAAhB,MACA,IAAA/L,GAAA,SAAA+R,EAAAgF,OAAA,GAAAuP,cAAAvU,EAAA0C,UAAA,EACA,QAAAjR,MAEA,YADApE,KAAA6Y,KAAA0H,MAAA3f,GAAA,OAGA,cAAAwD,EAAAwD,KAAA,CACA,GAAAZ,GAAA5C,EAAAyU,KAAA7R,EAKA,OAJAA,IACAiO,EAAA7Q,EAAAyU,MAAuC7R,GAAA5C,EAAA4C,UAEvChH,KAAA6Y,KAAA0H,MAAA3f,GAAAmvB,EAAA/oB,MAKA2G,EAAA4B,GAAA,+BAAA1O,EAAA,YACA8M,EAAA4B,GAAA,8BAAA1O,EAAA,YACA8M,EAAA4B,GAAA,iCAAA1O,EAAA,cACA8M,EAAA4B,GAAA,gCAAA1O,EAAA,cACA8M,EAAA4B,GAAA,+BAAA1O,EAAA,YACA8M,EAAA4B,GAAA,8BAAA1O,EAAA,YACA8M,EAAA4B,GAAA,4BAAAye,EAAA,YACArgB,EAAA4B,GAAA,2BAAAye,EAAA,YACArgB,EAAA4B,GAAA,8BAAAye,EAAA,cACArgB,EAAA4B,GAAA,6BAAAye,EAAA,cACArgB,EAAA4B,GAAA,4BAAAye,EAAA,YACArgB,EAAA4B,GAAA,2BAAAye,EAAA,eAEArgB,EAAA4B,GAAA,iCACA,WAAAvP,KAAA4H,MAAAqN,EAAAjV,KAAA6Y,KAAA,OAAA5D,EAAAjV,KAAA6Y,KAAA,MAEA,MADAlL,GAAAhB,OACAsI,EAAAjV,KAAA6Y,KAAA,SAEK,GAmBLlL,EAAA4B,GAAA,oCACA,WAAAvP,KAAA4H,MAAA,SAAA5H,KAAA4H,KAAA,CACA+F,EAAAhB,MACA,IAAA0B,GAAA+hB,EAAApwB,KAAA6Y,KACA,WAAAxK,EAAAtH,OAAAsH,EAAA,GAAAA,MAEK,GACLV,EAAA4B,GAAA,qCACA,MAAAvP,MAAA6Y,KAAA8Y,eACK,GACLhkB,EAAA4B,GAAA,kCAAAqiB,GACA,IAAAA,EAAA,CAGAjkB,EAAAhB,MACA,IAAAvI,GAAAuJ,EAAA,yBAAA3N,MAAA,GAAAkN,cACA,OAAAuH,KAAA+b,MAAApsB,WACK,GACLuJ,EAAA4B,GAAA,oCAAAqiB,GACA,IAAAA,EAAA,CAGAjkB,EAAAhB,MACA,IAAAvI,GAAAuJ,EAAA,2BAAA3N,MAAA,GAAAkN,cACA,OAAAuH,KAAA+b,MAAApsB,WACK,GACLuJ,EAAA4B,GAAA,uCACA5B,EAAAhB,MACA,IAAAwkB,GAAAlc,EAAAjV,KAAA6Y,KAAA,UACA,OAAAsY,IACAA,IAAAniB,MAAAnC,GACA4H,EAAA6F,EAAA0N,KAAAmJ,EAAA,IAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,SAEA,MAEK,GACLxjB,EAAA4B,GAAA,sCACA,GAAA7N,GAAAuT,EAAAjV,KAAA6Y,KAAA,SAEA,OADAlL,GAAAhB,OACAjL,EACAA,EAAAsN,MAAAnC,OAEA,MAEK,GACLc,EAAA4B,GAAA,oCACA,GAAA7N,GAAAuT,EAAAjV,KAAA6Y,KAAA,IAEA,OADAlL,GAAAhB,OACAjL,KACK,GACLiM,EAAA4B,GAAA,qCACA,MAAAvP,MAAA6Y,KAAAoY,UAAAC,WACK,GAKLvjB,EAAA4B,GAAA,6BAAA+gB,IAAA,GACA3iB,EAAA4B,GAAA,8BAAA+gB,IAAA,KAgBA7b,EAAAnQ,OAAA,SAAAmQ,EAAAK,EAAAE,EAAAvI,EAAAoO,GACA,GAAAgX,GAAA,OAGAvkB,EAAAC,OACA4c,EAAArV,EAAAtT,SAUA2oB,GAAA2H,SAAA,SAAA1tB,GACA,GAIAkD,GAEAyqB,EACAC,EAPAC,EAAA3kB,EAAAlJ,GAAA,IAAA4b,MAAA6R,OACA9J,EAAA/nB,KAAA6Y,KACAoY,EAAAlJ,EAAAkJ,UAAAC,QACAgB,EAAAjB,EAAAjR,MAAA6R,MAMA,IAAAI,EAAAlrB,OAAA,CAEA,IADAO,EAAA,EACAyqB,EAAAE,EAAA3qB,OACA4qB,EAAA7S,QAAA0S,IAEAG,EAAA1sB,KAAAusB,EAIAC,GAAAE,EAAA7rB,KAAA,KACA4qB,GAAAe,IACAjK,EAAAkJ,UAAAC,QAAAc,GAGA,MAAAhyB,OAWAmqB,EAAAgI,YAAA,SAAA/tB,GACA,GAIAkD,GACA8qB,EACAL,EACAC,EAPAC,EAAA3kB,EAAAlJ,GAAA,IAAA4b,MAAA6R,OACA9J,EAAA/nB,KAAA6Y,KACAoY,EAAAlJ,EAAAkJ,UAAAC,QACAgB,EAAAjB,EAAAjR,MAAA6R,MAKA,IAAAK,EAAAnrB,OAAA,CAEA,IADAO,EAAA,EACAyqB,EAAAE,EAAA3qB,QACA8qB,EAAAF,EAAA7S,QAAA0S,KAEAG,EAAAhiB,OAAAkiB,EAAA,EAIAJ,GAAAE,EAAA7rB,KAAA,KACA4qB,GAAAe,IACAjK,EAAAkJ,UAAAC,QAAAc,GAGA,MAAAhyB,OAWAmqB,EAAAkI,SAAA,SAAAjuB,GAIA,UAHApE,KAAA6Y,KACAoY,UAAAC,QACAlR,MAAA6R,QACAxS,QAAAjb,IAaA+lB,EAAAmI,YAAA,SAAAluB,EAAAmuB,GACA,SAAAA,EACA,MAAAA,GACAvyB,KAAA8xB,SAAA1tB,GAEApE,KAAAmyB,YAAA/tB,EAGA,IAIAkD,GACA8qB,EACAL,EACAC,EAPAC,GAAA7tB,GAAA,IAAA4b,MAAA6R,OACA9J,EAAA/nB,KAAA6Y,KACAoY,EAAAlJ,EAAAkJ,UAAAC,QACAgB,EAAAjB,EAAAjR,MAAA6R,MAMA,KADAvqB,EAAA,EACAyqB,EAAAE,EAAA3qB,MACA8qB,EAAAF,EAAA7S,QAAA0S,IACAK,EACAF,EAAAhiB,OAAAkiB,EAAA,GAEAF,EAAA1sB,KAAAusB,EAQA,OAJAC,GAAAE,EAAA7rB,KAAA,KACA4qB,GAAAe,IACAjK,EAAAkJ,UAAAC,QAAAc,GAEAhyB,QAiBAyU,EAAAnQ,OAAA,SAAAmQ,EAAAK,EAAAE,EAAAvI,EAAAoO,GAkBA,QAAA2X,GAAA3gB,GACA,MAAAA,GAEA,QAAA4gB,GAAAC,GACA,gBAAA7gB,GACA,OAAAA,EAAAwO,QAAA,GAAAqS,GAtBA,GAAAC,IACAC,IAAA,SAAA/e,EAAAG,GACA,MAAAH,GAAAG,GAEA6e,IAAA,SAAAhf,EAAAG,GACA,MAAAH,GAAAG,GAEA8e,IAAA,SAAAjf,EAAAG,GACA,MAAAH,GAAAG,GAEA+e,IAAA,SAAAlf,EAAAG,GACA,MAAAH,GAAAG,IAGA1G,EAAAC,OACAylB,EAAA,WACAC,EAAA,sDASAtlB,GAAA4B,GAAA,0BAAAsC,GACA,GAAAqhB,GAAA5lB,EAAAuE,GAAAmO,MAAAiT,EACA,IAAAC,EAAA,CACA,GAAAC,GAAAxlB,EAAAgC,KACA/O,EAAAuyB,EAAA9d,UAAA8d,EAAA5P,YAAA,QACApf,EAAAnE,KAAA+D,KAAAnD,GACAwyB,IACAzlB,GAAAhB,MACA,IAAA+lB,GAAAQ,EAAA,OACAG,EAAAlvB,EAAA6b,MAAAgT,GACAM,EAAAX,EAAAO,EAAA,GAOA,IANAG,MAAAX,EACA7gB,EAAAyhB,EAAA/X,WAAApX,IAAA+uB,EAAA,KAEA/uB,EAAAnE,KAAAmsB,KAAAvrB,GACAiR,EAAAyhB,EAAAtzB,KAAAmsB,KAAAvrB,GAAAZ,KAAAmsB,KAAAvrB,EAAAsyB,EAAA,GAAAR,KAEAa,MAAApvB,IAAAovB,MAAA1hB,GACA,MAEAuhB,GAAAxyB,GAAAiR,EACA7R,KAAA+D,KAAAqvB,OAEK,IACLzlB,EAAA4B,GAAA,2BAAA3O,EAAAoM,GACA,GAAA7I,GAAAmJ,EAAAtN,KAAA+D,KAAAnD,IAAA,IAEA4yB,EAAAlmB,EAAAN,GAAAgT,MAAAiT,EACA,IAAAO,EAAA,CACA7lB,EAAAhB,MACA,IAAA+lB,GAAAc,EAAA,OACAH,EAAAlvB,EAAA6b,MAAAgT,GACAM,EAAAX,EAAAa,EAAA,GACA,OAAAH,OAAAX,GAEAlF,KAAAjS,WAAApX,GACAspB,GAAA6F,EAAA/X,WAAApX,IAAAqvB,EAAA,IACArkB,EAAAsjB,EAAAY,KAGAlvB,EAAAnE,KAAAmsB,KAAAvrB,IAEA4sB,KAAArpB,EACAspB,GAAA6F,EAAAnvB,EAAAnE,KAAAmsB,KAAAvrB,EAAA4yB,EAAA,GAAAd,IACAvjB,EAAAqjB,QAIK,MAgBL/d,EAAAnQ,OAAA,SAAAmQ,EAAAK,EAAAE,EAAAvI,EAAAoO,GACA,GAAAG,GAAAhG,EAAAxT,UACAqT,EAAAJ,EAAAI,EAqBAmG,GAAAyY,KAAA,SAAA5f,EAAAG,EAAAU,EAAArI,EAAA+kB,EAAAC,GACA,GAAAttB,EAkBA,OAjBA,OAAAstB,IACAA,EAAAD,GAEAvc,EAAAhB,EAAA,8BAAAA,EACA9P,EAAA8P,EACS,MAAAA,IACT9P,GACA8P,IACAG,IACAyE,MAAA/D,EACAgE,OAAArM,GAEA,MAAA+kB,IACArtB,EAAAqtB,KACArtB,EAAAstB,OAGArxB,KAAAkV,GAAA,OAAAnR,IAgBAiX,EAAA0Y,OAAA,SAAA7G,EAAAC,EAAAxN,GACA,GAAAvb,EAUA,OATA8Q,GAAAgY,EAAA,8BAAAA,EACA9oB,EAAA8oB,EACS,MAAAA,IACT9oB,GACA8oB,KACAC,KACAxN,MAGAtf,KAAAkV,GAAA,SAAAnR,GAGA,IAAA4vB,GAAA,WACA,QAAAC,KACA5zB,KAAAmI,WAAAC,YAAApI,MAEA,gBAAA6zB,EAAA1kB,GACA,GAAA2kB,GAAArnB,EAAAsI,IAAApN,cAAA,OACArE,EAAAmJ,EAAAsI,IAAAzR,IACAwwB,GAAAvT,MAAAtX,QAAA,6CACA6qB,EAAAC,OAAA,WACA5kB,EAAA3O,KAAAszB,GACAA,EAAAC,OAAAD,EAAAF,QAAA,KACAtwB,EAAA8E,YAAA0rB,IAEAA,EAAAF,UACAtwB,EAAAwE,YAAAgsB,GACAA,EAAAD,SAsBA7Y,GAAAgZ,MAAA,SAAAH,EAAAhgB,EAAAG,EAAAyE,EAAAC,GACA,GAAAxD,GAAAlV,KAAAkV,GAAA,QACA,IAAAL,EAAAgf,EAAA,kBAAAA,GACA3e,EAAAnR,KAAA8vB,OACS,UAAAA,EAAA,CACT,GAAAhhB,IACAwZ,aAAAwH,EACAI,oBAAA,OAEA,OAAApgB,GAAA,MAAAG,IACAnB,EAAAgB,IACAhB,EAAAmB,KAEA,MAAAyE,GAAA,MAAAC,GACA7F,EAAA4F,QACA5F,EAAA6F,UAEAib,EAAAE,EAAA,WACApf,EAAA6F,EAAArF,EAAAC,EAAA2D,MACAJ,MAAAzY,KAAAk0B,YACAxb,OAAA1Y,KAAAm0B,iBAIA1f,EAAA6F,EAAArF,EAAAC,EAAA2D,KAAAhG,GAEA,MAAAqC,IAiBA8F,EAAAoZ,QAAA,SAAAvH,EAAAC,EAAAsE,EAAAC,GACA,GAAAttB,EAWA,OAVA8Q,GAAAgY,EAAA,8BAAAA,EACA9oB,EAAA8oB,EACS,MAAAA,IACT9oB,GACA8oB,KACAC,KACAsE,KACAC,OAGArxB,KAAAkV,GAAA,UAAAnR,IAiCAiX,EAAA5Y,KAAA,SAAAzB,GACA,GAAAoD,EAMA,OALA8Q,GAAAlU,EAAA,YAAAkU,EAAAlU,EAAA,SACAoD,EAAApD,EACSA,IACToD,GAAoBpD,MAEpBX,KAAAkV,GAAA,OAAAnR,IA2BAiX,EAAAqZ,MAAArZ,EAAAR,EAAA,SAAAuR,GACA,GACA7W,GAAAlV,KAAAkV,GAAA,IAMA,OALA,IAAAlH,UAAAjH,QAAAglB,MAAAnkB,KACAsN,EAAAnR,KAAAgoB,GACS/d,UAAAjH,QACTmO,EAAA1R,IAAAiK,MAAAjM,UAAAuM,MAAAvN,KAAAwN,UAAA,IAEAkH,GAmBA8F,EAAAtB,IAAA,SAAA7F,EAAAG,EAAAyE,EAAAC,EAAA4b,EAAAC,EAAAC,EAAAC,GACA,GAAA/kB,KAoBA,OAnBAmF,GAAAhB,EAAA,iBAAAG,EACAtE,EAAAmE,GAEA,MAAAA,IACAnE,EAAAmE,KAEA,MAAAG,IACAtE,EAAAsE,KAEA,MAAAyE,IACA/I,EAAA+I,SAEA,MAAAC,IACAhJ,EAAAgJ,UAEA,MAAA4b,GAAA,MAAAC,GAAA,MAAAC,GAAA,MAAAC,IACA/kB,EAAAgd,SAAA4H,EAAAC,EAAAC,EAAAC,KAGAz0B,KAAAkV,GAAA,MAAAxF,IAWAsL,EAAAP,KAAA,SAAAsR,GACA,GACA7W,GAAAlV,KAAAkV,GAAA,OAMA,OALA,IAAAlH,UAAAjH,QAAAglB,MAAAnkB,KACAsN,EAAAnR,KAAAgoB,GACS/d,UAAAjH,QACTmO,EAAA1R,IAAAiK,MAAAjM,UAAAuM,MAAAvN,KAAAwN,UAAA,IAEAkH,GAmBA8F,EAAA0Z,KAAA,SAAA7gB,EAAAG,EAAAyE,EAAAC,EAAAic,EAAAC,EAAAC,EAAAC,GACA,GAAAjgB,EAAAhB,EAAA,UACA,GAAA9P,GAAA8P,MAEA9P,IAAoB0oB,aAAA,kBACpB5Y,IACA9P,EAAA8P,KAEAG,IACAjQ,EAAAiQ,KAEA,MAAAyE,IACA1U,EAAA0U,SAEA,MAAAC,IACA3U,EAAA2U,UAGA3U,EAAA2oB,QADA,MAAAiI,GAAA,MAAAC,GAAA,MAAAC,GAAA,MAAAC,GACAH,EAAAC,EAAAC,EAAAC,IAEAjhB,GAAA,EAAAG,GAAA,EAAAyE,GAAA,EAAAC,GAAA,EAGA,OAAA1Y,MAAAkV,GAAA,UAAAnR,IAcAiX,EAAAoR,IAAA,SAAAplB,GACA,aAAAA,GACAA,YAAA8N,KACA9N,EAAAjD,KAAA,OACAiD,EAAAjD,MAA6BiD,GAAAyN,EAAA6F,EAAAtT,QAE7BA,IAAAjD,KAAA,OAEA,KAAAwJ,OAAAvG,GAAA2Q,WACA3Q,IAAAqO,UAAA,IAEArV,KAAAkV,GAAA,OAAmCmX,aAAA,IAAArlB,KAEnC8N,EAAAtT,UAAA4qB,IAAA5rB,KAAAR,OAeAgb,EAAAL,OAAA,SAAAga,EAAAC,EAAAC,EAAAC,GACA,GAAA/wB,KAKA,OAJA,OAAA4wB,GAAA,MAAAC,GAAA,MAAAC,GAAA,MAAAC,IACA/wB,EAAA2oB,SAAAiI,EAAAC,EAAAC,EAAAC,IAGA90B,KAAAkV,GAAA,SAAAnR,IAsBAiX,EAAA7F,KAAA,SAAAtB,EAAAG,EAAAmB,GACA,GAAApR,KAUA,OATA8Q,GAAAhB,EAAA,UACA9P,EAAA8P,EACS,MAAAA,IACT9P,GACA8P,IACAG,IACAmB,QAAA,KAGAnV,KAAAkV,GAAA,OAAAnR,IAiBAiX,EAAA+Z,KAAA,SAAAne,EAAAC,EAAAC,EAAAC,GACA,GAAAhT,KAWA,OAVA8Q,GAAA+B,EAAA,UACA7S,EAAA6S,EACS,MAAAA,IACT7S,GACA6S,KACAE,KACAD,KACAE,OAGA/W,KAAAkV,GAAA,OAAAnR,IAiBAiX,EAAAga,SAAA,SAAAC,GACAjnB,UAAAjH,OAAA,IACAkuB,EAAAxnB,MAAAjM,UAAAuM,MAAAvN,KAAAwN,UAAA,GAEA,IAAAjK,KAMA,OALA8Q,GAAAogB,EAAA,YAAApgB,EAAAogB,EAAA,SACAlxB,EAAAkxB,EACS,MAAAA,IACTlxB,GAAoBkxB,WAEpBj1B,KAAAkV,GAAA,WAAAnR,IAQAiX,EAAAka,QAAA,SAAAD,GACAjnB,UAAAjH,OAAA,IACAkuB,EAAAxnB,MAAAjM,UAAAuM,MAAAvN,KAAAwN,UAAA,GAEA,IAAAjK,KAMA,OALA8Q,GAAAogB,EAAA,YAAApgB,EAAAogB,EAAA,SACAlxB,EAAAkxB,EACS,MAAAA,IACTlxB,GAAoBkxB,WAEpBj1B,KAAAkV,GAAA,UAAAnR,IAGA,WAWA,QAAAoxB,KACA,MAAAn1B,MAAAwiB,UAAA,QAYA,QAAA4S,GAAA9U,EAAA8O,GACA,GAAAziB,GAAAsI,EAAA,QACAlR,GACAqrB,UAAA,IAEA9O,GAAA7L,EAAA6L,SACAvc,EAAA,cAAAuc,EAAAf,IACAe,EAAAR,QAAA,IACA/b,EAAA,gBAAAuc,EAAAR,SAEA7K,EAAAtI,EAAA5I,EAGA,QADAsxB,GADAxE,EAAA7wB,KAAA6wB,QAEAvwB,EAAA,EAA2BA,EAAAuwB,EAAA9pB,OAAkBzG,IAAA,CAE7C,GADAib,WAAAsV,EAAAvwB,GAAAyD,KAAA,WACAqrB,EAAA,CACApvB,KAAA6Y,KAAAvP,aAAAqD,EAAAkkB,EAAAvwB,GAAAuY,MACAwc,GAAA,CACA,QAMA,MAHAA,IACAr1B,KAAA6Y,KAAA/Q,YAAA6E,GAEA3M,KAEA,QAAAs1B,KACA,qBAAAt1B,KAAA4H,KAAA,CACA,GAAAgP,GAAA3B,EAAAjV,KAAA6Y,KAAA,SACA/B,EAAA7B,EAAAjV,KAAA6Y,KAAA,SACAhC,EAAA5B,EAAAjV,KAAA6Y,KAAA,SACA9B,EAAA9B,EAAAjV,KAAA6Y,KAAA,QACA,OAAApE,GAAA6F,EAAA0N,IAAApR,EAAAC,EAAAK,KAAAnD,IAAA+C,EAAAF,GAAAM,KAAAnD,IAAAgD,EAAAF,IAEA,GAAAgW,GAAA7sB,KAAA6Y,KAAAgU,IAAA,GACAC,EAAA9sB,KAAA6Y,KAAAiU,IAAA,GACAxN,EAAAtf,KAAA6Y,KAAAyG,GAAA,CACA,OAAA7K,GAAA6F,EAAA0N,IAAA6E,EAAAvN,EAAAwN,EAAAxN,EAAA,EAAAA,EAAA,EAAAA,GAcA,QAAAiW,GAAAxY,GACA,GAAAiT,GAAAjT,EACA8T,EAAA7wB,KAAA6wB,OAIA,IAHA,gBAAA9T,KACAiT,EAAAriB,EAAA,yCAAAoP,GAAA7P,eAAA2jB,OAEApc,EAAAI,GAAAmb,EAAA,UAGA,OAAA1vB,GAAA,EAA2BA,EAAAuwB,EAAA9pB,OAAkBzG,IAC7C,GAAA0vB,EAAA1vB,GAAA,CACA,GAAAggB,GAAA7L,EAAA6L,MAAA0P,EAAA1vB,GAAAggB,OACAvc,GAAgCqrB,OAAAY,EAAA1vB,GAAA8uB,OAAA,IAChCrrB,GAAA,cAAAuc,EAAAf,IACAe,EAAAR,QAAA,IACA/b,EAAA,gBAAAuc,EAAAR,SAEA+Q,EAAAvwB,GAAAyD,YAEA8sB,GAAAvwB,GAAAuD,QAGA,KAAAvD,EAAAuwB,EAAA9pB,OAAkCzG,EAAA0vB,EAAAjpB,OAAiBzG,IACnDN,KAAAw1B,QAAAxF,EAAA1vB,GAAAggB,MAAA0P,EAAA1vB,GAAA8uB,OAEA,OAAApvB,OAEA,QAAAiwB,GAAAjX,EAAA+D,GACA,GACA7H,GADA8a,EAAAriB,EAAA,4BAAAoP,GAAA7P,cAEA,KAAA8iB,EACA,WAEAA,GAAAvY,OAAArH,QAAA4I,GAEA9D,EADA,KAAA8a,EAAApoB,KAAAqC,cACAwrB,EAAAhnB,MAAA,EAAAuhB,EAAAvY,QAEAie,EAAAjnB,MAAA,EAAAuhB,EAAAvY,QAEAuY,EAAApoB,MAAAooB,EAAApoB,KAAAqC,eACAgL,EAAAC,EAAA2D,MACA8c,cAAA,kBAKA,QAFA9E,GAAAb,EAAAa,MACA9d,EAAA8d,EAAA9pB,OACAzG,EAAA,EAA2BA,EAAAyS,EAASzS,IAAA,CACpC,GAAAqM,GAAAkkB,EAAAvwB,EACA4U,GAAAsgB,QAAA7oB,EAAA2T,MAAA3T,EAAAyiB,QAEA,MAAAla,GAEA,QAAAugB,GAAAzc,EAAApC,EAAAC,EAAAC,EAAAC,GACA,GAAA7B,GAAAT,EAAA6F,EAAArB,KAAA,iBAAAD,EAaA,OAZA9D,GAAA2b,MAAAsE,EACAjgB,EAAAsgB,QAAAJ,EACAlgB,EAAAqE,QAAA+b,EACApgB,EAAA0gB,SAAAL,EACA,MAAA3e,GACA3B,EAAAC,EAAA2D,MACAjC,KACAC,KACAC,KACAC,OAGA7B,EAEA,QAAAwgB,GAAA1c,EAAA6T,EAAAC,EAAAxN,EAAAuW,EAAAC,GACA,GAAA5gB,GAAAT,EAAA6F,EAAArB,KAAA,iBAAAD,EAiBA,OAhBA9D,GAAA2b,MAAAsE,EACAjgB,EAAAsgB,QAAAJ,EACAlgB,EAAAqE,QAAA+b,EACA,MAAAzI,GACA5X,EAAAC,EAAA2D,MACAgU,KACAC,KACAxN,MAGA,MAAAuW,GAAA,MAAAC,GACA7gB,EAAAC,EAAA2D,MACAgd,KACAC,OAGA5gB,EAhKA,GAAAD,GAAAR,EAAA6F,EAAArF,CAuMA+F,GAAAiV,SAAA,SAAAlT,GACA,MAAAkT,GAAAjwB,KAAAgZ,KAAA+D,IAEA/B,EAAAya,eAAA,SAAA7e,EAAAC,EAAAC,EAAAC,GACA,MAAA0e,GAAAz1B,KAAAgZ,KAAApC,EAAAC,EAAAC,EAAAC,IAEAiE,EAAA0a,eAAA,SAAA7I,EAAAC,EAAAxN,EAAAuW,EAAAC,GACA,MAAAJ,GAAA11B,KAAAgZ,KAAA6T,EAAAC,EAAAxN,EAAAuW,EAAAC,IASA9a,EAAApU,SAAA,WACA,GAIA6L,GAJAsC,EAAA/U,KAAA6Y,KAAAoC,cACA9L,EAAA4F,EAAAiO,yBACAriB,EAAAoU,EAAApN,cAAA,OACA+R,EAAA1Z,KAAA6Y,KAAAyT,WAAA,EAOA,OALAnd,GAAArH,YAAAnH,GACAA,EAAAmH,YAAA4R,GACAjF,EAAA6F,EAAArF,EAAAyE,GAA2BlE,MAAA,+BAC3B/C,EAAA9R,EAAAwiB,UACAhU,EAAA/G,YAAA+G,EAAA3F,YACAiJ,GASAuI,EAAAsS,UAAA,WACA,GAAA3c,KAAA9K,KACA,mCAA2CA,KAAAU,SAAAC,mBAAAxG,SAS3Cgb,EAAA+a,MAAA,WAGA,IAFA,GACAC,GADAnd,EAAA7Y,KAAA6Y,KAAArP,WAEAqP,GACAmd,EAAAnd,EAAAoT,YACA,QAAApT,EAAAsB,QACAtB,EAAA1Q,WAAAC,YAAAyQ,GAEAmC,EAAA+a,MAAAv1B,MAAsCqY,SAEtCA,EAAAmd,QAmBAvhB,EAAAnQ,OAAA,SAAAmQ,EAAAK,EAAAE,EAAAvI,GAaA,QAAAwpB,GAAAC,GACA,GAAAx0B,GAAAu0B,EAAAC,GAAAD,EAAAC,MAcA,OAbAx0B,GAAAw0B,GACAx0B,EAAAw0B,GAAAC,MAAA,IAEAz0B,EAAAw0B,IACAC,MAAA,KAGAryB,WAAA,WACA,OAAAmM,KAAAvO,KAAAkL,GAAAqD,OAAAimB,MACAx0B,EAAAuO,GAAAkmB,aACAz0B,GAAAuO,KAGAvO,EAAAw0B,GAEA,QAAAlO,GAAAnU,EAAAG,EAAAyE,EAAAC,GAUA,MATA,OAAA7E,IACAA,EAAAG,EAAAyE,EAAAC,EAAA,GAEA,MAAA1E,IACAA,EAAAH,EAAAG,EACAyE,EAAA5E,EAAA4E,MACAC,EAAA7E,EAAA6E,OACA7E,QAGAA,IACAG,IACAyE,QACA/D,EAAA+D,EACAC,SACArM,EAAAqM,EACA5B,GAAAjD,EAAA4E,EACA1B,GAAA/C,EAAA0E,EACAmU,GAAAhZ,EAAA4E,EAAA,EACAqU,GAAA9Y,EAAA0E,EAAA,EACA0d,GAAAlf,EAAA2E,IAAApD,EAAAC,GAAA,EACA2d,GAAAnf,EAAAyE,IAAAlD,EAAAC,GAAA,EACA4d,GAAApf,EAAAtD,KAAA6E,IAAAC,KAAA,EACAtW,KAAAm0B,EAAA1iB,EAAAG,EAAAyE,EAAAC,GACAyY,IAAAtd,EAAAG,EAAAyE,EAAAC,GAAArS,KAAA,MAGA,QAAAO,KACA,MAAA5G,MAAAqG,KAAA,KAAAgJ,QAAAmnB,EAAA,MAEA,QAAAC,GAAAC,GACA,GAAAjkB,GAAAuD,EAAA0gB,EAEA,OADAjkB,GAAA7L,WACA6L,EAEA,QAAAkkB,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAApwB,GACA,aAAAA,EACAqwB,EAAAR,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEAE,EAAAT,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACAG,EAAAV,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAApwB,IAGA,QAAAwwB,GAAAC,EAAAC,GACA,QAAAC,GAAA7lB,GACA,SAAAA,GAAAwO,QAAA,GAEA,MAAA5L,GAAA6F,EAAAlE,OAAA,SAAAhU,EAAA2E,EAAA4wB,GACAv1B,YAAA0S,KACA1S,IAAA2B,KAAA,MAEA3B,EAAAw1B,EAAAx1B,EAGA,QAFAyR,GAAAG,EAAAtS,EAAAnB,EAAkDs3B,EAAlDC,EAAA,GAAAC,KACAhlB,EAAA,EACAzS,EAAA,EAAA6M,EAAA/K,EAAA2E,OAA6CzG,EAAA6M,EAAQ7M,IAAA,CAErD,GADAoB,EAAAU,EAAA9B,GACA,KAAAoB,EAAA,GACAmS,GAAAnS,EAAA,GACAsS,GAAAtS,EAAA,OACiB,CAEjB,GADAnB,EAAAo2B,EAAA9iB,EAAAG,EAAAtS,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAqR,EAAAxS,EAAAwG,EAAA,CACA,GAAA0wB,IAAAM,EAAArlB,MAAA,CAUA,GATAmlB,EAAAlB,EAAA9iB,EAAAG,EAAAtS,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAqF,EAAAgM,GACA+kB,IACA,IAAAJ,EAAAG,EAAAnlB,MAAAmB,GACA6jB,EAAAG,EAAAnlB,MAAAsB,GACA0jB,EAAAG,EAAAp3B,EAAAoT,GACA6jB,EAAAG,EAAAp3B,EAAAuT,GACA0jB,EAAAG,EAAAhkB,GACA6jB,EAAAG,EAAA7jB,IAEA2jB,EAA4C,MAAAG,EAC5CC,GAAArlB,MAAAolB,EACAA,GACA,IAAAJ,EAAAG,EAAAhkB,GACA6jB,EAAAG,EAAA7jB,GAAA,IAAA0jB,EAAAG,EAAAz2B,EAAAyS,GACA6jB,EAAAG,EAAAz2B,EAAA4S,GACA0jB,EAAAG,EAAAllB,IAAAkB,GACA6jB,EAAAG,EAAAllB,IAAAqB,GACA0jB,EAAAh2B,EAAA,IACAg2B,EAAAh2B,EAAA,KACA2E,OACA0M,GAAAxS,EACAsT,GAAAnS,EAAA,GACAsS,GAAAtS,EAAA,EACA,UAEA,IAAA81B,IAAAC,EAEA,MADAI,GAAAlB,EAAA9iB,EAAAG,EAAAtS,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAqF,EAAAgM,GAIAA,GAAAxS,EACAsT,GAAAnS,EAAA,GACAsS,GAAAtS,EAAA,GAEAo2B,GAAAp2B,EAAAgV,QAAAhV,EAIA,MAFAq2B,GAAAplB,IAAAmlB,EACAD,EAAAL,EAAAzkB,EAAA0kB,EAAAM,EAAAV,EAAAxjB,EAAAG,EAAAtS,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,OAES,KAAA+S,EAAA6F,EAAAtE,OAKT,QAAAqhB,GAAAT,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAjjB,GACA,GAAA8jB,GAAA,EAAA9jB,EACA+jB,EAAAzkB,EAAAwkB,EAAA,GACAE,EAAA1kB,EAAAwkB,EAAA,GACAG,EAAAjkB,IACAkkB,EAAAD,EAAAjkB,EACAL,EAAAokB,EAAArB,EAAA,EAAAsB,EAAAhkB,EAAA4iB,EAAA,EAAAkB,EAAA9jB,IAAA8iB,EAAAoB,EAAAlB,EACAljB,EAAAikB,EAAApB,EAAA,EAAAqB,EAAAhkB,EAAA6iB,EAAA,EAAAiB,EAAA9jB,IAAA+iB,EAAAmB,EAAAjB,EACAkB,EAAAzB,EAAA,EAAA1iB,GAAA4iB,EAAAF,GAAAuB,GAAAnB,EAAA,EAAAF,EAAAF,GACA0B,EAAAzB,EAAA,EAAA3iB,GAAA6iB,EAAAF,GAAAsB,GAAAlB,EAAA,EAAAF,EAAAF,GACA0B,EAAAzB,EAAA,EAAA5iB,GAAA8iB,EAAAF,GAAAqB,GAAAjB,EAAA,EAAAF,EAAAF,GACA0B,EAAAzB,EAAA,EAAA7iB,GAAA+iB,EAAAF,GAAAoB,GAAAhB,EAAA,EAAAF,EAAAF,EAOA,QACAljB,IACAG,IACAvT,GAAgBoT,EAAAwkB,EAAArkB,EAAAskB,GAChBl3B,GAAgByS,EAAA0kB,EAAAvkB,EAAAwkB,GAChB9lB,OAAoBmB,EAXpBmkB,EAAApB,EAAA1iB,EAAA4iB,EAWoB9iB,EAVpBgkB,EAAAnB,EAAA3iB,EAAA6iB,GAWApkB,KAAkBkB,EAVlBmkB,EAAAhB,EAAA9iB,EAAAgjB,EAUkBljB,EATlBgkB,EAAAf,EAAA/iB,EAAAijB,GAUAsB,MATA,OAAAvhB,EAAAC,MAAAkhB,EAAAE,EAAAD,EAAAE,GAAAjkB,GAYA,QAAAmkB,GAAA9B,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA1iB,EAAAI,GAAA+hB,EAAA,WACAA,KAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,IAAAtf,GAAA8gB,EAAAlqB,MAAA,KAAAmoB,EACA,OAAA5O,GACAnQ,EAAAgE,IAAAhI,EACAgE,EAAAgE,IAAA7H,EACA6D,EAAA8D,IAAA9H,EAAAgE,EAAAgE,IAAAhI,EACAgE,EAAA8D,IAAA3H,EAAA6D,EAAAgE,IAAA7H,GAGA,QAAA4kB,GAAA/gB,EAAAhE,EAAAG,GACA,MAAAH,IAAAgE,EAAAhE,GACAA,GAAAgE,EAAAhE,EAAAgE,EAAAY,OACAzE,GAAA6D,EAAA7D,GACAA,GAAA6D,EAAA7D,EAAA6D,EAAAa,OAEA,QAAAmgB,GAAAC,EAAAC,GAGA,MAFAD,GAAA9Q,EAAA8Q,GACAC,EAAA/Q,EAAA+Q,GACAH,EAAAG,EAAAD,EAAAjlB,EAAAilB,EAAA9kB,IACA4kB,EAAAG,EAAAD,EAAAhiB,GAAAgiB,EAAA9kB,IACA4kB,EAAAG,EAAAD,EAAAjlB,EAAAilB,EAAA/hB,KACA6hB,EAAAG,EAAAD,EAAAhiB,GAAAgiB,EAAA/hB,KACA6hB,EAAAE,EAAAC,EAAAllB,EAAAklB,EAAA/kB,IACA4kB,EAAAE,EAAAC,EAAAjiB,GAAAiiB,EAAA/kB,IACA4kB,EAAAE,EAAAC,EAAAllB,EAAAklB,EAAAhiB,KACA6hB,EAAAE,EAAAC,EAAAjiB,GAAAiiB,EAAAhiB,MACA+hB,EAAAjlB,EAAAklB,EAAAjiB,IAAAgiB,EAAAjlB,EAAAklB,EAAAllB,GACAklB,EAAAllB,EAAAilB,EAAAhiB,IAAAiiB,EAAAllB,EAAAilB,EAAAjlB,KACAilB,EAAA9kB,EAAA+kB,EAAAhiB,IAAA+hB,EAAA9kB,EAAA+kB,EAAA/kB,GACA+kB,EAAA/kB,EAAA8kB,EAAA/hB,IAAAgiB,EAAA/kB,EAAA8kB,EAAA9kB,GAEA,QAAAglB,GAAA9kB,EAAA+kB,EAAAC,EAAAC,EAAAC,GAGA,MAAAllB,IADAA,IADA,EAAA+kB,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,GACA,EAAAH,EAAA,GAAAC,EAAA,EAAAC,GACA,EAAAF,EAAA,EAAAC,EAEA,QAAA9B,GAAAxgB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAoiB,EAAAC,EAAAprB,GACA,MAAAA,IACAA,EAAA,GAEAA,IAAA,IAAAA,EAAA,IAAAA,CAMA,QALAqrB,GAAArrB,EAAA,EAEAsrB,IAAA,8EACAC,GAAA,yEACAC,EAAA,EACAp5B,EAAA,EAAuBA,EAJvB,GAI8BA,IAAA,CAC9B,GAAAq5B,GAAAJ,EAAAC,EAAAl5B,GAAAi5B,EACAK,EAAAZ,EAAAW,EAAA/iB,EAAAE,EAAAE,EAAAqiB,GACAQ,EAAAb,EAAAW,EAAA9iB,EAAAE,EAAAE,EAAAqiB,GACAQ,EAAAF,IAAAC,GACAH,IAAAD,EAAAn5B,GAAA4W,EAAAtD,KAAAkmB,GAEA,MAAAP,GAAAG,EAEA,QAAApC,GAAA1gB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAoiB,EAAAC,EAAAS,GACA,KAAAA,EAAA,GAAA3C,EAAAxgB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAoiB,EAAAC,GAAAS,GAAA,CAGA,GAGAx5B,GAFAqwB,EAAA1c,GACAikB,EAFA,EAEAvH,CAIA,KADArwB,EAAA62B,EAAAxgB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAoiB,EAAAC,EAAAnB,GACApkB,EAAAxT,EAAAw5B,GAFA,KAGAnJ,GAAA,EACAuH,IAAA53B,EAAAw5B,EAAA,MAAAnJ,EACArwB,EAAA62B,EAAAxgB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAoiB,EAAAC,EAAAnB,EAEA,OAAAA,IAEA,QAAA6B,GAAApjB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAoiB,EAAAC,GACA,KACA5d,EAAA9E,EAAAE,GAAA8E,EAAA5E,EAAAqiB,IACAzd,EAAAhF,EAAAE,GAAA4E,EAAA1E,EAAAqiB,IACA3d,EAAA7E,EAAAE,GAAA6E,EAAA3E,EAAAqiB,IACA1d,EAAA/E,EAAAE,GAAA2E,EAAAzE,EAAAqiB,IAJA,CAQA,GAAAf,IAAA3hB,EAAAG,EAAAF,EAAAC,IAAAE,EAAAqiB,IAAAziB,EAAAE,IAAAE,EAAAsiB,EAAAriB,EAAAoiB,GACAb,GAAA5hB,EAAAG,EAAAF,EAAAC,IAAAG,EAAAqiB,IAAAziB,EAAAE,IAAAC,EAAAsiB,EAAAriB,EAAAoiB,GACAY,GAAArjB,EAAAE,IAAAG,EAAAqiB,IAAAziB,EAAAE,IAAAC,EAAAqiB,EAEA,IAAAY,EAAA,CAGA,GAAAC,GAAA3B,EAAA0B,EACAE,EAAA3B,EAAAyB,EACAG,GAAAF,EAAA7Z,QAAA,GACAga,GAAAF,EAAA9Z,QAAA,EACA,MACA+Z,GAAAxe,EAAAhF,EAAAE,GAAAuJ,QAAA,IACA+Z,GAAA1e,EAAA9E,EAAAE,GAAAuJ,QAAA,IACA+Z,GAAAxe,EAAA5E,EAAAqiB,GAAAhZ,QAAA,IACA+Z,GAAA1e,EAAA1E,EAAAqiB,GAAAhZ,QAAA,IACAga,GAAAze,EAAA/E,EAAAE,GAAAsJ,QAAA,IACAga,GAAA3e,EAAA7E,EAAAE,GAAAsJ,QAAA,IACAga,GAAAze,EAAA3E,EAAAqiB,GAAAjZ,QAAA,IACAga,GAAA3e,EAAAzE,EAAAqiB,GAAAjZ,QAAA,IAIA,OAAgBxM,EAAAqmB,EAAAlmB,EAAAmmB,KAQhB,QAAAG,GAAAC,EAAAC,EAAAC,GAGA,IAAA5B,EAFAH,EAAA6B,GACA7B,EAAA8B,IAEA,MAAAC,GAAA,IAUA,QARAC,GAAAtD,EAAA3oB,MAAA,EAAA8rB,GACAI,EAAAvD,EAAA3oB,MAAA,EAAA+rB,GACAI,KAAAF,EAAA,GACAG,KAAAF,EAAA,GACAG,KACAC,KACAC,KACAvoB,EAAAgoB,EAAA,KACAn6B,EAAA,EAAuBA,EAAAs6B,EAAA,EAAYt6B,IAAA,CACnC,GAAAoB,GAAA21B,EAAA5oB,MAAA,EAAA8rB,EAAAv0B,OAAA1F,EAAAs6B,GACAE,GAAAt1B,MAAwBqO,EAAAnS,EAAAmS,EAAAG,EAAAtS,EAAAsS,EAAAE,EAAA5T,EAAAs6B,IAExB,IAAAt6B,EAAA,EAAmBA,EAAAu6B,EAAA,EAAYv6B,IAC/BoB,EAAA21B,EAAA5oB,MAAA,EAAA+rB,EAAAx0B,OAAA1F,EAAAu6B,IACAE,EAAAv1B,MAAwBqO,EAAAnS,EAAAmS,EAAAG,EAAAtS,EAAAsS,EAAAE,EAAA5T,EAAAu6B,GAExB,KAAAv6B,EAAA,EAAmBA,EAAAs6B,EAAQt6B,IAC3B,OAAAgH,GAAA,EAA2BA,EAAAuzB,EAAQvzB,IAAA,CACnC,GAAA2zB,GAAAH,EAAAx6B,GACA46B,EAAAJ,EAAAx6B,EAAA,GACA66B,EAAAJ,EAAAzzB,GACA8zB,EAAAL,EAAAzzB,EAAA,GACA+zB,EAAAtnB,EAAAmnB,EAAArnB,EAAAonB,EAAApnB,GAAA,aACAynB,EAAAvnB,EAAAqnB,EAAAvnB,EAAAsnB,EAAAtnB,GAAA,aACAgB,EAAAmlB,EAAAiB,EAAApnB,EAAAonB,EAAAjnB,EAAAknB,EAAArnB,EAAAqnB,EAAAlnB,EAAAmnB,EAAAtnB,EAAAsnB,EAAAnnB,EAAAonB,EAAAvnB,EAAAunB,EAAApnB,EACA,IAAAa,EAAA,CACA,GAAAmmB,EAAAnmB,EAAAhB,EAAAwM,QAAA,KAAAxL,EAAAb,EAAAqM,QAAA,GACA,QAEA2a,GAAAnmB,EAAAhB,EAAAwM,QAAA,IAAAxL,EAAAb,EAAAqM,QAAA,EACA,IAAA2X,GAAAiD,EAAA/mB,EAAAH,GAAAc,EAAAwmB,GAAAJ,EAAAI,KAAAH,EAAAG,GAAAJ,EAAAI,MAAAH,EAAAhnB,EAAA+mB,EAAA/mB,GACAikB,EAAAgD,EAAAjnB,EAAAH,GAAAc,EAAAymB,GAAAH,EAAAG,KAAAF,EAAAE,GAAAH,EAAAG,MAAAF,EAAAlnB,EAAAinB,EAAAjnB,EACA8jB,IAAA,GAAAA,GAAA,GAAAG,GAAA,GAAAA,GAAA,IACAsC,EACAhoB,IAEAA,EAAAjN,MACAqO,EAAAgB,EAAAhB,EACAG,EAAAa,EAAAb,EACAgkB,KACAG,SAOA,MAAA1lB,GAEA,QAAA8oB,GAAAC,EAAAC,GACA,MAAAC,GAAAF,EAAAC,GAEA,QAAAE,GAAAH,EAAAC,GACA,MAAAC,GAAAF,EAAAC,EAAA,GAEA,QAAAC,GAAAF,EAAAC,EAAAhB,GACAe,EAAA5D,EAAA4D,GACAC,EAAA7D,EAAA6D,EAGA,QAFA7kB,GAAAC,EAAAC,EAAAC,EAAA6kB,EAAAC,EAAAC,EAAAC,EAAAxB,EAAAC,EACA/nB,EAAAgoB,EAAA,KACAn6B,EAAA,EAAA6M,EAAAquB,EAAAz0B,OAA0CzG,EAAA6M,EAAQ7M,IAAA,CAClD,GAAA07B,GAAAR,EAAAl7B,EACA,SAAA07B,EAAA,GACAplB,EAAAglB,EAAAI,EAAA,GACAnlB,EAAAglB,EAAAG,EAAA,OACa,CACb,KAAAA,EAAA,IACAzB,GAAA3jB,EAAAC,GAAA7Q,OAAAg2B,EAAAjuB,MAAA,IACA6I,EAAA2jB,EAAA,GACA1jB,EAAA0jB,EAAA,KAEAA,GAAA3jB,EAAAC,EAAAD,EAAAC,EAAA+kB,EAAAC,EAAAD,EAAAC,GACAjlB,EAAAglB,EACA/kB,EAAAglB,EAEA,QAAAv0B,GAAA,EAAAuH,EAAA4sB,EAAA10B,OAAkDO,EAAAuH,EAAQvH,IAAA,CAC1D,GAAA20B,GAAAR,EAAAn0B,EACA,SAAA20B,EAAA,GACAnlB,EAAAglB,EAAAG,EAAA,GACAllB,EAAAglB,EAAAE,EAAA,OACqB,CACrB,KAAAA,EAAA,IACAzB,GAAA1jB,EAAAC,GAAA/Q,OAAAi2B,EAAAluB,MAAA,IACA+I,EAAA0jB,EAAA,GACAzjB,EAAAyjB,EAAA,KAEAA,GAAA1jB,EAAAC,EAAAD,EAAAC,EAAA+kB,EAAAC,EAAAD,EAAAC,GACAjlB,EAAAglB,EACA/kB,EAAAglB,EAEA,IAAAG,GAAA5B,EAAAC,EAAAC,EAAAC,EACA,IAAAA,EACAhoB,GAAAypB,MACyB,CACzB,OAAAttB,GAAA,EAAAutB,EAAAD,EAAAn1B,OAA6D6H,EAAAutB,EAAQvtB,IACrEstB,EAAAttB,GAAAwtB,SAAA97B,EACA47B,EAAAttB,GAAAytB,SAAA/0B,EACA40B,EAAAttB,GAAA2rB,OACA2B,EAAAttB,GAAA4rB,MAEA/nB,KAAAzM,OAAAk2B,OAMA,MAAAzpB,GAEA,QAAA6pB,GAAAl6B,EAAAyR,EAAAG,GACA,GAAA6D,GAAA0kB,EAAAn6B,EACA,OAAAw2B,GAAA/gB,EAAAhE,EAAAG,IACA0nB,EAAAt5B,IAAA,IAAAyR,EAAAG,IAAA,IAAA6D,EAAAf,GAAA,aAEA,QAAAylB,GAAAn6B,GACA,GAAA0f,GAAAmU,EAAA7zB,EACA,IAAA0f,EAAAjK,KACA,MAAA7B,GAAA8L,EAAAjK,KAEA,KAAAzV,EACA,MAAA4lB,IAEA5lB,GAAAw1B,EAAAx1B,EAMA,QADAV,GAJAmS,EAAA,EACAG,EAAA,EACAF,KACAG,KAEA3T,EAAA,EAAA6M,EAAA/K,EAAA2E,OAAyCzG,EAAA6M,EAAQ7M,IAEjD,GADAoB,EAAAU,EAAA9B,GACA,KAAAoB,EAAA,GACAmS,EAAAnS,EAAA,GACAsS,EAAAtS,EAAA,GACAoS,EAAAtO,KAAAqO,GACAI,EAAAzO,KAAAwO,OACa,CACb,GAAAwoB,GAAA7D,EAAA9kB,EAAAG,EAAAtS,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAoS,KAAA9N,OAAAw2B,EAAA3gB,IAAAhI,EAAA2oB,EAAA7gB,IAAA9H,GACAI,IAAAjO,OAAAw2B,EAAA3gB,IAAA7H,EAAAwoB,EAAA7gB,IAAA3H,GACAH,EAAAnS,EAAA,GACAsS,EAAAtS,EAAA,GAGA,GAAA+6B,GAAA7gB,EAAAnN,MAAA,EAAAqF,GACA4oB,EAAA9gB,EAAAnN,MAAA,EAAAwF,GACA0oB,EAAAjhB,EAAAjN,MAAA,EAAAqF,GACA8oB,EAAAlhB,EAAAjN,MAAA,EAAAwF,GACAgE,EAAA+P,EAAAyU,EAAAC,EAAAC,EAAAF,EAAAG,EAAAF,EAEA,OADA5a,GAAAjK,KAAA7B,EAAAiC,GACAA,EAEA,QAAAse,GAAA1iB,EAAAG,EAAAU,EAAArI,EAAAiT,GACA,GAAAA,EACA,QACA,KAAAzL,IAAAyL,EAAAtL,IACA,IAAAU,EAAA,EAAA4K,EAAA,IACA,IAAAA,IAAA,MAAAA,MACA,MAAAjT,EAAA,EAAAiT,IACA,IAAAA,IAAA,OAAAA,MACA,MAAAA,EAAA5K,EAAA,IACA,IAAA4K,IAAA,OAAAA,OACA,QAAAA,EAAAjT,IACA,IAAAiT,IAAA,MAAAA,OACA,KAGA,IAAA7M,KAAA,IAAAoB,EAAAG,IAAA,IAAAU,EAAA,UAAArI,IAAA,KAAAqI,EAAA,SAEA,OADAjC,GAAA7L,WACA6L,EAEA,QAAAoqB,GAAAhpB,EAAAG,EAAAod,EAAAC,EAAAltB,GAQA,GAPA,MAAAA,GAAA,MAAAktB,IACAA,EAAAD,GAEAvd,KACAG,KACAod,KACAC,KACA,MAAAltB,EACA,GAAAiT,GAAA7D,KAAAgB,GAAA,IACAqC,EAAA/C,EAAAud,EAAA7d,KAAAyJ,KAAAqU,EAAAja,GACAN,EAAAjD,EAAAud,EAAA7d,KAAAyJ,KAAA7Y,EAAAiT,GACAP,EAAA7C,EAAAod,EAAA7d,KAAAe,KAAA+c,EAAAja,GACAL,EAAA/C,EAAAod,EAAA7d,KAAAe,KAAAnQ,EAAAiT,GACA3E,IAAA,IAAAmE,EAAAC,IAAA,IAAAua,IAAA,IAAAjtB,EAAAktB,EAAA,OAAAva,EAAAC,QAEAtE,KACA,IAAAoB,EAAAG,IACA,OAAAqd,IACA,IAAAD,EAAAC,EAAA,UAAAA,IACA,IAAAD,EAAAC,EAAA,WAAAA,IACA,KAIA,OADA5e,GAAA7L,WACA6L,EAqCA,QAAAqqB,GAAApG,GACA,GAAA5U,GAAAmU,EAAAS,GACAqG,EAAAxvB,OAAA/L,UAAAyI,WACA,IAAA6X,EAAAkb,IACA,MAAAvG,GAAA3U,EAAAkb,IAEAvoB,GAAAI,GAAA6hB,EAAA,UAAAjiB,EAAAI,GAAA6hB,KAAA,cACAA,EAAAjiB,EAAAmN,gBAAA8U,GAEA,IAAAjkB,MACAoB,EAAA,EACAG,EAAA,EACAqkB,EAAA,EACAC,EAAA,EACA5lB,EAAA,CACA,MAAAgkB,EAAA,QACA7iB,EAAA6iB,EAAA,MACA1iB,EAAA0iB,EAAA,MACA2B,EAAAxkB,EACAykB,EAAAtkB,EACAtB,IACAD,EAAAjN,MAAA,IAAAqO,EAAAG,IAEA,QAAA1T,GAAAoS,EAAAvF,EAAAupB,EAAA3vB,OAAkDzG,EAAA6M,EAAQ7M,IAAA,CAC1D,GAAAgf,GAAA7M,EAAAnS,MACA28B,EAAAvG,EAAAp2B,EACA,IAAA28B,EAAA,IAAAF,EAAAv8B,KAAAy8B,EAAA,IAEA,OADA3d,EAAA,GAAAyd,EAAAv8B,KAAAy8B,EAAA,IACA3d,EAAA,IACA,QACAA,EAAA,GAAA2d,EAAA,GACA3d,EAAA,GAAA2d,EAAA,GACA3d,EAAA,GAAA2d,EAAA,GACA3d,EAAA,GAAA2d,EAAA,GACA3d,EAAA,GAAA2d,EAAA,GACA3d,EAAA,KAAA2d,EAAA,GAAAppB,GAAAwM,QAAA,GACAf,EAAA,KAAA2d,EAAA,GAAAjpB,GAAAqM,QAAA,EACA,MACA,SACAf,EAAA,KAAA2d,EAAA,GAAAjpB,GAAAqM,QAAA,EACA,MACA,SACAgY,EAAA4E,EAAA,GACA3E,EAAA2E,EAAA,EACA,SACA,OAAA31B,GAAA,EAAAuH,EAAAouB,EAAAl2B,OAAuDO,EAAAuH,EAAQvH,IAC/DgY,EAAAhY,KAAA21B,EAAA31B,MAAA,EAAAuM,EAAAG,IAAAqM,QAAA,OAGa,CACbf,EAAA7M,EAAAnS,MACA,KAAA28B,EAAA,KACA5E,EAAA4E,EAAA,GAAAppB,EACAykB,EAAA2E,EAAA,GAAAjpB,EAEA,QAAApF,GAAA,EAAAutB,EAAAc,EAAAl2B,OAA+C6H,EAAAutB,EAAQvtB,IACvD6D,EAAAnS,GAAAsO,GAAAquB,EAAAruB,GAGA,GAAAmE,GAAAN,EAAAnS,GAAAyG,MACA,QAAA0L,EAAAnS,GAAA,IACA,QACAuT,EAAAwkB,EACArkB,EAAAskB,CACA,MACA,SACAzkB,IAAApB,EAAAnS,GAAAyS,EAAA,EACA,MACA,SACAiB,IAAAvB,EAAAnS,GAAAyS,EAAA,EACA,MACA,SACAc,IAAApB,EAAAnS,GAAAyS,EAAA,GACAiB,IAAAvB,EAAAnS,GAAAyS,EAAA,IAKA,MAFAN,GAAA7L,WACAkb,EAAAkb,IAAAvG,EAAAhkB,GACAA,EAEA,QAAAyqB,GAAAxG,GACA,GAAA5U,GAAAmU,EAAAS,EACA,IAAA5U,EAAA/N,IACA,MAAA0iB,GAAA3U,EAAA/N,IAKA,IAHAc,EAAA6hB,EAAA,UAAA7hB,EAAA6hB,KAAA,cACAA,EAAAjiB,EAAAmN,gBAAA8U,KAEAA,MAAA3vB,OACA,iBAEA,IAMAo2B,GANA1qB,KACAoB,EAAA,EACAG,EAAA,EACAqkB,EAAA,EACAC,EAAA,EACA5lB,EAAA,CAEA,MAAAgkB,EAAA,QACA7iB,GAAA6iB,EAAA,MACA1iB,GAAA0iB,EAAA,MACA2B,EAAAxkB,EACAykB,EAAAtkB,EACAtB,IACAD,EAAA,QAAAoB,EAAAG,GAMA,QAAAsL,GAAA2d,EAJAG,EAAA,GAAA1G,EAAA3vB,QACA,KAAA2vB,EAAA,OACA,KAAAA,EAAA,MAAAxP,eACA,KAAAwP,EAAA,MAAAxP,cACA5mB,EAAAoS,EAAAvF,EAAAupB,EAAA3vB,OAAyDzG,EAAA6M,EAAQ7M,IAAA,CAIjE,GAHAmS,EAAAjN,KAAA8Z,MACA2d,EAAAvG,EAAAp2B,IACA68B,EAAAF,EAAA,KACAE,EAAAjW,cAEA,OADA5H,EAAA,GAAA6d,EAAAjW,cACA5H,EAAA,IACA,QACAA,EAAA,GAAA2d,EAAA,GACA3d,EAAA,GAAA2d,EAAA,GACA3d,EAAA,GAAA2d,EAAA,GACA3d,EAAA,GAAA2d,EAAA,GACA3d,EAAA,GAAA2d,EAAA,GACA3d,EAAA,IAAA2d,EAAA,GAAAppB,EACAyL,EAAA,IAAA2d,EAAA,GAAAjpB,CACA,MACA,SACAsL,EAAA,IAAA2d,EAAA,GAAAjpB,CACA,MACA,SACAsL,EAAA,IAAA2d,EAAA,GAAAppB,CACA,MACA,SAEA,OADAwpB,IAAAxpB,EAAAG,GAAAhO,OAAAi3B,EAAAlvB,MAAA,IACAzG,EAAA,EAAAuH,EAAAwuB,EAAAt2B,OAAyDO,EAAAuH,EAAQvH,IACjE+1B,EAAA/1B,IAAA+1B,EAAA/1B,GAAAuM,EACAwpB,IAAA/1B,IAAA+1B,EAAA/1B,GAAA0M,CAEAvB,GAAA6qB,MACA7qB,IAAAzM,OAAAu3B,EAAAF,EAAAD,GACA,MACA,SACA3qB,EAAA6qB,MACAD,EAAAR,EAAAhpB,EAAAG,EAAAipB,EAAA,GAAAA,EAAA,IACAI,EAAA73B,KAAA63B,EAAA,IACA5qB,IAAAzM,OAAAq3B,EACA,MACA,SACA5qB,EAAA6qB,MACA7qB,IAAAzM,OAAA62B,EAAAhpB,EAAAG,EAAAipB,EAAA,GAAAA,EAAA,GAAAA,EAAA,KACA3d,GAAA,KAAAtZ,OAAAyM,IAAA1L,OAAA,GAAAgH,OAAA,GACA,MACA,SACAsqB,GAAA4E,EAAA,GAAAppB,EACAykB,GAAA2E,EAAA,GAAAjpB,CACA,SACA,IAAA1M,EAAA,EAAAuH,EAAAouB,EAAAl2B,OAAmDO,EAAAuH,EAAQvH,IAC3DgY,EAAAhY,IAAA21B,EAAA31B,MAAA,EAAAuM,EAAAG,OAGa,SAAAmpB,EACbE,GAAAxpB,EAAAG,GAAAhO,OAAAi3B,EAAAlvB,MAAA,IACA0E,EAAA6qB,MACA7qB,IAAAzM,OAAAu3B,EAAAF,EAAAD,IACA9d,GAAA,KAAAtZ,OAAAi3B,EAAAlvB,OAAA,QACa,SAAAovB,EACb1qB,EAAA6qB,MACAD,EAAAR,EAAAhpB,EAAAG,EAAAipB,EAAA,GAAAA,EAAA,IACAI,EAAA73B,KAAA63B,EAAA,IACA5qB,IAAAzM,OAAAq3B,OACa,SAAAF,EACb1qB,EAAA6qB,MACA7qB,IAAAzM,OAAA62B,EAAAhpB,EAAAG,EAAAipB,EAAA,GAAAA,EAAA,GAAAA,EAAA,KACA3d,GAAA,KAAAtZ,OAAAyM,IAAA1L,OAAA,GAAAgH,OAAA,QAEA,QAAAa,GAAA,EAAAutB,EAAAc,EAAAl2B,OAA+C6H,EAAAutB,EAAQvtB,IACvD0Q,EAAA1Q,GAAAquB,EAAAruB,EAIA,UADAuuB,IAAAjW,eAEA,OAAA5H,EAAA,IACA,QACAzL,GAAAwkB,EACArkB,GAAAskB,CACA,MACA,SACAzkB,EAAAyL,EAAA,EACA,MACA,SACAtL,EAAAsL,EAAA,EACA,MACA,SACA+Y,EAAA/Y,IAAAvY,OAAA,GACAuxB,EAAAhZ,IAAAvY,OAAA,EACA,SACA8M,EAAAyL,IAAAvY,OAAA,GACAiN,EAAAsL,IAAAvY,OAAA,IAMA,MAFA0L,GAAA7L,WACAkb,EAAA/N,IAAA0iB,EAAAhkB,GACAA,EAEA,QAAA+qB,GAAA5mB,EAAAC,EAAAC,EAAAC,GACA,OAAAH,EAAAC,EAAAC,EAAAC,EAAAD,EAAAC,GAEA,QAAA0mB,GAAA7mB,EAAAC,EAAA6mB,EAAAC,EAAA7mB,EAAAC,GAGA,OAFA,IAGAH,EAFA,IAEA8mB,EAHA,IAIA7mB,EAHA,IAGA8mB,EAJA,IAKA7mB,EAJA,IAIA4mB,EALA,IAMA3mB,EALA,IAKA4mB,EACA7mB,EACAC,GAGA,QAAA6mB,GAAAhnB,EAAAC,EAAAua,EAAAC,EAAA1a,EAAAknB,EAAAC,EAAAhnB,EAAAC,EAAAgnB,GAGA,GAGA/C,GAHAgD,EAAA,IAAAzpB,EAAA,IACA6C,EAAA7C,EAAA,MAAAoC,GAAA,GACAlE,KAEA+F,EAAA/D,EAAA6F,EAAAlE,OAAA,SAAAvC,EAAAG,EAAAoD,GAGA,OAAwBvD,EAFxBA,EAAAqD,EAAA8F,IAAA5F,GAAApD,EAAAkD,EAAA5C,IAAA8C,GAEwBpD,EADxBH,EAAAqD,EAAA5C,IAAA8C,GAAApD,EAAAkD,EAAA8F,IAAA5F,KAGA,KAAAga,IAAAC,EACA,OAAAza,EAAAC,EAAAC,EAAAC,EAAAD,EAAAC,EAEA,IAAAgnB,EAqCAE,EAAAF,EAAA,GACAvtB,EAAAutB,EAAA,GACAlR,EAAAkR,EAAA,GACAjR,EAAAiR,EAAA,OAxCA,CACA/C,EAAAxiB,EAAA5B,EAAAC,GAAAO,GACAR,EAAAokB,EAAAnnB,EACAgD,EAAAmkB,EAAAhnB,EACAgnB,EAAAxiB,EAAA1B,EAAAC,GAAAK,GACAN,EAAAkkB,EAAAnnB,EACAkD,EAAAikB,EAAAhnB,CACA,IAEAH,IAFAqD,EAAA8F,IAAAzI,EAAA,IAAAoC,GACAO,EAAA5C,IAAAC,EAAA,IAAAoC,IACAC,EAAAE,GAAA,GACA9C,GAAA6C,EAAAE,GAAA,EACA1K,EAAAwH,KAAAud,KAAApd,KAAAqd,IACAhlB,GAAA,IACAA,EAAA6K,EAAAtD,KAAAvH,GACA+kB,GAAA/kB,EACAglB,GAAAhlB,EAEA,IAAA6xB,GAAA9M,IACA+M,EAAA9M,IACAziB,GAAAivB,GAAAC,GAAA,KACA5mB,EAAAtD,KAAAG,GAAAmqB,EAAAC,EAAAD,EAAAlqB,IAAAmqB,EAAAtqB,MAAAqqB,EAAAlqB,IAAAmqB,EAAAtqB,OACAgZ,EAAAje,EAAAwiB,EAAApd,EAAAqd,GAAAza,EAAAE,GAAA,EACAgW,EAAAle,GAAAyiB,EAAAxd,EAAAud,GAAAva,EAAAE,GAAA,EACAknB,EAAA/mB,EAAA+F,OAAApG,EAAAiW,GAAAuE,GAAAhR,QAAA,IACA7P,EAAA0G,EAAA+F,OAAAlG,EAAA+V,GAAAuE,GAAAhR,QAAA,GAEA4d,GAAArnB,EAAAiW,EAAAtY,EAAA0pB,IACAztB,EAAAsG,EAAA+V,EAAAtY,EAAA/D,IACAytB,EAAA,IAAAA,EAAA,EAAA1pB,EAAA0pB,GACAztB,EAAA,IAAAA,EAAA,EAAA+D,EAAA/D,GACAstB,GAAAG,EAAAztB,IACAytB,GAAA,EAAA1pB,IAEAupB,GAAAttB,EAAAytB,IACAztB,GAAA,EAAA+D,GAQA,GAAA6pB,GAAA5tB,EAAAytB,CACA,IAAAlqB,EAAAqqB,GAAAJ,EAAA,CACA,GAAAK,GAAA7tB,EACA8tB,EAAAxnB,EACAynB,EAAAxnB,CACAvG,GAAAytB,EAAAD,GAAAF,GAAAttB,EAAAytB,EAAA,MACAnnB,EAAA+V,EAAAuE,EAAAla,EAAA8F,IAAAxM,GACAuG,EAAA+V,EAAAuE,EAAAna,EAAA5C,IAAA9D,GACAiC,EAAAmrB,EAAA9mB,EAAAC,EAAAqa,EAAAC,EAAA1a,EAAA,EAAAmnB,EAAAQ,EAAAC,GAAA/tB,EAAA6tB,EAAAxR,EAAAC,IAEAsR,EAAA5tB,EAAAytB,CACA,IAAAO,GAAAtnB,EAAA8F,IAAAihB,GACAQ,EAAAvnB,EAAA5C,IAAA2pB,GACAS,EAAAxnB,EAAA8F,IAAAxM,GACAmuB,EAAAznB,EAAA5C,IAAA9D,GACA0D,EAAAgD,EAAAQ,IAAA0mB,EAAA,GACAQ,EAAA,IAAAxN,EAAAld,EACA2qB,EAAA,IAAAxN,EAAAnd,EACA4qB,GAAAloB,EAAAC,GACAkoB,GAAAnoB,EAAAgoB,EAAAH,EAAA5nB,EAAAgoB,EAAAL,GACAQ,GAAAloB,EAAA8nB,EAAAD,EAAA5nB,EAAA8nB,EAAAH,GACAO,GAAAnoB,EAAAC,EAGA,IAFAgoB,EAAA,KAAAD,EAAA,GAAAC,EAAA,GACAA,EAAA,KAAAD,EAAA,GAAAC,EAAA,GACAhB,EACA,OAAAgB,EAAAC,EAAAC,GAAAj5B,OAAAyM,EAEAA,IAAAssB,EAAAC,EAAAC,GAAAj5B,OAAAyM,GAAApM,OAAA2I,MAAA,IAEA,QADAkwB,MACA5+B,EAAA,EAAA6M,EAAAsF,EAAA1L,OAA4CzG,EAAA6M,EAAQ7M,IACpD4+B,EAAA5+B,KAAA,EAAAkY,EAAA/F,EAAAnS,EAAA,GAAAmS,EAAAnS,GAAA8W,GAAApD,EAAAwE,EAAA/F,EAAAnS,GAAAmS,EAAAnS,EAAA,GAAA8W,GAAAvD,CAEA,OAAAqrB,GAeA,QAAAvG,GAAAwG,EAAAC,EAAAxoB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAIA,OADA9S,GAAA6I,EAAAtM,EAAAwT,EAAA8jB,EAAAG,EAAAkH,EAAAC,EAFAC,KACAC,UAEAl/B,EAAA,EAAuBA,EAAA,IAAOA,EAU9B,GATA,GAAAA,GACA0M,EAAA,EAAAmyB,EAAA,GAAAvoB,EAAA,EAAAE,EACA3S,GAAA,EAAAg7B,EAAA,EAAAvoB,EAAA,EAAAE,EAAA,EAAAE,EACAtW,EAAA,EAAAkW,EAAA,EAAAuoB,IAEAnyB,EAAA,EAAAoyB,EAAA,GAAAvoB,EAAA,EAAAE,EACA5S,GAAA,EAAAi7B,EAAA,EAAAvoB,EAAA,EAAAE,EAAA,EAAAE,EACAvW,EAAA,EAAAmW,EAAA,EAAAuoB,GAEArrB,EAAA5P,GAAA,OACA,GAAA4P,EAAA/G,GAAA,MACA,QAGA,IADAkH,GAAAxT,EAAAsM,IACAkH,EAAA,GACAqrB,EAAA/5B,KAAA0O,OAIAmrB,GAAAryB,IAAA,EAAAtM,EAAAyD,EACAm7B,EAAApoB,EAAAtD,KAAAyrB,GACAA,EAAA,IAGArH,IAAAhrB,EAAAsyB,IAAA,EAAAn7B,GACA,EAAA6zB,KAAA,GACAuH,EAAA/5B,KAAAwyB,GAGA,GADAG,IAAAnrB,EAAAsyB,IAAA,EAAAn7B,KACAg0B,EAAA,GACAoH,EAAA/5B,KAAA2yB,GAOA,KAHA,GAEAsH,GAFAn4B,EAAAi4B,EAAAx4B,OACA24B,EAAAp4B,EAEAA,KACA4M,EAAAqrB,EAAAj4B,GACAm4B,EAAA,EAAAvrB,EACAsrB,EAAA,GAAAl4B,GAAAm4B,MAAAN,EAAA,EAAAM,IAAAvrB,EAAA0C,EAAA,EAAA6oB,EAAAvrB,IAAA4C,EAAA5C,MAAA8C,EACAwoB,EAAA,GAAAl4B,GAAAm4B,MAAAL,EAAA,EAAAK,IAAAvrB,EAAA2C,EAAA,EAAA4oB,EAAAvrB,IAAA6C,EAAA7C,MAAA+C,CAUA,OAPAuoB,GAAA,GAAAE,GAAAP,EACAK,EAAA,GAAAE,GAAAN,EACAI,EAAA,GAAAE,EAAA,GAAA1oB,EACAwoB,EAAA,GAAAE,EAAA,GAAAzoB,EACAuoB,EAAA,GAAAz4B,OAAAy4B,EAAA,GAAAz4B,OAAA24B,EAAA,GAIA7jB,KAAgBhI,EAAA+H,EAAAnN,MAAA,EAAA+wB,EAAA,IAAAxrB,EAAA4H,EAAAnN,MAAA,EAAA+wB,EAAA,KAChB7jB,KAAgB9H,EAAA6H,EAAAjN,MAAA,EAAA+wB,EAAA,IAAAxrB,EAAA0H,EAAAjN,MAAA,EAAA+wB,EAAA,MAIhB,QAAA5H,GAAAx1B,EAAAq5B,GACA,GAAA3Z,IAAA2Z,GAAAxF,EAAA7zB,EACA,KAAAq5B,GAAA3Z,EAAA6d,MACA,MAAAlJ,GAAA3U,EAAA6d,MAyFA,QAvFAj+B,GAAAw7B,EAAA96B,GACA82B,EAAAuC,GAAAyB,EAAAzB,GACA/rB,GAAqBmE,EAAA,EAAAG,EAAA,EAAA4rB,GAAA,EAAAC,GAAA,EAAA/rB,EAAA,EAAAG,EAAA,EAAA6rB,GAAA,KAAAC,GAAA,MACrBC,GAAsBnsB,EAAA,EAAAG,EAAA,EAAA4rB,GAAA,EAAAC,GAAA,EAAA/rB,EAAA,EAAAG,EAAA,EAAA6rB,GAAA,KAAAC,GAAA,MACtBE,GAAA,SAAA79B,EAAAzB,EAAAu/B,GACA,GAAA3H,GAAAC,CACA,KAAAp2B,EACA,WAAAzB,EAAAkT,EAAAlT,EAAAqT,EAAArT,EAAAkT,EAAAlT,EAAAqT,EAAArT,EAAAkT,EAAAlT,EAAAqT,EAGA,UADA5R,EAAA,KAA8B+9B,EAAA,EAAAxsB,EAAA,MAAWhT,EAAAm/B,GAAAn/B,EAAAo/B,GAAA,MACzC39B,EAAA,IACA,QACAzB,EAAAmT,EAAA1R,EAAA,GACAzB,EAAAsT,EAAA7R,EAAA,EACA,MACA,SACAA,GAAA,KAAA4D,OAAA43B,EAAAnvB,MAAA,GAAA9N,EAAAkT,EAAAlT,EAAAqT,GAAAhO,OAAA5D,EAAA2L,MAAA,KACA,MACA,SACA,KAAAmyB,GAAA,KAAAA,GACA3H,EAAA,EAAA53B,EAAAkT,EAAAlT,EAAAi/B,GACApH,EAAA,EAAA73B,EAAAqT,EAAArT,EAAAk/B,KAGAtH,EAAA53B,EAAAkT,EACA2kB,EAAA73B,EAAAqT,GAEA5R,GAAA,IAAAm2B,EAAAC,GAAAxyB,OAAA5D,EAAA2L,MAAA,GACA,MACA,SACA,KAAAmyB,GAAA,KAAAA,GACAv/B,EAAAm/B,GAAA,EAAAn/B,EAAAkT,EAAAlT,EAAAm/B,GACAn/B,EAAAo/B,GAAA,EAAAp/B,EAAAqT,EAAArT,EAAAo/B,KAGAp/B,EAAAm/B,GAAAn/B,EAAAkT,EACAlT,EAAAo/B,GAAAp/B,EAAAqT,GAEA5R,GAAA,KAAA4D,OAAAy3B,EAAA98B,EAAAkT,EAAAlT,EAAAqT,EAAArT,EAAAm/B,GAAAn/B,EAAAo/B,GAAA39B,EAAA,GAAAA,EAAA,IACA,MACA,SACAzB,EAAAm/B,GAAA19B,EAAA,GACAzB,EAAAo/B,GAAA39B,EAAA,GACAA,GAAA,KAAA4D,OAAAy3B,EAAA98B,EAAAkT,EAAAlT,EAAAqT,EAAA5R,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACA,MACA,SACAA,GAAA,KAAA4D,OAAAw3B,EAAA78B,EAAAkT,EAAAlT,EAAAqT,EAAA5R,EAAA,GAAAA,EAAA,IACA,MACA,SACAA,GAAA,KAAA4D,OAAAw3B,EAAA78B,EAAAkT,EAAAlT,EAAAqT,EAAA5R,EAAA,GAAAzB,EAAAqT,GACA,MACA,SACA5R,GAAA,KAAA4D,OAAAw3B,EAAA78B,EAAAkT,EAAAlT,EAAAqT,EAAArT,EAAAkT,EAAAzR,EAAA,IACA,MACA,SACAA,GAAA,KAAA4D,OAAAw3B,EAAA78B,EAAAkT,EAAAlT,EAAAqT,EAAArT,EAAAmT,EAAAnT,EAAAsT,IAGA,MAAA7R,KAEAg+B,EAAA,SAAAC,EAAA//B,GACA,GAAA+/B,EAAA//B,GAAAyG,OAAA,GACAs5B,EAAA//B,GAAAoW,OAEA,KADA,GAAAslB,GAAAqE,EAAA//B,GACA07B,EAAAj1B,QACAu5B,EAAAhgC,GAAA,IACA44B,IAAAqH,EAAAjgC,GAAA,KACA+/B,EAAAnwB,OAAA5P,IAAA,QAAA0F,OAAAg2B,EAAA9rB,OAAA,MAEAmwB,GAAAnwB,OAAA5P,EAAA,GACA6M,EAAAuO,EAAAha,EAAAqF,OAAAmyB,KAAAnyB,QAAA,KAGAy5B,EAAA,SAAAhF,EAAAC,EAAAgF,EAAAC,EAAApgC,GACAk7B,GAAAC,GAAA,KAAAD,EAAAl7B,GAAA,SAAAm7B,EAAAn7B,GAAA,KACAm7B,EAAAvrB,OAAA5P,EAAA,OAAAogC,EAAA7sB,EAAA6sB,EAAA1sB,IACAysB,EAAAb,GAAA,EACAa,EAAAZ,GAAA,EACAY,EAAA5sB,EAAA2nB,EAAAl7B,GAAA,GACAmgC,EAAAzsB,EAAAwnB,EAAAl7B,GAAA,GACA6M,EAAAuO,EAAAha,EAAAqF,OAAAmyB,KAAAnyB,QAAA,KAGAu5B,KACAC,KACAI,EAAA,GACAT,EAAA,GACA5/B,EAAA,EAAA6M,EAAAuO,EAAAha,EAAAqF,OAAAmyB,KAAAnyB,QAAA,GAAkEzG,EAAA6M,EAAQ7M,IAAA,CAC1EoB,EAAApB,KAAAqgC,EAAAj/B,EAAApB,GAAA,IAEA,KAAAqgC,IAEAL,EAAAhgC,GAAAqgC,EACArgC,IAAA4/B,EAAAI,EAAAhgC,EAAA,KAEAoB,EAAApB,GAAA2/B,EAAAv+B,EAAApB,GAAAoP,EAAAwwB,GAEA,KAAAI,EAAAhgC,IAAA,KAAAqgC,IAAAL,EAAAhgC,GAAA,KAIA8/B,EAAA1+B,EAAApB,GAEA44B,IACAA,EAAA54B,KAAAqgC,EAAAzH,EAAA54B,GAAA,IACA,KAAAqgC,IACAJ,EAAAjgC,GAAAqgC,EACArgC,IAAA4/B,EAAAK,EAAAjgC,EAAA,KAEA44B,EAAA54B,GAAA2/B,EAAA/G,EAAA54B,GAAA0/B,EAAAE,GAEA,KAAAK,EAAAjgC,IAAA,KAAAqgC,IACAJ,EAAAjgC,GAAA,KAGA8/B,EAAAlH,EAAA54B,IAEAkgC,EAAA9+B,EAAAw3B,EAAAxpB,EAAAswB,EAAA1/B,GACAkgC,EAAAtH,EAAAx3B,EAAAs+B,EAAAtwB,EAAApP,EACA,IAAAsgC,GAAAl/B,EAAApB,GACAugC,EAAA3H,KAAA54B,GACAwgC,EAAAF,EAAA75B,OACAg6B,EAAA7H,GAAA2H,EAAA95B,MACA2I,GAAAmE,EAAA+sB,EAAAE,EAAA,GACApxB,EAAAsE,EAAA4sB,EAAAE,EAAA,GACApxB,EAAAkwB,GAAAtkB,EAAAslB,EAAAE,EAAA,KAAApxB,EAAAmE,EACAnE,EAAAmwB,GAAAvkB,EAAAslB,EAAAE,EAAA,KAAApxB,EAAAsE,EACAgsB,EAAAJ,GAAA1G,IAAA5d,EAAAulB,EAAAE,EAAA,KAAAf,EAAAnsB,GACAmsB,EAAAH,GAAA3G,IAAA5d,EAAAulB,EAAAE,EAAA,KAAAf,EAAAhsB,GACAgsB,EAAAnsB,EAAAqlB,GAAA2H,EAAAE,EAAA,GACAf,EAAAhsB,EAAAklB,GAAA2H,EAAAE,EAAA,GAKA,MAHA7H,KACApX,EAAA6d,MAAAlJ,EAAA/0B,IAEAw3B,GAAAx3B,EAAAw3B,GAAAx3B,EAEA,QAAAs/B,GAAA5+B,EAAAonB,GACA,IAAAA,EACA,MAAApnB,EAEA,IAAAyR,GAAAG,EAAA1T,EAAAgH,EAAA6F,EAAA0B,EAAAoyB,CAEA,KADA7+B,EAAAw1B,EAAAx1B,GACA9B,EAAA,EAAA6M,EAAA/K,EAAA2E,OAAqCzG,EAAA6M,EAAQ7M,IAE7C,IADA2gC,EAAA7+B,EAAA9B,GACAgH,EAAA,EAAAuH,EAAAoyB,EAAAl6B,OAA0CO,EAAAuH,EAAQvH,GAAA,EAClDuM,EAAA2V,EAAA3V,EAAAotB,EAAA35B,GAAA25B,EAAA35B,EAAA,IACA0M,EAAAwV,EAAAxV,EAAAitB,EAAA35B,GAAA25B,EAAA35B,EAAA,IACA25B,EAAA35B,GAAAuM,EACAotB,EAAA35B,EAAA,GAAA0M,CAGA,OAAA5R,GAIA,QAAAm7B,GAAA2D,EAAAhzB,GAEA,OADAvN,MACAL,EAAA,EAAA6gC,EAAAD,EAAAn6B,OAA0Co6B,EAAA,GAAAjzB,EAAA5N,EAAmBA,GAAA,GAC7D,GAAAoB,KACyBmS,GAAAqtB,EAAA5gC,EAAA,GAAA0T,GAAAktB,EAAA5gC,EAAA,KACAuT,GAAAqtB,EAAA5gC,GAAA0T,GAAAktB,EAAA5gC,EAAA,KACAuT,GAAAqtB,EAAA5gC,EAAA,GAAA0T,GAAAktB,EAAA5gC,EAAA,KACAuT,GAAAqtB,EAAA5gC,EAAA,GAAA0T,GAAAktB,EAAA5gC,EAAA,IAEzB4N,GACA5N,EAEiB6gC,EAAA,GAAA7gC,EACjBoB,EAAA,IAA4BmS,GAAAqtB,EAAA,GAAAltB,GAAAktB,EAAA,IACXC,EAAA,GAAA7gC,IACjBoB,EAAA,IAA4BmS,GAAAqtB,EAAA,GAAAltB,GAAAktB,EAAA,IAC5Bx/B,EAAA,IAA4BmS,GAAAqtB,EAAA,GAAAltB,GAAAktB,EAAA,KAL5Bx/B,EAAA,IAA4BmS,GAAAqtB,EAAAC,EAAA,GAAAntB,GAAAktB,EAAAC,EAAA,IAQ5BA,EAAA,GAAA7gC,EACAoB,EAAA,GAAAA,EAAA,GACiBpB,IACjBoB,EAAA,IAA4BmS,GAAAqtB,EAAA5gC,GAAA0T,GAAAktB,EAAA5gC,EAAA,KAG5BK,EAAA6E,MAAA,MACA9D,EAAA,GAAAmS,EAAA,EAAAnS,EAAA,GAAAmS,EAAAnS,EAAA,GAAAmS,GAAA,IACAnS,EAAA,GAAAsS,EAAA,EAAAtS,EAAA,GAAAsS,EAAAtS,EAAA,GAAAsS,GAAA,GACAtS,EAAA,GAAAmS,EAAA,EAAAnS,EAAA,GAAAmS,EAAAnS,EAAA,GAAAmS,GAAA,GACAnS,EAAA,GAAAsS,EAAA,EAAAtS,EAAA,GAAAsS,EAAAtS,EAAA,GAAAsS,GAAA,EACAtS,EAAA,GAAAmS,EACAnS,EAAA,GAAAsS,IAIA,MAAArT,GA3kCA,GAAAwpB,GAAArV,EAAAtT,UACAqT,EAAAJ,EAAAI,GACAmB,EAAAvB,EAAA6F,EAAAtE,MACApJ,EAAA,iBACA4pB,EAAA,gBACAlb,EAAAC,WACArE,EAAA3D,KACAgB,EAAA2C,EAAA3C,GACAqH,EAAA1E,EAAA2E,IACAH,EAAAxE,EAAAyE,IACAnI,EAAA0D,EAAA1D,IACAO,EAAAmD,EAAAnD,IA2HAiK,EAAAuZ,EAAA,GACAhZ,EAAAgZ,IACA6J,EAAA7J,EAAA,KA0VApe,EAAA1E,EAAA2N,SACAif,GACAj/B,KAAA,SAAA8S,GACA,MAAAA,GAAAnR,KAAA,SAEA2vB,OAAA,SAAAxe,GACA,GAAAnR,GAAAoV,EAAAjE,EACA,OAAA2nB,GAAA94B,EAAA8oB,GAAA9oB,EAAA+oB,GAAA/oB,EAAAub,IAEA8U,QAAA,SAAAlf,GACA,GAAAnR,GAAAoV,EAAAjE,EACA,OAAA2nB,GAAA94B,EAAA8oB,IAAA,EAAA9oB,EAAA+oB,IAAA,EAAA/oB,EAAAqtB,GAAArtB,EAAAstB,KAEAoC,KAAA,SAAAve,GACA,GAAAnR,GAAAoV,EAAAjE,EACA,OAAAqhB,GAAAxyB,EAAA8P,GAAA,EAAA9P,EAAAiQ,GAAA,EAAAjQ,EAAA0U,MAAA1U,EAAA2U,OAAA3U,EAAAqtB,GAAArtB,EAAAstB,KAEA2C,MAAA,SAAA9e,GACA,GAAAnR,GAAAoV,EAAAjE,EACA,OAAAqhB,GAAAxyB,EAAA8P,GAAA,EAAA9P,EAAAiQ,GAAA,EAAAjQ,EAAA0U,MAAA1U,EAAA2U,SAEAqc,KAAA,SAAA7f,GACA,WAAAA,EAAAnR,KAAA,SAAAmR,EAAAnR,KAAA,SAAAmR,EAAAnR,KAAA,MAAAmR,EAAAnR,KAAA,QAEAixB,SAAA,SAAA9f,GACA,UAAAA,EAAAnR,KAAA,WAEAmxB,QAAA,SAAAhgB,GACA,UAAAA,EAAAnR,KAAA,eAEA4mB,MAAA,SAAAzV,GACA,GAAA2C,GAAA3C,EAAA2D,KAAAU,SACA,OAAAgd,GAAA1e,EAAAhE,EAAAgE,EAAA7D,EAAA6D,EAAAY,MAAAZ,EAAAa,SA6kBAjE,GAAArS,KAAA6zB,EAYAxhB,EAAArS,KAAA4b,iBAiBAvJ,EAAArS,KAAAmc,mBAaA9J,EAAArS,KAAAk/B,WAAA,SAAAl/B,EAAAorB,EAAAC,GACA,GAAAztB,KAAAge,eAAA5b,GAAAqrB,EAAA,KACA,MAAA2T,GAAAh/B,EAAAorB,GAAA7a,GAEA,IAAAxO,GAAAi9B,EAAAh/B,EAAAqrB,EAAA,EACA,OAAAD,GAAA4T,EAAAj9B,EAAAqpB,GAAA7a,IAAAxO,GASAgmB,EAAAnM,eAAA,WACA,GAAAhe,KAAA6Y,KAAAmF,eACA,MAAAhe,MAAA6Y,KAAAmF,kBAmBAmM,EAAA5L,iBAAA,SAAAxX,GACA,MAAAwX,GAAAve,KAAA+D,KAAA,KAAAgD,IAcAojB,EAAAmX,WAAA,SAAA9T,EAAAC,GACA,MAAAhZ,GAAArS,KAAAk/B,WAAAthC,KAAA+D,KAAA,KAAAypB,EAAAC,IAEAhZ,EAAA6F,EAAA0N,MAwCAvT,EAAArS,KAAAi1B,oBA4BA5iB,EAAArS,KAAAs2B,aAaAjkB,EAAArS,KAAAw2B,oBACAnkB,EAAA8sB,QAAA,SAAA1tB,EAAAG,EAAAF,EAAAG,GAgBA,IAfA,GAAAqL,GAAA,IACAtS,EAAAgb,EAAAnU,EAAAyL,EAAA,EAAAtL,EAAAsL,EAAA,EAAAA,KACAkiB,KACA3gC,EAAAiT,EAAA,GAAArS,eAAA,cAAAnB,GACA,OACAuT,EAAAC,EAAAxT,GAAAuT,EACAG,EAAAF,EAAAxT,GAAA0T,IAEa,SAAA1T,GACb,OACAuT,EAAAC,EAAAxT,GACA0T,EAAAC,EAAA3T,KAGAmhC,EAAA,EACAniB,GAAA,MAAAmiB,GAAA,CACA,OAAAnhC,GAAA,EAAA6M,EAAA2G,EAAA/M,OAA0CzG,EAAA6M,EAAQ7M,IAAA,CAClD,GAAA06B,GAAAn6B,EAAAP,EACA,IAAAs4B,EAAA5rB,EAAAguB,EAAAnnB,EAAAmnB,EAAAhnB,GAAA,CACAytB,IACAD,EAAAh8B,KAAAw1B,EACA,QAGAyG,IACAniB,GAAA,EACAtS,EAAAgb,EAAAnU,EAAAyL,EAAA,EAAAtL,EAAAsL,EAAA,EAAAA,MAGA,QAAAA,EAAA,CAGA,GACA7M,GADAM,EAAAsL,GAEA,KAAA/d,EAAA,EAAA6M,EAAAq0B,EAAAz6B,OAAuCzG,EAAA6M,EAAQ7M,IAAA,CAC/C,GAAAC,GAAAkU,EAAA1B,IAAAc,EAAAG,EAAAwtB,EAAAlhC,GAAAuT,EAAA2tB,EAAAlhC,GAAA0T,EACAjB,GAAAxS,IACAwS,EAAAxS,EACAihC,EAAAlhC,GAAAyS,IAAAxS,EACAkS,EAAA+uB,EAAAlhC,IAGA,MAAAmS,KAaAgC,EAAArS,KAAAy2B,kBAwBApkB,EAAArS,KAAAs/B,aAAAnG,EACA9mB,EAAArS,KAAAu/B,mBAAAhG,EAeAlnB,EAAArS,KAAAw/B,cAAAtF,EAmBA7nB,EAAArS,KAAAmX,QAAAgjB,EACA9nB,EAAArS,KAAAjB,IAAAkgC,EAWA5sB,EAAArS,KAAAy/B,WAAA/E,EAWAroB,EAAArS,KAAA2uB,WAAAmM,EAWAzoB,EAAArS,KAAA0/B,QAAAlK,EAUAnjB,EAAArS,KAAA8D,IAAA86B,EACAvsB,EAAArS,KAAAwE,WACA6N,EAAArS,KAAA4T,MAAAygB,IAgBAhiB,EAAAnQ,OAAA,SAAAmQ,EAAAK,EAAAE,EAAAvI,GACA,GAAAiP,GAAAnI,KAAAoI,IACAC,EAAArI,KAAAsI,IAGAkmB,EAAA,SAAApzB,GAKA,GAJA3O,KAAA2O,SACA3O,KAAAgiC,YACAhiC,KAAA+G,OAAA,EACA/G,KAAA4H,KAAA,MACA+G,EACA,OAAArO,GAAA,EAAA6M,EAAAwB,EAAA5H,OAA8CzG,EAAA6M,EAAQ7M,IACtDqO,EAAArO,KACAN,UAAA2O,MAAA5H,QAAA/G,KAAA2O,MAAA3O,KAAA2O,MAAA5H,QAAA4H,EAAArO,GACAN,KAAA+G,WAKAk7B,EAAAF,EAAAvgC,SAQAygC,GAAAz8B,KAAA,WAGA,OAFAE,GACAqN,EACAzS,EAAA,EAAA6M,EAAAa,UAAAjH,OAA8CzG,EAAA6M,EAAQ7M,KACtDoF,EAAAsI,UAAA1N,MAEAyS,EAAA/S,KAAA2O,MAAA5H,OACA/G,KAAA+S,GAAA/S,KAAA2O,MAAAoE,GAAArN,EACA1F,KAAA+G,SAGA,OAAA/G,OASAiiC,EAAA3E,IAAA,WAEA,MADAt9B,MAAA+G,cAAA/G,WAAA+G,UACA/G,KAAA2O,MAAA2uB,OAcA2E,EAAAnoB,QAAA,SAAA1I,EAAA8wB,GACA,OAAA5hC,GAAA,EAAA6M,EAAAnN,KAAA2O,MAAA5H,OAA+CzG,EAAA6M,EAAQ7M,IACvD,QAAA8Q,EAAA5Q,KAAA0hC,EAAAliC,KAAA2O,MAAArO,MACA,MAAAN,KAGA,OAAAA,OAuBAiiC,EAAAx+B,QAAA,SAAAiM,EAAAyb,EAAAvY,EAAAxB,GACA,kBAAAwB,MAAA7L,SACAqK,EAAAwB,EACAA,EAAAlP,EAAAwP,QAEAxD,YAAA+E,GAAA6F,EAAAoT,YACAtc,EAAA1B,EAAA0B,SACAwB,EAAAlD,EAAAkD,OACAuY,EAAAvY,EAAAb,IACArC,IAAA3L,KAEA,IAAA+J,GAAAE,SACA,IAAAyG,EAAAI,GAAAnF,EAAA,UAAA+E,EAAAI,GAAA/G,IAAA/G,OAAA,YACA,GAAAo7B,IAAA,CAEA,IAAAC,GACAC,EAAA,WACAD,EACApiC,KAAAgN,EAAAo1B,EAEAA,EAAApiC,KAAAgN,GAGAs1B,EAAA,EACAzvB,EAAA7S,KACAuiC,EAAAnxB,GAAA,aACAkxB,GAAAzvB,EAAA9L,QACAqK,EAAA5Q,KAAAR,MAGA,OAAAA,MAAA8Z,QAAA,SAAA5E,EAAA5U,GACAqN,EAAA4C,KAAA,oBAAA2E,EAAAlO,GAAAq7B,GACAF,EACAr0B,EAAAxN,IAAA4U,EAAAzR,QAAAgL,MAAAyG,EAAApH,EAAAxN,IAEA4U,EAAAzR,QAAAiM,EAAAyb,EAAAvY,EAAA2vB,MAYAN,EAAAp+B,OAAA,WACA,KAAA7D,KAAA+G,QACA/G,KAAAs9B,MAAAz5B,QAEA,OAAA7D,OAqBAiiC,EAAAv5B,KAAA,SAAA3E,EAAAI,EAAA6I,GACA,GAAAhL,KACA,sBAAAmC,GACAnE,KAAAgiC,SAAAj+B,GAAAI,MACS,CACT,GAAAq+B,GAAAx1B,GAAAjJ,CACA/D,MAAAgiC,SAAAj+B,GAAA,SAAAod,GACAnf,EAAAwgC,GAAArhB,EACAhd,EAAAJ,KAAA/B,IAGA,MAAAhC,OASAiiC,EAAAl+B,KAAA,SAAAK,GACA,GAAAq+B,KACA,QAAA7zB,KAAAxK,GACApE,KAAAgiC,SAAApzB,GACA5O,KAAAgiC,SAAApzB,GAAAxK,EAAAwK,IAEA6zB,EAAA7zB,GAAAxK,EAAAwK,EAGA,QAAAtO,GAAA,EAAA6M,EAAAnN,KAAA2O,MAAA5H,OAA+CzG,EAAA6M,EAAQ7M,IACvDN,KAAA2O,MAAArO,GAAAyD,KAAA0+B,EAEA,OAAAziC,OAQAiiC,EAAAlM,MAAA,WACA,KAAA/1B,KAAA+G,QACA/G,KAAAs9B,OAcA2E,EAAA/xB,OAAA,SAAAnH,EAAA0N,EAAAisB,GACA35B,IAAA,EAAA2S,EAAA1b,KAAA+G,OAAAgC,EAAA,GAAAA,EACA0N,EAAAiF,EAAA,EAAAE,EAAA5b,KAAA+G,OAAAgC,EAAA0N,GACA,IAGAnW,GAHAqiC,KACAC,KACA90B,IAEA,KAAAxN,EAAA,EAAmBA,EAAA0N,UAAAjH,OAAsBzG,IACzCwN,EAAAtI,KAAAwI,UAAA1N,GAEA,KAAAA,EAAA,EAAmBA,EAAAmW,EAAWnW,IAC9BsiC,EAAAp9B,KAAAxF,KAAA+I,EAAAzI,GAEA,MAAcA,EAAAN,KAAA+G,OAAAgC,EAAyBzI,IACvCqiC,EAAAn9B,KAAAxF,KAAA+I,EAAAzI,GAEA,IAAAuiC,GAAA/0B,EAAA/G,MACA,KAAAzG,EAAA,EAAmBA,EAAAuiC,EAAAF,EAAA57B,OAA0BzG,IAC7CN,KAAA2O,MAAA5F,EAAAzI,GAAAN,KAAA+I,EAAAzI,KAAAuiC,EAAA/0B,EAAAxN,GAAAqiC,EAAAriC,EAAAuiC,EAGA,KADAviC,EAAAN,KAAA2O,MAAA5H,OAAA/G,KAAA+G,QAAA0P,EAAAosB,EACA7iC,KAAAM,UACAN,MAAAM,IAEA,WAAAyhC,GAAAa,IAWAX,EAAAa,QAAA,SAAA5tB,GACA,OAAA5U,GAAA,EAAA6M,EAAAnN,KAAA+G,OAAyCzG,EAAA6M,EAAQ7M,IAAA,GAAAN,KAAAM,IAAA4U,EAEjD,MADAlV,MAAAkQ,OAAA5P,EAAA,IACA,CAEA,WAWA2hC,EAAA/V,YAAA,SAAAhX,GAEA,IADA,GAAA5U,GAAAN,KAAA2O,MAAA5H,OACAzG,KACAN,KAAA2O,MAAArO,GAAA4rB,YAAAhX,EAEA,OAAAlV,OASAiiC,EAAA1oB,QAAA,WAKA,OAJA1F,MACAG,KACA8C,KACAC,KACAzW,EAAAN,KAAA2O,MAAA5H,OAAuCzG,KAAK,IAAAN,KAAA2O,MAAArO,GAAAgqB,QAAA,CAC5C,GAAAtC,GAAAhoB,KAAA2O,MAAArO,GAAAiZ,SACA1F,GAAArO,KAAAwiB,EAAAnU,GACAG,EAAAxO,KAAAwiB,EAAAhU,GACA8C,EAAAtR,KAAAwiB,EAAAnU,EAAAmU,EAAAvP,OACA1B,EAAAvR,KAAAwiB,EAAAhU,EAAAgU,EAAAtP,QAMA,MAJA7E,GAAA+H,EAAAnN,MAAA,EAAAoF,GACAG,EAAA4H,EAAAnN,MAAA,EAAAuF,GACA8C,EAAA4E,EAAAjN,MAAA,EAAAqI,GACAC,EAAA2E,EAAAjN,MAAA,EAAAsI,IAEAlD,IACAG,IACA8C,KACAC,KACA0B,MAAA3B,EAAAjD,EACA6E,OAAA3B,EAAA/C,EACA6Y,GAAAhZ,GAAAiD,EAAAjD,GAAA,EACAiZ,GAAA9Y,GAAA+C,EAAA/C,GAAA,IAWAiuB,EAAAjsB,MAAA,SAAArU,GACAA,EAAA,GAAAogC,EACA,QAAAzhC,GAAA,EAAA6M,EAAAnN,KAAA2O,MAAA5H,OAA+CzG,EAAA6M,EAAQ7M,IACvDqB,EAAA6D,KAAAxF,KAAA2O,MAAArO,GAAA0V,QAEA,OAAArU,IAEAsgC,EAAAr7B,SAAA,WACA,oBAEAq7B,EAAAr6B,KAAA,MAQA6M,EAAAstB,MAYAttB,EAAA5B,IAAA,WACA,GAAAA,GAAA,GAAAkvB,EAIA,OAHA/zB,WAAAjH,QACA8L,EAAArN,KAAAiJ,MAAAoE,EAAApF,MAAAjM,UAAAuM,MAAAvN,KAAAwN,UAAA,IAEA6E,KAiBA4B,EAAAnQ,OAAA,SAAAmQ,EAAAK,EAAAE,EAAAvI,GAKA,QAAAs2B,GAAAr9B,GACA,GAAAnF,GAAAmF,EAAA,EACA,QAAAnF,EAAA0J,eACA,eAAA1J,EAAA,IACA,gBAAAA,EAAA,YACA,mBAAAmF,EAAAqB,QACAxG,EAAA,EAAAmF,EAAA,GAAAA,EAAA,KAEAnF,EAAA,EAEA,mBAAAmF,EAAAqB,QACAxG,EAAA,IAAAmF,EAAA,GAAAA,EAAA,IACa,GAAAA,EAAAqB,QACbxG,EAAA,MAEAA,EAAA,IAIA,QAAAyiC,GAAAhL,EAAAG,EAAA5e,GACAye,KAAA,GAAAvjB,GAAAuD,OACAmgB,KAAA,GAAA1jB,GAAAuD,OACAggB,EAAAvjB,EAAAsD,qBAAAigB,EAAA3M,yBACA8M,EAAA1jB,EAAAsD,qBAAAogB,EAAA9M,wBAMA,KALA,GAGA/jB,GAAAuH,EACAo0B,EAAAC,EAJAC,EAAA5vB,KAAAoI,IAAAqc,EAAAjxB,OAAAoxB,EAAApxB,QACAymB,KACAC,KACAntB,EAAA,EAEcA,EAAA6iC,EAAe7iC,IAAA,CAG7B,GAFA2iC,EAAAjL,EAAA13B,IAAAyiC,EAAA5K,EAAA73B,IACA4iC,EAAA/K,EAAA73B,IAAAyiC,EAAAE,GACAA,EAAA,IAAAC,EAAA,IACA,KAAAD,EAAA,GAAAh5B,gBAAAg5B,EAAA,IAAAC,EAAA,IAAAD,EAAA,IAAAC,EAAA,KACA,KAAAD,EAAA,GAAAh5B,gBAAAg5B,EAAA,IAAAC,EAAA,IAAAD,EAAA,IAAAC,EAAA,IACA,CACAlL,EAAAvjB,EAAA6F,EAAA1C,iBAAAogB,EAAAze,KACA4e,EAAA1jB,EAAA6F,EAAA1C,iBAAAugB,EAAA5e,KACAiU,IAAA,IAAAwK,EAAA7zB,EAAA6zB,EAAAhrB,EAAAgrB,EAAAt3B,EAAAs3B,EAAAr3B,EAAAq3B,EAAA/oB,EAAA+oB,EAAA7oB,IACAse,IAAA,IAAA0K,EAAAh0B,EAAAg0B,EAAAnrB,EAAAmrB,EAAAz3B,EAAAy3B,EAAAx3B,EAAAw3B,EAAAlpB,EAAAkpB,EAAAhpB,GACA,OAIA,IAFAqe,EAAAltB,MACAmtB,EAAAntB,MACAgH,EAAA,EAAAuH,EAAA0E,KAAAoI,IAAAsnB,EAAAl8B,OAAAm8B,EAAAn8B,QAA8DO,EAAAuH,EAAQvH,IACtEA,IAAA27B,KAAAzV,EAAAltB,GAAAgH,GAAA27B,EAAA37B,IACAA,IAAA47B,KAAAzV,EAAAntB,GAAAgH,GAAA47B,EAAA57B,IAGA,OACAkmB,KAAA4V,EAAA5V,GACAC,GAAA2V,EAAA3V,GACAte,EAAAkyB,EAAA7T,IAGA,QAAAgF,GAAA3gB,GACA,MAAAA,GAEA,QAAA4gB,GAAAC,GACA,gBAAA7gB,GACA,OAAAA,EAAAwO,QAAA,GAAAqS,GAGA,QAAA2Q,GAAAxxB,GACA,MAAAA,GAAAxL,KAAA,KAEA,QAAAi9B,GAAAviB,GACA,MAAAtM,GAAAsL,IAAAgB,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAEA,QAAAsgB,GAAAj/B,GACA,GAAA9B,GAAA6M,EAAA7F,EAAAuH,EAAAR,EAAAlK,EAAAyK,EAAA,EAAA5B,IACA,KAAA1M,EAAA,EAAA6M,EAAA/K,EAAA2E,OAAqCzG,EAAA6M,EAAQ7M,IAAA,CAG7C,IAFA+N,EAAA,IACAlK,GAAA,IAAA/B,EAAA9B,GAAA,QACAgH,EAAA,EAAAuH,EAAAzM,EAAA9B,GAAAyG,OAA4CO,EAAAuH,EAAQvH,IACpDnD,EAAAmD,GAAA,OAAAsH,IAAA,GAEAP,IAAAlK,EAAA,IACA6I,EAAA1M,GAAA+N,EAEA,MAAAk1B,UAAA,yCAAAv2B,EAAA,MAEA,QAAAo2B,GAAAhhC,GAEA,OADAiM,MACA/N,EAAA,EAAA6M,EAAA/K,EAAA2E,OAAyCzG,EAAA6M,EAAQ7M,IACjD,OAAAgH,GAAA,EAAAuH,EAAAzM,EAAA9B,GAAAyG,OAAgDO,EAAAuH,EAAQvH,IACxD+G,EAAA7I,KAAApD,EAAA9B,GAAAgH,GAGA,OAAA+G,GAEA,QAAAm1B,GAAAz7B,GACA,MAAA+N,UAAA/N,GAEA,QAAA07B,GAAAC,EAAAC,GACA,SAAAlvB,EAAAI,GAAA6uB,EAAA,WAAAjvB,EAAAI,GAAA8uB,EAAA,WAGAD,EAAA98B,YAAA+8B,EAAA/8B,WAtGA,GAAAmI,MACAikB,EAAA,YACA1lB,EAAAC,MACAwB,GAAAoX,OAAApX,EAAA6K,KAAA,SAqGA9E,EAAAtT,UAAA6sB,MAAA,SAAAztB,EAAAoM,GACA,MAAAW,GAAA,kBAAA3N,KAAAY,EAAAoM,GAAAE,gBAEAS,EAAA4B,GAAA,2BAAA3O,EAAAoM,GACA,GAAAgG,GAAAhB,EAAA7N,EAAAmJ,EAAAtN,KAAA+D,KAAAnD,IAAA,IACAsU,EAAAlV,IACA,cAAA+O,EAAAnO,GAGA,MAFAoS,GAAAyB,EAAA6L,MAAAnc,GACA6N,EAAAyC,EAAA6L,MAAAtT,IAEAwgB,MAAAxa,EAAAsM,EAAAtM,EAAAwH,EAAAxH,EAAAhG,EAAAgG,EAAA8M,SACA2N,IAAAzb,EAAAsN,EAAAtN,EAAAwI,EAAAxI,EAAAhF,EAAAgF,EAAA8N,SACA3Q,EAAAm0B,EAGA,eAAA1iC,EAGA,MAFAoS,GAAAhT,KAAA+D,KAAAnD,GAAAuwB,GAAAniB,MAAA,KAAA9I,IAAA09B,QACA5xB,EAAAhF,EAAAgC,MAAA,KAAA9I,IAAA09B,SAEApW,KAAAxa,EACAya,GAAAzb,EACA7C,EAAAk0B,EAGA,iBAAAziC,GAAA,qBAAAA,GAAA,oBAAAA,EAUA,MATA,gBAAAoM,KACAA,EAAAM,EAAAN,GAAAqC,QAAA,gBAAyClL,IAEzCA,EAAAnE,KAAAwpB,OAIAxc,EAHAyH,EAAA6F,EAAA6H,YAAApY,KAAAiD,GAGAyH,EAAA6F,EAAA1C,iBAAA5K,EAAAhN,KAAAuZ,WAFA9E,EAAA6F,EAAA1C,iBAAAnD,EAAA6F,EAAAhD,oBAAAtK,GAAAhN,KAAAuZ,WAIAypB,EAAA7+B,EAAA6I,EAAA,WACA,MAAAkI,GAAAqE,QAAA,IAGA,SAAA3Y,GAAA,QAAAA,EAEA,MADAoS,GAAAyB,EAAArS,KAAA0/B,QAAA39B,EAAA6I,IAEAwgB,KAAA4V,EAAApwB,EAAA,IACAya,GAAA2V,EAAApwB,EAAA,IACA7D,EAAAkyB,EAAAruB,EAAA,IAGA,cAAApS,EAGA,MAFAoS,GAAA1F,EAAAnJ,GAAA6K,MAAAyF,EAAA6F,EAAAzN,WACAmF,EAAA1E,EAAAN,GAAAgC,MAAAyF,EAAA6F,EAAAzN,YAEA2gB,KAAAxa,EACAya,GAAAzb,EACA7C,EAAA,SAAA0C,GAAmC,MAAAA,IAGnC,IAAA2xB,EAAAr/B,IAAAq/B,EAAAx2B,GACA,OACAwgB,KAAAjS,WAAApX,GACAspB,GAAAlS,WAAAvO,GACAmC,EAAAqjB,EAGA,IAAAa,GAAAlvB,EAAA6b,MAAAgT,GACA6Q,EAAAv2B,EAAAN,GAAAgT,MAAAgT,EACA,OAAAK,IAAAoQ,EAAApQ,EAAAwQ,IAEArW,KAAAjS,WAAApX,GACAspB,GAAAlS,WAAAvO,GACAmC,EAAAsjB,EAAAY,KAIA7F,KAAAxtB,KAAAmsB,KAAAvrB,GACA6sB,GAAAztB,KAAAmsB,KAAAvrB,EAAAoM,GACAmC,EAAAqjB,OAmBA/d,EAAAnQ,OAAA,SAAAmQ,EAAAK,EAAAE,EAAAvI,GAmTA,OAlTA0d,GAAArV,EAAAtT,UAEAsiC,GAAA,eAAAr3B,GAAAsI,KACA9H,GACA,sDACA,0DACA,eAEA82B,GACAC,UAAA,aACAC,UAAA,YACAC,QAAA,YAEAC,GAAA,SAAAnJ,EAAA9lB,GACA,GAAAtU,GAAA,KAAAo6B,EAAA,yBACAjmB,EAAAG,KAAA2D,KAAA3D,EAAA2D,KAAAoC,cAAAxO,EAAAsI,GACA,OAAAA,GAAAnU,IAAAmU,GAAAoT,gBAAA,0BAAAvnB,KAKAwjC,EAAA,WACA,MAAApkC,MAAAqkC,cAAAC,kBAKAC,EAAA,WACA,MAAAvkC,MAAAqkC,cAAAG,mBAEAC,EAAA,SAAA18B,EAAAH,EAAA88B,EAAAC,GACA,GAAAC,GAAAd,GAAAC,EAAAn8B,GAAAm8B,EAAAn8B,KACAuH,EAAA,SAAAF,GACA,GAAA41B,GAAAV,EAAA,IAAAQ,GACAG,EAAAX,EAAA,IAAAQ,EACA,IAAAb,GAAAC,EAAA,eAAAn8B,GACA,OAAAtH,GAAA,EAAA6M,EAAA8B,EAAA81B,eAAA91B,EAAA81B,cAAAh+B,OAAmFzG,EAAA6M,EAAQ7M,IAC3F,GAAA2O,EAAA81B,cAAAzkC,GAAAuoB,QAAA9gB,KAAAsa,SAAApT,EAAA81B,cAAAzkC,GAAAuoB,QAAA,CACA,GAAAmc,GAAA/1B,CACAA,KAAA81B,cAAAzkC,GACA2O,EAAAo1B,cAAAW,EACA/1B,EAAAq1B,eAAAF,EACAn1B,EAAAu1B,gBAAAD,CACA,OAIA,GAAA1wB,GAAA5E,EAAAg2B,QAAAH,EACA9wB,EAAA/E,EAAAi2B,QAAAL,CACA,OAAAH,GAAAlkC,KAAAmkC,EAAA11B,EAAA4E,EAAAG,GASA,OANApM,KAAAg9B,GACA78B,EAAAo9B,iBAAAv9B,EAAAuH,GAAA,GAGApH,EAAAo9B,iBAAAP,EAAAz1B,GAAA,GAEA,WAMA,MALAvH,KAAAg9B,GACA78B,EAAAq9B,oBAAAx9B,EAAAuH,GAAA,GAGApH,EAAAq9B,oBAAAR,EAAAz1B,GAAA,IACA,IAGAk2B,KACAC,EAAA,SAAAr2B,GAOA,IANA,GAIAs2B,GAJA1xB,EAAA5E,EAAAg2B,QACAjxB,EAAA/E,EAAAi2B,QACAL,EAAAV,EAAA,KACAW,EAAAX,EAAA,KAEA78B,EAAA+9B,EAAAt+B,OACAO,KAAA,CAEA,GADAi+B,EAAAF,EAAA/9B,GACAw8B,GAGA,IAFA,GACA0B,GADAllC,EAAA2O,EAAAw2B,SAAAx2B,EAAAw2B,QAAA1+B,OAEAzG,KAEA,GADAklC,EAAAv2B,EAAAw2B,QAAAnlC,GACAklC,EAAAE,YAAAH,EAAArwB,GAAAywB,MAAA3+B,IAAAu+B,EAAArwB,GAAA2D,KAAAwJ,SAAAmjB,EAAA3c,QAAA,CACAhV,EAAA2xB,EAAAP,QACAjxB,EAAAwxB,EAAAN,SACAj2B,EAAAo1B,cAAAp1B,EAAAo1B,cAAAp1B,GAAAq1B,gBACA,YAIAr1B,GAAAq1B,gBAEA,IAAAzrB,GAAA0sB,EAAArwB,GAAA2D,IAEAA,GAAAoT,YACApT,EAAA1Q,WACA0Q,EAAA0H,MAAA8D,OAOAxQ,IAAAixB,EACA9wB,GAAA6wB,EACAl3B,EAAA,kBAAA43B,EAAArwB,GAAAlO,GAAAu+B,EAAAK,YAAAL,EAAArwB,GAAArB,EAAA0xB,EAAArwB,GAAAywB,MAAA9xB,EAAAG,EAAAuxB,EAAArwB,GAAAywB,MAAA3xB,EAAAH,EAAAG,EAAA/E,KAGA42B,EAAA,SAAA52B,GACAwF,EAAAqxB,YAAAR,GAAAS,UAAAF,EAGA,KAFA,GACAN,GADAjlC,EAAA+kC,EAAAt+B,OAEAzG,KACAilC,EAAAF,EAAA/kC,GACAilC,EAAArwB,GAAAywB,SACAh4B,EAAA,iBAAA43B,EAAArwB,GAAAlO,GAAAu+B,EAAAS,WAAAT,EAAAU,aAAAV,EAAAK,YAAAL,EAAArwB,GAAAjG,GACAtB,EAAAoC,IAAA,eAAAw1B,EAAArwB,GAAAlO,GAEAq+B,OA4LA/kC,EAAA2M,EAAAlG,OAA+BzG,MAC/B,SAAA4lC,GACAzxB,EAAAyxB,GAAA/b,EAAA+b,GAAA,SAAAxB,EAAA92B,GACA,GAAA6G,EAAAI,GAAA6vB,EAAA,YACA1kC,KAAAiN,OAAAjN,KAAAiN,WACAjN,KAAAiN,OAAAzH,MACA5E,KAAAslC,EACA/2B,EAAAu1B,EACA10B,OAAAy0B,EAAAzkC,KAAA6Y,MAAA9V,SAAAmjC,EAAAxB,EAAA92B,GAAA5N,YAGA,QAAAM,GAAA,EAAA6M,EAAAnN,KAAAiN,OAAAlG,OAA4DzG,EAAA6M,EAAQ7M,IAAA,GAAAN,KAAAiN,OAAA3M,GAAAM,MAAAslC,EACpE,IACAlmC,KAAAiN,OAAA3M,GAAA6O,EAAA3O,KAAAR,MACyB,MAAAiP,IAGzB,MAAAjP,OAEAyU,EAAA,KAAAyxB,GACA/b,EAAA,KAAA+b,GAAA,SAAAxB,GAGA,IAFA,GAAAz3B,GAAAjN,KAAAiN,WACA1M,EAAA0M,EAAAlG,OACAxG,KAAA,GAAA0M,EAAA1M,GAAAK,MAAAslC,IACAj5B,EAAA1M,GAAA4O,GAAAu1B,OAIA,MAHAz3B,GAAA1M,GAAAyP,SACA/C,EAAAiD,OAAA3P,EAAA,IACA0M,EAAAlG,cAAA/G,MAAAiN,OACAjN,IAEA,OAAAA,QAESiN,EAAA3M,GAaT6pB,GAAAgc,MAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,MAAAvmC,MAAAwmC,UAAAJ,EAAAE,GAAAG,SAAAJ,EAAAE,GAAAD,IAWAnc,EAAAuc,QAAA,SAAAN,EAAAC,GACA,MAAArmC,MAAA2mC,YAAAP,GAAAQ,WAAAP,GAEA,IAAAQ,KAmCA1c,GAAAkb,KAAA,SAAAyB,EAAAC,EAAAC,EAAApB,EAAAK,EAAAD,GAYA,QAAAtzB,GAAAzD,EAAA4E,EAAAG,IACA/E,EAAAo1B,eAAAp1B,GAAAq1B,iBACApvB,EAAAywB,MAAA9xB,IACAqB,EAAAywB,MAAA3xB,IACAkB,EAAAywB,MAAA3+B,GAAAiI,EAAAy2B,YACAL,EAAAt+B,QAAA0N,EAAAwvB,UAAAqB,GAAApB,QAAA2B,GACAR,EAAA7/B,MAAuB0P,KAAA0wB,aAAAK,cAAAD,cACvBe,GAAAp5B,EAAA4B,GAAA,mBAAA2F,EAAAlO,GAAA+/B,GACAD,GAAAn5B,EAAA4B,GAAA,kBAAA2F,EAAAlO,GAAA8/B,GACAE,GAAAr5B,EAAA4B,GAAA,iBAAA2F,EAAAlO,GAAAggC,GACAr5B,EAAA,mBAAAuH,EAAAlO,GAAAi/B,GAAAL,GAAA1wB,EAAArB,EAAAG,EAAA/E,GAEA,QAAAg4B,GAAAh4B,EAAA4E,EAAAG,GACArG,EAAA,iBAAAuH,EAAAlO,GAAAkO,EAAAjG,EAAA4E,EAAAG,GAxBA,GAAAkB,GAAAlV,IACA,KAAAgO,UAAAjH,OAAA,CACA,GAAAmgC,EACA,OAAAhyB,GAAAmwB,KAAA,SAAA7nB,EAAAC,GACAzd,KAAA+D,MACAwW,UAAA2sB,KAAA,UAAA1pB,EAAAC,MAEa,WACbypB,EAAAlnC,KAAAua,YAAA2Q,QAsBA,MAJAvd,GAAA4B,GAAA,iBAAA2F,EAAAlO,GAAA0L,GACAwC,EAAAywB,SACAkB,EAAArhC,MAAwB0P,KAAAxC,QAAAu0B,SACxB/xB,EAAA8uB,UAAAiD,GACA/xB,GAkBAiV,EAAAgd,OAAA,WAEA,IADA,GAAA7mC,GAAAumC,EAAA9/B,OACAzG,KAAAumC,EAAAvmC,GAAA4U,IAAAlV,OACAA,KAAAonC,YAAAP,EAAAvmC,GAAA2mC,MACAJ,EAAA32B,OAAA5P,EAAA,GACAqN,EAAAqC,OAAA,eAAAhQ,KAAAgH,IACA2G,EAAAqC,OAAA,iBAAAhQ,KAAAgH,IAGA,QADA6/B,EAAA9/B,QAAA0N,EAAAqxB,YAAAR,GAAAS,UAAAF,GACA7lC,QAiBAyU,EAAAnQ,OAAA,SAAAmQ,EAAAK,EAAAE,EAAAvI,GACA,GACA46B,IADAvyB,EAAAtT,UACAwT,EAAAxT,WACA8lC,EAAA,kBACAh6B,EAAAC,OACA0H,EAAAR,EAAA6F,EAAArF,CACAR,GAAAjK,UAgBA68B,EAAA78B,OAAA,SAAA+8B,GACA,GAAArtB,GAAAla,IACA,QAAAka,EAAAtS,OACAsS,UAEA,IAAA/K,GAAAsF,EAAAsO,MAAAzV,EAAAi6B,IACAvgC,EAAAyN,EAAA6F,EAAAtT,KAGAwD,GAFA0P,EAAArB,KAAAqb,YACAha,EAAArB,KAAAsb,aACAlf,EAAA,UAOA,OANAA,GAAAzK,GACAxD,KACAwgC,YAAA,mBAEAh9B,EAAA1C,YAAAqH,EAAA0J,MACAqB,EAAAlB,KAAAlR,YAAA0C,GACA,GAAAsK,GAAAtK,IAGAmD,EAAA4B,GAAA,sCACA5B,EAAAhB,MACA,IAAAjL,GAAAuT,EAAAjV,KAAA6Y,KAAA,SACA,IAAAnX,EAAA,CACA,GAAAse,GAAA1S,EAAA5L,GAAAse,MAAAsnB,EACA,OAAAtnB,IAAAvL,EAAAvR,OAAA8c,EAAA,OAGArS,EAAA4B,GAAA,iCAAAnL,GACA,GAAAA,YAAA0Q,IAAA,UAAA1Q,EAAAwD,KAAA,CACA+F,EAAAhB,MACA,IAAA3F,GAAA5C,EAAAyU,KAAA7R,EACAA,KACAiO,EAAA7Q,EAAAyU,MAA+B7R,GAAA5C,EAAA4C,KAC/BA,EAAA5C,EAAA4C,IAEAiO,EAAAjV,KAAA6Y,MACArO,OAAAiK,EAAA8H,IAAAvV,KAGA5C,GAAA,QAAAA,IACAuJ,EAAAhB,OACA3M,KAAA6Y,KAAAjD,gBAAA,aAkBAnB,EAAAjK,OAAAi9B,KAAA,SAAA5zB,EAAAG,GACA,MAAAH,IACAA,EAAA,EAEA,IAAA6zB,GAAA,MAAA1zB,EAAAH,KAAAG,EACA,OAAAS,GAAA+H,OAAA,0CACAkrB,SAGAjzB,EAAAjK,OAAAi9B,KAAA7gC,SAAA,WACA,MAAA5G,SA6BAyU,EAAAjK,OAAAm9B,OAAA,SAAAnqB,EAAAC,EAAAgqB,EAAAnnB,EAAAR,GA0BA,MAzBA,OAAAA,IACA,MAAAQ,GACAR,EAAA2nB,EACAA,EAAA,EACAnnB,EAAA,SAEAR,EAAAQ,EACAA,EAAAmnB,EACAA,EAAA,IAGA,MAAAA,IACAA,EAAA,GAEA,MAAA3nB,IACAA,EAAA,GAEA,MAAAtC,IACAA,EAAA,EACAC,EAAA,GAEA,MAAAA,IACAA,EAAAD,GAEA8C,EAAA7L,EAAA6L,SACA7L,EAAA+H,OAAA,mVACA8D,QACA9C,KACAC,KACAgqB,OACA3nB,aAGArL,EAAAjK,OAAAm9B,OAAA/gC,SAAA,WACA,MAAA5G,SAWAyU,EAAAjK,OAAAo9B,UAAA,SAAAC,GAIA,MAHA,OAAAA,IACAA,EAAA,GAEApzB,EAAA+H,OAAA,qGACArY,EAAA,eAAA0jC,GACA76B,EAAA,eAAA66B,GACAnnC,EAAA,eAAAmnC,GACAlnC,EAAA,eAAAknC,GACA54B,EAAA,eAAA44B,GACA14B,EAAA,eAAA04B,GACArtB,EAAA,eAAAqtB,GACAx7B,EAAA,eAAAw7B,MAGApzB,EAAAjK,OAAAo9B,UAAAhhC,SAAA,WACA,MAAA5G,SAWAyU,EAAAjK,OAAAs9B,MAAA,SAAAD,GAIA,MAHA,OAAAA,IACAA,EAAA,GAEApzB,EAAA+H,OAAA,qGACArY,EAAA,aAAA0jC,GACA76B,EAAA,aAAA66B,GACAnnC,EAAA,aAAAmnC,GACAlnC,EAAA,aAAAknC,GACA54B,EAAA,aAAA44B,GACA14B,EAAA,aAAA04B,GACArtB,EAAA,aAAAqtB,GACAx7B,EAAA,aAAAw7B,GACAvnC,EAAA,aAAAunC,MAGApzB,EAAAjK,OAAAs9B,MAAAlhC,SAAA,WACA,MAAA5G,SAWAyU,EAAAjK,OAAAu9B,SAAA,SAAAF,GAIA,MAHA,OAAAA,IACAA,EAAA,GAEApzB,EAAA+H,OAAA,sDACAqrB,OAAA,EAAAA,KAGApzB,EAAAjK,OAAAu9B,SAAAnhC,SAAA,WACA,MAAA5G,SAWAyU,EAAAjK,OAAAw9B,UAAA,SAAArxB,GAEA,MADAA,MAAA,EACAlC,EAAA+H,OAAA,sDACA7F,WAGAlC,EAAAjK,OAAAw9B,UAAAphC,SAAA,WACA,MAAA5G,SAWAyU,EAAAjK,OAAA8N,OAAA,SAAAuvB,GAKA,MAJA,OAAAA,IACAA,EAAA,GAGApzB,EAAA+H,OAAA,uNACAqrB,SACAI,QAAA,EAAAJ,KAGApzB,EAAAjK,OAAA8N,OAAA1R,SAAA,WACA,MAAA5G,SAWAyU,EAAAjK,OAAA09B,WAAA,SAAAL,GAIA,MAHA,OAAAA,IACAA,EAAA,GAEApzB,EAAA+H,OAAA,0KACAqrB,YAGApzB,EAAAjK,OAAA09B,WAAAthC,SAAA,WACA,MAAA5G,SAWAyU,EAAAjK,OAAA29B,SAAA,SAAAN,GAIA,MAHA,OAAAA,IACAA,EAAA,GAEApzB,EAAA+H,OAAA,4OACAqrB,SACAI,QAAA,GAAAJ,EAAA,KAGApzB,EAAAjK,OAAA29B,SAAAvhC,SAAA,WACA,MAAA5G,WAiBAyU,EAAAnQ,OAAA,SAAAmQ,EAAAK,EAAAE,EAAAvI,EAAAoO,GACA,GAAAmN,GAAAvT,EAAA6F,EAAA0N,IACAnT,EAAAJ,EAAAI,GACAuzB,EAAA,sBACAxhC,EAAA,WACA,UAAA5G,KAAAwd,GAAA,IAAAxd,KAAAyd,GAgBA3I,GAAAtT,UAAA6mC,SAAA,SAAAnzB,EAAAozB,GACA,MAAAA,GAAAzzB,EAAAK,EAAA,YACAozB,EAAApzB,EACAA,EAAA,MAEAA,KAAAlV,KAAAka,KACA,IAAA0lB,GAAA1qB,EAAAqE,QAAArE,EAAAqE,UAAAyO,EAAA9S,GACA+C,EAAAjY,KAAAuZ,UACAlL,IAGA,QAFAi6B,OAAAtoB,MAAAooB,GACAE,MAAA,GAAAr+B,cAAA,KAEA,QACAoE,EAAAmP,GAAA,EACAnP,EAAAoP,GAAAmiB,EAAA5rB,EAAAiE,EAAAjE,CACA,MACA,SACA3F,EAAAmP,GAAA,EACAnP,EAAAoP,GAAAmiB,EAAA7oB,GAAAkB,EAAAlB,EACA,MACA,SACA1I,EAAAmP,GAAA,EACAnP,EAAAoP,GAAAmiB,EAAA9S,GAAA7U,EAAA6U,EACA,MACA,SACAze,EAAAmP,GAAAoiB,EAAA/rB,EAAAoE,EAAApE,EACAxF,EAAAoP,GAAA,CACA,MACA,SACApP,EAAAmP,GAAAoiB,EAAA9oB,GAAAmB,EAAAnB,GACAzI,EAAAoP,GAAA,CACA,MACA,SACApP,EAAAmP,GAAAoiB,EAAA/S,GAAA5U,EAAA4U,GACAxe,EAAAoP,GAAA,EAIA,MADApP,GAAAzH,WACAyH,GAgBAyG,EAAAtT,UAAA+mC,MAAA,SAAArzB,EAAAozB,GACA,MAAAtoC,MAAAua,UAAA,MAAAva,KAAAqoC,SAAAnzB,EAAAozB,OAiBA7zB,EAAAnQ,OAAA,SAAAmQ,EAAAK,EAAAE,EAAAvI,GAuCA,QAAA+7B,GAAAC,GACAA,IAAAz5B,MAAA,QACA,IAAAsR,GAAA,GAAA/S,QAAAk7B,EAAA,GAiBA,OAhBAnoB,GAAA,IAAAmoB,EAAA,GACAnoB,EAAA,KAAAmoB,EAAA,GACAnoB,EAAA,KAAAmoB,EAAA,GACAnoB,EAAA,KAAAmoB,EAAA,GACAnoB,EAAA,KAAAmoB,EAAA,GACAnoB,EAAA,KAAAmoB,EAAA,GACAnoB,EAAA,KAAAmoB,EAAA,GACAnoB,EAAA,KAAAmoB,EAAA,GACAnoB,EAAA,KAAAmoB,EAAA,GACAnoB,EAAA,KAAAmoB,EAAA,GACAA,EAAA,MACAnoB,EAAAooB,KAAAD,EAAA,IACAnoB,EAAAqoB,KAAAF,EAAA,IACAnoB,EAAAsoB,KAAAH,EAAA,IACAnoB,EAAAuoB,KAAAJ,EAAA,KAEAnoB,EA7BA7L,EAAAq0B,OASAr0B,EAAAs0B,QAsBAt0B,EAAAq0B,IAAAnpB,IAAA6oB,EA1DA,sGA2DA/zB,EAAAq0B,IAAAE,KAAAR,EA1DA,sGA2DA/zB,EAAAq0B,IAAAG,OAAAT,EA1DA,sGA2DA/zB,EAAAq0B,IAAAI,WAAAV,EA1DA,sGA2DA/zB,EAAAq0B,IAAAK,OAAAX,EA1DA,sGA2DA/zB,EAAAq0B,IAAAjpB,KAAA2oB,EA1DA,sGA2DA/zB,EAAAq0B,IAAAM,UAAAZ,EA1DA,sGA2DA/zB,EAAAq0B,IAAAO,KAAAb,EA1DA,sGA2DA/zB,EAAAq0B,IAAAQ,KAAAd,EA1DA,sGA2DA/zB,EAAAq0B,IAAAlpB,MAAA4oB,EA1DA,sGA2DA/zB,EAAAq0B,IAAAS,WAAAf,EA1DA,sGA2DA/zB,EAAAq0B,IAAAU,KAAAhB,EA1DA,sGA2DA/zB,EAAAq0B,IAAAW,OAAAjB,EA1DA,sGA2DA/zB,EAAAq0B,IAAAY,MAAAlB,EA1DA,sGA2DA/zB,EAAAq0B,IAAAa,OAAAnB,EA1DA,sGA2DA/zB,EAAAq0B,IAAAc,WAAApB,EA1DA,sGA2DA/zB,EAAAq0B,IAAAe,MAAArB,EA1DA,0EA2DA/zB,EAAAq0B,IAAAgB,KAAAtB,EA1DA,0EA2DA/zB,EAAAq0B,IAAAiB,SAAAvB,EA1DA,0EA2DA/zB,EAAAs0B,KAAAiB,UAAA,UACAv1B,EAAAs0B,KAAAkB,SAAA,UACAx1B,EAAAs0B,KAAAmB,UAAA,UACAz1B,EAAAs0B,KAAAY,OAAA,UACAl1B,EAAAs0B,KAAAoB,SAAA,UACA11B,EAAAs0B,KAAAqB,UAAA,UACA31B,EAAAs0B,KAAAsB,OAAA,UACA51B,EAAAs0B,KAAAuB,QAAA,UACA71B,EAAAs0B,KAAAwB,WAAA,UACA91B,EAAAs0B,KAAAyB,WAAA,UACA/1B,EAAAs0B,KAAA0B,SAAA,UACAh2B,EAAAs0B,KAAA2B,YAAA,UACAj2B,EAAAs0B,KAAA4B,SAAA,UACAl2B,EAAAs0B,KAAA6B,SAAA,UACAn2B,EAAAs0B,KAAA8B,OAAA,UACAp2B,EAAAs0B,KAAA+B,OAAA,UACAr2B,EAAAs0B,KAAAgC,WAAA,UACAt2B,EAAAs0B,KAAAiC,aAAA,UACAv2B,EAAAs0B,KAAAkC,SAAA,UACAx2B,EAAAs0B,KAAAmC,SAAA,UAUAz2B,EAAA02B,gBAAA,WACA,OAAA7qB,KAAA7L,GAAAq0B,IACAr0B,EAAAq0B,IAAArnC,eAAA6e,KACA3P,EAAA2P,GAAA7L,EAAAq0B,IAAAxoB,OAMA7L,MAECjU,KAAAmQ,SZuxBK,SAAUhR,EAAQD,GajtSxBC,EAAAD,QAAAO,GbutSM,SAAUN,EAAQiC,EAAqBzB,GAE7C,YcztSA,IAAAmL,GAAA,WAA0B,GAAA8/B,GAAAprC,KAAaqrC,EAAAD,EAAAE,eAA0BC,EAAAH,EAAAI,MAAAD,IAAAF,CAAwB,OAAAE,GAAA,OAAiBE,YAAA,iBAA2BF,EAAA,OAAYE,YAAA,UAAA9xB,OAA6B+xB,gBAAAN,EAAAnpC,QAA4BsN,IAAKo8B,MAAAP,EAAAzoC,mBAA6ByoC,EAAAQ,GAAA,KAAAL,EAAA,OAAwBE,YAAA,cAAwBF,EAAA,OAAYE,YAAA,cAAwBL,EAAAS,GAAA,GAAAT,EAAAQ,GAAA,KAAAL,EAAA,UAAqCE,YAAA,eAAAl8B,IAA+Bo8B,MAAAP,EAAAzoC,mBAA6ByoC,EAAAQ,GAAA,4CAAAR,EAAAQ,GAAA,KAAAL,EAAA,OAA2EE,YAAA,cAAA/7B,OAAiC1I,GAAA,iBAAoBukC,EAAA,OAAY77B,OAAO8F,MAAA,6BAAAiD,MAAA,OAAAC,OAAA,OAAAgU,QAAA,cAAAuH,oBAAA,UAA0HsX,EAAA,QAAa77B,OAAO/O,EAAA,2FAAuFyqC,EAAAQ,GAAA,KAAAL,EAAA,UAAiCE,YAAA,cAAAl8B,IAA8Bo8B,MAAAP,EAAAzoC,mBAA6ByoC,EAAAQ,GAAA,4CAAAR,EAAAQ,GAAA,KAAAL,EAAA,OAA2EE,YAAA,iBAA2BF,EAAA,OAAYE,YAAA,YAAsBF,EAAA,UAAeE,YAAA,mBAA6BL,EAAAS,GAAA,GAAAT,EAAAQ,GAAA,KAAAL,EAAA,OAAkCE,YAAA,kBAA4BF,EAAA,KAAUE,YAAA,eAAAl8B,IAA+Bo8B,MAAAP,EAAAzoC,mBAA6ByoC,EAAAQ,GAAA,uBAAAR,EAAAQ,GAAA,KAAAR,EAAAS,GAAA,GAAAT,EAAAQ,GAAA,KAAAR,EAAAS,GAAA,cAC7qCtgC,GAAA,WAAoC,GAAA6/B,GAAAprC,KAAaqrC,EAAAD,EAAAE,eAA0BC,EAAAH,EAAAI,MAAAD,IAAAF,CAAwB,OAAAE,GAAA,OAAiBE,YAAA,SAAmBF,EAAA,OAAYE,YAAA,cAAwBF,EAAA,KAAU77B,OAAO+a,KAAA,OAAY8gB,EAAA,KAAUE,YAAA,uBAAiCF,EAAA,QAAAH,EAAAQ,GAAA,iBAAAR,EAAAQ,GAAA,KAAAL,EAAA,KAAyD77B,OAAO+a,KAAA,OAAY8gB,EAAA,KAAUE,YAAA,uBAAiCF,EAAA,QAAAH,EAAAQ,GAAA,cAAAR,EAAAQ,GAAA,KAAAL,EAAA,KAAsD77B,OAAO+a,KAAA,OAAY8gB,EAAA,KAAUE,YAAA,2BAAqCF,EAAA,QAAAH,EAAAQ,GAAA,gBAAAR,EAAAQ,GAAA,KAAAL,EAAA,KAAwD77B,OAAO+a,KAAA,OAAY8gB,EAAA,KAAUE,YAAA,0BAAoCF,EAAA,QAAAH,EAAAQ,GAAA,gBAAAR,EAAAQ,GAAA,KAAAL,EAAA,KAAwD77B,OAAO+a,KAAA,OAAY8gB,EAAA,KAAUE,YAAA,4BAAsCF,EAAA,QAAAH,EAAAQ,GAAA,iBAAAR,EAAAQ,GAAA,KAAAL,EAAA,KAAyD77B,OAAO+a,KAAA,OAAY8gB,EAAA,KAAUE,YAAA,4BAAsCF,EAAA,QAAAH,EAAAQ,GAAA,yBAA4C,WAAc,GAAAR,GAAAprC,KAAaqrC,EAAAD,EAAAE,eAA0BC,EAAAH,EAAAI,MAAAD,IAAAF,CAAwB,OAAAE,GAAA,MAAAH,EAAAQ,GAAA,2DAAAL,EAAA,QAAAH,EAAAQ,GAAA,6CAAgJ,WAAc,GAAAR,GAAAprC,KAAaqrC,EAAAD,EAAAE,eAA0BC,EAAAH,EAAAI,MAAAD,IAAAF,CAAwB,OAAAE,GAAA,OAAiBE,YAAA,kBAA4BF,EAAA,KAAU77B,OAAO+a,KAAA,0CAA+C8gB,EAAA,QAAAA,EAAA,KAAqBE,YAAA,eAAyBL,EAAAQ,GAAA,+BAAuC,WAAc,GAAAR,GAAAprC,KAAaqrC,EAAAD,EAAAE,eAA0BC,EAAAH,EAAAI,MAAAD,IAAAF,CAAwB,OAAAE,GAAA,OAAiBE,YAAA,kBAA4BF,EAAA,KAAU77B,OAAO+a,KAAA,mDAAwD8gB,EAAA,QAAAA,EAAA,KAAqBE,YAAA,iBAA2BL,EAAAQ,GAAA,uBAC7lDE,GAAiBxgC,SAAAC,kBACjB3J,GAAA","file":"vueoffcanvas.dist.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"Vue\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"vueoffcanvas\", [\"Vue\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"vueoffcanvas\"] = factory(require(\"Vue\"));\n\telse\n\t\troot[\"vueoffcanvas\"] = factory(root[\"Vue\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_11__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"Vue\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"vueoffcanvas\", [\"Vue\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"vueoffcanvas\"] = factory(require(\"Vue\"));\n\telse\n\t\troot[\"vueoffcanvas\"] = factory(root[\"Vue\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_11__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/dist/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 2);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_snapsvg__ = __webpack_require__(10);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_snapsvg___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_snapsvg__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__event_bus_js__ = __webpack_require__(1);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'VueOffCanvas',\n  data: function data() {\n    return {\n      isOpen: false,\n      isAnimating: false,\n      morphEl: null,\n      s: null,\n      path: null,\n      initialPath: 'M-1,0h101c0,0-97.833,153.603-97.833,396.167C2.167,627.579,100,800,100,800H-1V0z',\n      pathOpen: 'M-1,0h101c0,0,0-1,0,395c0,404,0,405,0,405H-1V0z'\n    };\n  },\n  created: function created() {\n    // listen eventBus\n    __WEBPACK_IMPORTED_MODULE_1__event_bus_js__[\"a\" /* VueOffCanvasEventBus */].$on('open', this.openOffCanvas);\n    __WEBPACK_IMPORTED_MODULE_1__event_bus_js__[\"a\" /* VueOffCanvasEventBus */].$on('close', this.closeOffCanvas);\n    __WEBPACK_IMPORTED_MODULE_1__event_bus_js__[\"a\" /* VueOffCanvasEventBus */].$on('toggle', this.toggleOffCanvas);\n  },\n  beforeDestroy: function beforeDestroy() {\n    __WEBPACK_IMPORTED_MODULE_1__event_bus_js__[\"a\" /* VueOffCanvasEventBus */].$off('open');\n    __WEBPACK_IMPORTED_MODULE_1__event_bus_js__[\"a\" /* VueOffCanvasEventBus */].$off('close');\n    __WEBPACK_IMPORTED_MODULE_1__event_bus_js__[\"a\" /* VueOffCanvasEventBus */].$off('toggle');\n  },\n  mounted: function mounted() {\n    this.morphEl = document.getElementById('morph-shape');\n    this.s = __WEBPACK_IMPORTED_MODULE_0_snapsvg___default()(this.morphEl.querySelector('svg'));\n    this.path = this.s.select('path');\n  },\n\n  methods: {\n    startAnimate: function startAnimate() {\n      if (this.isAnimating) return false;\n      this.isAnimating = true;\n    },\n    toggleOffCanvas: function toggleOffCanvas() {\n      this.startAnimate();\n\n      if (this.isOpen) {\n        this.closeOffCanvas();\n      } else {\n        this.openOffCanvas();\n      }\n    },\n    openOffCanvas: function openOffCanvas() {\n      var _this = this;\n\n      this.startAnimate();\n      this.isOpen = true;\n\n      document.body.classList.add('show-menu');\n      this.path.animate({ 'path': this.pathOpen }, 400, mina.easeinout, function () {\n        _this.isAnimating = false;\n      });\n    },\n    closeOffCanvas: function closeOffCanvas() {\n      var _this2 = this;\n\n      this.startAnimate();\n      this.isOpen = false;\n\n      document.body.classList.remove('show-menu');\n      setTimeout(function () {\n        _this2.path.attr('d', _this2.initialPath);\n        _this2.isAnimating = false;\n      }, 300);\n    }\n  }\n});\n\n/***/ }),\n/* 1 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return VueOffCanvasEventBus; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_vue__);\n\nvar VueOffCanvasEventBus = new __WEBPACK_IMPORTED_MODULE_0_vue___default.a();\n\n/***/ }),\n/* 2 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__VueOffCanvas_vue__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__event_bus_js__ = __webpack_require__(1);\n\n\n\nvar plugin = {\n  install: function install(Vue) {\n    Vue.component(__WEBPACK_IMPORTED_MODULE_0__VueOffCanvas_vue__[\"a\" /* default */].name, __WEBPACK_IMPORTED_MODULE_0__VueOffCanvas_vue__[\"a\" /* default */]);\n    Vue.prototype.$VueOffCanvas = {\n      open: function open() {\n        __WEBPACK_IMPORTED_MODULE_1__event_bus_js__[\"a\" /* VueOffCanvasEventBus */].$emit('open');\n      },\n      close: function close() {\n        __WEBPACK_IMPORTED_MODULE_1__event_bus_js__[\"a\" /* VueOffCanvasEventBus */].$emit('close');\n      },\n      toggle: function toggle() {\n        __WEBPACK_IMPORTED_MODULE_1__event_bus_js__[\"a\" /* VueOffCanvasEventBus */].$emit('toggle');\n      }\n    };\n  }\n};\n\n__WEBPACK_IMPORTED_MODULE_0__VueOffCanvas_vue__[\"a\" /* default */].install = plugin.install;\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (__WEBPACK_IMPORTED_MODULE_0__VueOffCanvas_vue__[\"a\" /* default */]);\n\n/***/ }),\n/* 3 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_VueOffCanvas_vue__ = __webpack_require__(0);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_207b2120_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_VueOffCanvas_vue__ = __webpack_require__(12);\nfunction injectStyle (ssrContext) {\n  __webpack_require__(4)\n}\nvar normalizeComponent = __webpack_require__(9)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_VueOffCanvas_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_207b2120_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_VueOffCanvas_vue__[\"a\" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(5);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(7)(\"92cc895a\", content, true);\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(6)(false);\n// imports\n\n\n// module\nexports.push([module.i, \".container,.content-wrap,body,html{overflow:hidden;width:100%;height:100%}.container{background:#373a47}.menu-wrap a{color:#b8b7ad}.menu-wrap a:focus,.menu-wrap a:hover{color:#c94e50}.content-wrap{overflow-y:scroll;-webkit-overflow-scrolling:touch;-webkit-transition:-webkit-transform .3s;transition:-webkit-transform .3s;transition:transform .3s;transition:transform .3s,-webkit-transform .3s}.content{position:relative;background:#b4bad2}.overlay{position:absolute;top:0;left:0;z-index:10;width:100%;height:100%;background:rgba(0,0,0,.3);content:\\\"\\\";opacity:0;-webkit-transition:opacity .3s,-webkit-transform 0s .3s;transition:opacity .3s,-webkit-transform 0s .3s;transition:opacity .3s,transform 0s .3s;transition:opacity .3s,transform 0s .3s,-webkit-transform 0s .3s;-webkit-transform:translate3d(100%,0,0);transform:translate3d(100%,0,0)}.overlay--show{opacity:1;-webkit-transition:opacity .3s;transition:opacity .3s;-webkit-transform:translateZ(0);transform:translateZ(0)}.menu-button{position:fixed;z-index:1000;margin:1em;padding:0;width:2.5em;height:2.25em;border:none;text-indent:2.5em;font-size:1.5em;color:transparent;background:transparent}.menu-button:before{position:absolute;top:.5em;right:.5em;bottom:.5em;left:.5em;background:-webkit-gradient(linear,left top,left bottom,color-stop(20%,#373a47),color-stop(20%,transparent),color-stop(40%,transparent),color-stop(40%,#373a47),color-stop(60%,#373a47),color-stop(60%,transparent),color-stop(80%,transparent),color-stop(80%,#373a47));background:linear-gradient(#373a47 20%,transparent 0,transparent 40%,#373a47 0,#373a47 60%,transparent 0,transparent 80%,#373a47 0);content:\\\"\\\"}.menu-button:hover{opacity:.6}.close-button{width:16px;height:16px;position:absolute;right:1em;top:1em;overflow:hidden;text-indent:16px;border:none;z-index:1001;background:transparent;color:transparent}.close-button:after,.close-button:before{content:\\\"\\\";position:absolute;width:2px;height:100%;top:0;left:50%;background:#95a5a6}.close-button:before{-webkit-transform:rotate(45deg);transform:rotate(45deg)}.close-button:after{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}.menu-wrap{position:absolute;z-index:1001;width:300px;height:100%;font-size:1.15em;-webkit-transform:translate3d(-300px,0,0);transform:translate3d(-300px,0,0);-webkit-transition:-webkit-transform .3s;transition:-webkit-transform .3s;transition:transform .3s;transition:transform .3s,-webkit-transform .3s}.menu{background:#373a47;width:calc(100% - 120px);height:100%;padding:2em 1em}.icon-list{width:280px}.icon-list a{display:block;padding:.8em}.icon-list a i{opacity:.5}.icon-list a span{margin-left:10px;text-transform:uppercase;font-weight:700;letter-spacing:1px;font-size:.75em}.morph-shape{position:absolute;width:120px;height:100%;top:0;right:0;fill:#373a47;z-index:1000}.show-menu .menu-wrap{-webkit-transform:translateZ(0);transform:translateZ(0)}.show-menu .content-wrap{-webkit-transition-delay:.1s;transition-delay:.1s;-webkit-transform:translate3d(100px,0,0);transform:translate3d(100px,0,0)}\", \"\"]);\n\n// exports\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\n/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n  Modified by Evan You @yyx990803\n*/\n\nvar hasDocument = typeof document !== 'undefined'\n\nif (typeof DEBUG !== 'undefined' && DEBUG) {\n  if (!hasDocument) {\n    throw new Error(\n    'vue-style-loader cannot be used in a non-browser environment. ' +\n    \"Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\"\n  ) }\n}\n\nvar listToStyles = __webpack_require__(8)\n\n/*\ntype StyleObject = {\n  id: number;\n  parts: Array<StyleObjectPart>\n}\n\ntype StyleObjectPart = {\n  css: string;\n  media: string;\n  sourceMap: ?string\n}\n*/\n\nvar stylesInDom = {/*\n  [id: number]: {\n    id: number,\n    refs: number,\n    parts: Array<(obj?: StyleObjectPart) => void>\n  }\n*/}\n\nvar head = hasDocument && (document.head || document.getElementsByTagName('head')[0])\nvar singletonElement = null\nvar singletonCounter = 0\nvar isProduction = false\nvar noop = function () {}\n\n// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n// tags it will allow on a page\nvar isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase())\n\nmodule.exports = function (parentId, list, _isProduction) {\n  isProduction = _isProduction\n\n  var styles = listToStyles(parentId, list)\n  addStylesToDom(styles)\n\n  return function update (newList) {\n    var mayRemove = []\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i]\n      var domStyle = stylesInDom[item.id]\n      domStyle.refs--\n      mayRemove.push(domStyle)\n    }\n    if (newList) {\n      styles = listToStyles(parentId, newList)\n      addStylesToDom(styles)\n    } else {\n      styles = []\n    }\n    for (var i = 0; i < mayRemove.length; i++) {\n      var domStyle = mayRemove[i]\n      if (domStyle.refs === 0) {\n        for (var j = 0; j < domStyle.parts.length; j++) {\n          domStyle.parts[j]()\n        }\n        delete stylesInDom[domStyle.id]\n      }\n    }\n  }\n}\n\nfunction addStylesToDom (styles /* Array<StyleObject> */) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i]\n    var domStyle = stylesInDom[item.id]\n    if (domStyle) {\n      domStyle.refs++\n      for (var j = 0; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j])\n      }\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j]))\n      }\n      if (domStyle.parts.length > item.parts.length) {\n        domStyle.parts.length = item.parts.length\n      }\n    } else {\n      var parts = []\n      for (var j = 0; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j]))\n      }\n      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }\n    }\n  }\n}\n\nfunction createStyleElement () {\n  var styleElement = document.createElement('style')\n  styleElement.type = 'text/css'\n  head.appendChild(styleElement)\n  return styleElement\n}\n\nfunction addStyle (obj /* StyleObjectPart */) {\n  var update, remove\n  var styleElement = document.querySelector('style[data-vue-ssr-id~=\"' + obj.id + '\"]')\n\n  if (styleElement) {\n    if (isProduction) {\n      // has SSR styles and in production mode.\n      // simply do nothing.\n      return noop\n    } else {\n      // has SSR styles but in dev mode.\n      // for some reason Chrome can't handle source map in server-rendered\n      // style tags - source maps in <style> only works if the style tag is\n      // created and inserted dynamically. So we remove the server rendered\n      // styles and inject new ones.\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  if (isOldIE) {\n    // use singleton mode for IE9.\n    var styleIndex = singletonCounter++\n    styleElement = singletonElement || (singletonElement = createStyleElement())\n    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)\n    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)\n  } else {\n    // use multi-style-tag mode in all other cases\n    styleElement = createStyleElement()\n    update = applyToTag.bind(null, styleElement)\n    remove = function () {\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  update(obj)\n\n  return function updateStyle (newObj /* StyleObjectPart */) {\n    if (newObj) {\n      if (newObj.css === obj.css &&\n          newObj.media === obj.media &&\n          newObj.sourceMap === obj.sourceMap) {\n        return\n      }\n      update(obj = newObj)\n    } else {\n      remove()\n    }\n  }\n}\n\nvar replaceText = (function () {\n  var textStore = []\n\n  return function (index, replacement) {\n    textStore[index] = replacement\n    return textStore.filter(Boolean).join('\\n')\n  }\n})()\n\nfunction applyToSingletonTag (styleElement, index, remove, obj) {\n  var css = remove ? '' : obj.css\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = replaceText(index, css)\n  } else {\n    var cssNode = document.createTextNode(css)\n    var childNodes = styleElement.childNodes\n    if (childNodes[index]) styleElement.removeChild(childNodes[index])\n    if (childNodes.length) {\n      styleElement.insertBefore(cssNode, childNodes[index])\n    } else {\n      styleElement.appendChild(cssNode)\n    }\n  }\n}\n\nfunction applyToTag (styleElement, obj) {\n  var css = obj.css\n  var media = obj.media\n  var sourceMap = obj.sourceMap\n\n  if (media) {\n    styleElement.setAttribute('media', media)\n  }\n\n  if (sourceMap) {\n    // https://developer.chrome.com/devtools/docs/javascript-debugging\n    // this makes source maps inside style tags work properly in Chrome\n    css += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */'\n    // http://stackoverflow.com/a/26603875\n    css += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'\n  }\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild)\n    }\n    styleElement.appendChild(document.createTextNode(css))\n  }\n}\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports) {\n\n/**\n * Translates the list format produced by css-loader into something\n * easier to manipulate.\n */\nmodule.exports = function listToStyles (parentId, list) {\n  var styles = []\n  var newStyles = {}\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i]\n    var id = item[0]\n    var css = item[1]\n    var media = item[2]\n    var sourceMap = item[3]\n    var part = {\n      id: parentId + ':' + i,\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    }\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = { id: id, parts: [part] })\n    } else {\n      newStyles[id].parts.push(part)\n    }\n  }\n  return styles\n}\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports) {\n\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file.\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nmodule.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier /* server only */\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = injectStyles\n  }\n\n  if (hook) {\n    var functional = options.functional\n    var existing = functional\n      ? options.render\n      : options.beforeCreate\n\n    if (!functional) {\n      // inject component registration as beforeCreate hook\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    } else {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return existing(h, context)\n      }\n    }\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_0__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*** IMPORTS FROM imports-loader ***/\n(function() {\nvar fix = module.exports=0;\n\n// Snap.svg 0.5.0\n//\n// Copyright (c) 2013 – 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// build: 2017-02-06\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// ┌────────────────────────────────────────────────────────────┐ \\\\\n// │ Eve 0.5.0 - JavaScript Events Library                      │ \\\\\n// ├────────────────────────────────────────────────────────────┤ \\\\\n// │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\\\\n// └────────────────────────────────────────────────────────────┘ \\\\\n\n(function (glob) {\n    var version = \"0.5.0\",\n        has = \"hasOwnProperty\",\n        separator = /[\\.\\/]/,\n        comaseparator = /\\s*,\\s*/,\n        wildcard = \"*\",\n        fun = function () {},\n        numsort = function (a, b) {\n            return a - b;\n        },\n        current_event,\n        stop,\n        events = {n: {}},\n        firstDefined = function () {\n            for (var i = 0, ii = this.length; i < ii; i++) {\n                if (typeof this[i] != \"undefined\") {\n                    return this[i];\n                }\n            }\n        },\n        lastDefined = function () {\n            var i = this.length;\n            while (--i) {\n                if (typeof this[i] != \"undefined\") {\n                    return this[i];\n                }\n            }\n        },\n        objtos = Object.prototype.toString,\n        Str = String,\n        isArray = Array.isArray || function (ar) {\n            return ar instanceof Array || objtos.call(ar) == \"[object Array]\";\n        };\n    /*\\\n     * eve\n     [ method ]\n\n     * Fires event with given `name`, given scope and other parameters.\n\n     > Arguments\n\n     - name (string) name of the *event*, dot (`.`) or slash (`/`) separated\n     - scope (object) context for the event handlers\n     - varargs (...) the rest of arguments will be sent to event handlers\n\n     = (object) array of returned values from the listeners. Array has two methods `.firstDefined()` and `.lastDefined()` to get first or last not `undefined` value.\n    \\*/\n        eve = function (name, scope) {\n            var e = events,\n                oldstop = stop,\n                args = Array.prototype.slice.call(arguments, 2),\n                listeners = eve.listeners(name),\n                z = 0,\n                f = false,\n                l,\n                indexed = [],\n                queue = {},\n                out = [],\n                ce = current_event,\n                errors = [];\n            out.firstDefined = firstDefined;\n            out.lastDefined = lastDefined;\n            current_event = name;\n            stop = 0;\n            for (var i = 0, ii = listeners.length; i < ii; i++) if (\"zIndex\" in listeners[i]) {\n                indexed.push(listeners[i].zIndex);\n                if (listeners[i].zIndex < 0) {\n                    queue[listeners[i].zIndex] = listeners[i];\n                }\n            }\n            indexed.sort(numsort);\n            while (indexed[z] < 0) {\n                l = queue[indexed[z++]];\n                out.push(l.apply(scope, args));\n                if (stop) {\n                    stop = oldstop;\n                    return out;\n                }\n            }\n            for (i = 0; i < ii; i++) {\n                l = listeners[i];\n                if (\"zIndex\" in l) {\n                    if (l.zIndex == indexed[z]) {\n                        out.push(l.apply(scope, args));\n                        if (stop) {\n                            break;\n                        }\n                        do {\n                            z++;\n                            l = queue[indexed[z]];\n                            l && out.push(l.apply(scope, args));\n                            if (stop) {\n                                break;\n                            }\n                        } while (l)\n                    } else {\n                        queue[l.zIndex] = l;\n                    }\n                } else {\n                    out.push(l.apply(scope, args));\n                    if (stop) {\n                        break;\n                    }\n                }\n            }\n            stop = oldstop;\n            current_event = ce;\n            return out;\n        };\n        // Undocumented. Debug only.\n        eve._events = events;\n    /*\\\n     * eve.listeners\n     [ method ]\n\n     * Internal method which gives you array of all event handlers that will be triggered by the given `name`.\n\n     > Arguments\n\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated\n\n     = (array) array of event handlers\n    \\*/\n    eve.listeners = function (name) {\n        var names = isArray(name) ? name : name.split(separator),\n            e = events,\n            item,\n            items,\n            k,\n            i,\n            ii,\n            j,\n            jj,\n            nes,\n            es = [e],\n            out = [];\n        for (i = 0, ii = names.length; i < ii; i++) {\n            nes = [];\n            for (j = 0, jj = es.length; j < jj; j++) {\n                e = es[j].n;\n                items = [e[names[i]], e[wildcard]];\n                k = 2;\n                while (k--) {\n                    item = items[k];\n                    if (item) {\n                        nes.push(item);\n                        out = out.concat(item.f || []);\n                    }\n                }\n            }\n            es = nes;\n        }\n        return out;\n    };\n    /*\\\n     * eve.separator\n     [ method ]\n\n     * If for some reasons you don’t like default separators (`.` or `/`) you can specify yours\n     * here. Be aware that if you pass a string longer than one character it will be treated as\n     * a list of characters.\n\n     - separator (string) new separator. Empty string resets to default: `.` or `/`.\n    \\*/\n    eve.separator = function (sep) {\n        if (sep) {\n            sep = Str(sep).replace(/(?=[\\.\\^\\]\\[\\-])/g, \"\\\\\");\n            sep = \"[\" + sep + \"]\";\n            separator = new RegExp(sep);\n        } else {\n            separator = /[\\.\\/]/;\n        }\n    };\n    /*\\\n     * eve.on\n     [ method ]\n     **\n     * Binds given event handler with a given name. You can use wildcards “`*`” for the names:\n     | eve.on(\"*.under.*\", f);\n     | eve(\"mouse.under.floor\"); // triggers f\n     * Use @eve to trigger the listener.\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n     **\n     - name (array) if you don’t want to use separators, you can use array of strings\n     - f (function) event handler function\n     **\n     = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment. \n     > Example:\n     | eve.on(\"mouse\", eatIt)(2);\n     | eve.on(\"mouse\", scream);\n     | eve.on(\"mouse\", catchIt)(1);\n     * This will ensure that `catchIt` function will be called before `eatIt`.\n     *\n     * If you want to put your handler before non-indexed handlers, specify a negative value.\n     * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.\n    \\*/\n    eve.on = function (name, f) {\n        if (typeof f != \"function\") {\n            return function () {};\n        }\n        var names = isArray(name) ? (isArray(name[0]) ? name : [name]) : Str(name).split(comaseparator);\n        for (var i = 0, ii = names.length; i < ii; i++) {\n            (function (name) {\n                var names = isArray(name) ? name : Str(name).split(separator),\n                    e = events,\n                    exist;\n                for (var i = 0, ii = names.length; i < ii; i++) {\n                    e = e.n;\n                    e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = {n: {}});\n                }\n                e.f = e.f || [];\n                for (i = 0, ii = e.f.length; i < ii; i++) if (e.f[i] == f) {\n                    exist = true;\n                    break;\n                }\n                !exist && e.f.push(f);\n            }(names[i]));\n        }\n        return function (zIndex) {\n            if (+zIndex == +zIndex) {\n                f.zIndex = +zIndex;\n            }\n        };\n    };\n    /*\\\n     * eve.f\n     [ method ]\n     **\n     * Returns function that will fire given event with optional arguments.\n     * Arguments that will be passed to the result function will be also\n     * concated to the list of final arguments.\n     | el.onclick = eve.f(\"click\", 1, 2);\n     | eve.on(\"click\", function (a, b, c) {\n     |     console.log(a, b, c); // 1, 2, [event object]\n     | });\n     > Arguments\n     - event (string) event name\n     - varargs (…) and any other arguments\n     = (function) possible event handler function\n    \\*/\n    eve.f = function (event) {\n        var attrs = [].slice.call(arguments, 1);\n        return function () {\n            eve.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));\n        };\n    };\n    /*\\\n     * eve.stop\n     [ method ]\n     **\n     * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.\n    \\*/\n    eve.stop = function () {\n        stop = 1;\n    };\n    /*\\\n     * eve.nt\n     [ method ]\n     **\n     * Could be used inside event handler to figure out actual name of the event.\n     **\n     > Arguments\n     **\n     - subname (string) #optional subname of the event\n     **\n     = (string) name of the event, if `subname` is not specified\n     * or\n     = (boolean) `true`, if current event’s name contains `subname`\n    \\*/\n    eve.nt = function (subname) {\n        var cur = isArray(current_event) ? current_event.join(\".\") : current_event;\n        if (subname) {\n            return new RegExp(\"(?:\\\\.|\\\\/|^)\" + subname + \"(?:\\\\.|\\\\/|$)\").test(cur);\n        }\n        return cur;\n    };\n    /*\\\n     * eve.nts\n     [ method ]\n     **\n     * Could be used inside event handler to figure out actual name of the event.\n     **\n     **\n     = (array) names of the event\n    \\*/\n    eve.nts = function () {\n        return isArray(current_event) ? current_event : current_event.split(separator);\n    };\n    /*\\\n     * eve.off\n     [ method ]\n     **\n     * Removes given function from the list of event listeners assigned to given name.\n     * If no arguments specified all the events will be cleared.\n     **\n     > Arguments\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n    \\*/\n    /*\\\n     * eve.unbind\n     [ method ]\n     **\n     * See @eve.off\n    \\*/\n    eve.off = eve.unbind = function (name, f) {\n        if (!name) {\n            eve._events = events = {n: {}};\n            return;\n        }\n        var names = isArray(name) ? (isArray(name[0]) ? name : [name]) : Str(name).split(comaseparator);\n        if (names.length > 1) {\n            for (var i = 0, ii = names.length; i < ii; i++) {\n                eve.off(names[i], f);\n            }\n            return;\n        }\n        names = isArray(name) ? name : Str(name).split(separator);\n        var e,\n            key,\n            splice,\n            i, ii, j, jj,\n            cur = [events],\n            inodes = [];\n        for (i = 0, ii = names.length; i < ii; i++) {\n            for (j = 0; j < cur.length; j += splice.length - 2) {\n                splice = [j, 1];\n                e = cur[j].n;\n                if (names[i] != wildcard) {\n                    if (e[names[i]]) {\n                        splice.push(e[names[i]]);\n                        inodes.unshift({\n                            n: e,\n                            name: names[i]\n                        });\n                    }\n                } else {\n                    for (key in e) if (e[has](key)) {\n                        splice.push(e[key]);\n                        inodes.unshift({\n                            n: e,\n                            name: key\n                        });\n                    }\n                }\n                cur.splice.apply(cur, splice);\n            }\n        }\n        for (i = 0, ii = cur.length; i < ii; i++) {\n            e = cur[i];\n            while (e.n) {\n                if (f) {\n                    if (e.f) {\n                        for (j = 0, jj = e.f.length; j < jj; j++) if (e.f[j] == f) {\n                            e.f.splice(j, 1);\n                            break;\n                        }\n                        !e.f.length && delete e.f;\n                    }\n                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n                        var funcs = e.n[key].f;\n                        for (j = 0, jj = funcs.length; j < jj; j++) if (funcs[j] == f) {\n                            funcs.splice(j, 1);\n                            break;\n                        }\n                        !funcs.length && delete e.n[key].f;\n                    }\n                } else {\n                    delete e.f;\n                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n                        delete e.n[key].f;\n                    }\n                }\n                e = e.n;\n            }\n        }\n        // prune inner nodes in path\n        prune: for (i = 0, ii = inodes.length; i < ii; i++) {\n            e = inodes[i];\n            for (key in e.n[e.name].f) {\n                // not empty (has listeners)\n                continue prune;\n            }\n            for (key in e.n[e.name].n) {\n                // not empty (has children)\n                continue prune;\n            }\n            // is empty\n            delete e.n[e.name];\n        }\n    };\n    /*\\\n     * eve.once\n     [ method ]\n     **\n     * Binds given event handler with a given name to only run once then unbind itself.\n     | eve.once(\"login\", f);\n     | eve(\"login\"); // triggers f\n     | eve(\"login\"); // no listeners\n     * Use @eve to trigger the listener.\n     **\n     > Arguments\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n     **\n     = (function) same return function as @eve.on\n    \\*/\n    eve.once = function (name, f) {\n        var f2 = function () {\n            eve.off(name, f2);\n            return f.apply(this, arguments);\n        };\n        return eve.on(name, f2);\n    };\n    /*\\\n     * eve.version\n     [ property (string) ]\n     **\n     * Current version of the library.\n    \\*/\n    eve.version = version;\n    eve.toString = function () {\n        return \"You are running Eve \" + version;\n    };\n    (typeof module != \"undefined\" && module.exports) ? (module.exports = eve) : ( true ? (!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_LOCAL_MODULE_0__ = ((function() { return eve; }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)))) : (glob.eve = eve));\n})(this);\n\n(function (glob, factory) {\n    // AMD support\n    if (true) {\n        // Define as an anonymous module\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_0__], __WEBPACK_AMD_DEFINE_RESULT__ = (function (eve) {\n            return factory(glob, eve);\n        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if (typeof exports != \"undefined\") {\n        // Next for Node.js or CommonJS\n        var eve = require(\"eve\");\n        module.exports = factory(glob, eve);\n    } else {\n        // Browser globals (glob is window)\n        // Snap adds itself to window\n        factory(glob, glob.eve);\n    }\n}(window || this, function (window, eve) {\n\n// Copyright (c) 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar mina = (function (eve) {\n    var animations = {},\n    requestAnimFrame = window.requestAnimationFrame       ||\n                       window.webkitRequestAnimationFrame ||\n                       window.mozRequestAnimationFrame    ||\n                       window.oRequestAnimationFrame      ||\n                       window.msRequestAnimationFrame     ||\n                       function (callback) {\n                           setTimeout(callback, 16, new Date().getTime());\n                           return true;\n                       },\n    requestID,\n    isArray = Array.isArray || function (a) {\n        return a instanceof Array ||\n            Object.prototype.toString.call(a) == \"[object Array]\";\n    },\n    idgen = 0,\n    idprefix = \"M\" + (+new Date).toString(36),\n    ID = function () {\n        return idprefix + (idgen++).toString(36);\n    },\n    diff = function (a, b, A, B) {\n        if (isArray(a)) {\n            res = [];\n            for (var i = 0, ii = a.length; i < ii; i++) {\n                res[i] = diff(a[i], b, A[i], B);\n            }\n            return res;\n        }\n        var dif = (A - a) / (B - b);\n        return function (bb) {\n            return a + dif * (bb - b);\n        };\n    },\n    timer = Date.now || function () {\n        return +new Date;\n    },\n    sta = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.s;\n        }\n        var ds = a.s - val;\n        a.b += a.dur * ds;\n        a.B += a.dur * ds;\n        a.s = val;\n    },\n    speed = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.spd;\n        }\n        a.spd = val;\n    },\n    duration = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.dur;\n        }\n        a.s = a.s * val / a.dur;\n        a.dur = val;\n    },\n    stopit = function () {\n        var a = this;\n        delete animations[a.id];\n        a.update();\n        eve(\"mina.stop.\" + a.id, a);\n    },\n    pause = function () {\n        var a = this;\n        if (a.pdif) {\n            return;\n        }\n        delete animations[a.id];\n        a.update();\n        a.pdif = a.get() - a.b;\n    },\n    resume = function () {\n        var a = this;\n        if (!a.pdif) {\n            return;\n        }\n        a.b = a.get() - a.pdif;\n        delete a.pdif;\n        animations[a.id] = a;\n        frame();\n    },\n    update = function () {\n        var a = this,\n            res;\n        if (isArray(a.start)) {\n            res = [];\n            for (var j = 0, jj = a.start.length; j < jj; j++) {\n                res[j] = +a.start[j] +\n                    (a.end[j] - a.start[j]) * a.easing(a.s);\n            }\n        } else {\n            res = +a.start + (a.end - a.start) * a.easing(a.s);\n        }\n        a.set(res);\n    },\n    frame = function (timeStamp) {\n        // Manual invokation?\n        if (!timeStamp) {\n            // Frame loop stopped?\n            if (!requestID) {\n                // Start frame loop...\n                requestID = requestAnimFrame(frame);\n            }\n            return;\n        }\n        var len = 0;\n        for (var i in animations) if (animations.hasOwnProperty(i)) {\n            var a = animations[i],\n                b = a.get(),\n                res;\n            len++;\n            a.s = (b - a.b) / (a.dur / a.spd);\n            if (a.s >= 1) {\n                delete animations[i];\n                a.s = 1;\n                len--;\n                (function (a) {\n                    setTimeout(function () {\n                        eve(\"mina.finish.\" + a.id, a);\n                    });\n                }(a));\n            }\n            a.update();\n        }\n        requestID = len ? requestAnimFrame(frame) : false;\n    },\n    /*\\\n     * mina\n     [ method ]\n     **\n     * Generic animation of numbers\n     **\n     - a (number) start _slave_ number\n     - A (number) end _slave_ number\n     - b (number) start _master_ number (start time in general case)\n     - B (number) end _master_ number (end time in general case)\n     - get (function) getter of _master_ number (see @mina.time)\n     - set (function) setter of _slave_ number\n     - easing (function) #optional easing function, default is @mina.linear\n     = (object) animation descriptor\n     o {\n     o         id (string) animation id,\n     o         start (number) start _slave_ number,\n     o         end (number) end _slave_ number,\n     o         b (number) start _master_ number,\n     o         s (number) animation status (0..1),\n     o         dur (number) animation duration,\n     o         spd (number) animation speed,\n     o         get (function) getter of _master_ number (see @mina.time),\n     o         set (function) setter of _slave_ number,\n     o         easing (function) easing function, default is @mina.linear,\n     o         status (function) status getter/setter,\n     o         speed (function) speed getter/setter,\n     o         duration (function) duration getter/setter,\n     o         stop (function) animation stopper\n     o         pause (function) pauses the animation\n     o         resume (function) resumes the animation\n     o         update (function) calles setter with the right value of the animation\n     o }\n    \\*/\n    mina = function (a, A, b, B, get, set, easing) {\n        var anim = {\n            id: ID(),\n            start: a,\n            end: A,\n            b: b,\n            s: 0,\n            dur: B - b,\n            spd: 1,\n            get: get,\n            set: set,\n            easing: easing || mina.linear,\n            status: sta,\n            speed: speed,\n            duration: duration,\n            stop: stopit,\n            pause: pause,\n            resume: resume,\n            update: update\n        };\n        animations[anim.id] = anim;\n        var len = 0, i;\n        for (i in animations) if (animations.hasOwnProperty(i)) {\n            len++;\n            if (len == 2) {\n                break;\n            }\n        }\n        len == 1 && frame();\n        return anim;\n    };\n    /*\\\n     * mina.time\n     [ method ]\n     **\n     * Returns the current time. Equivalent to:\n     | function () {\n     |     return (new Date).getTime();\n     | }\n    \\*/\n    mina.time = timer;\n    /*\\\n     * mina.getById\n     [ method ]\n     **\n     * Returns an animation by its id\n     - id (string) animation's id\n     = (object) See @mina\n    \\*/\n    mina.getById = function (id) {\n        return animations[id] || null;\n    };\n\n    /*\\\n     * mina.linear\n     [ method ]\n     **\n     * Default linear easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.linear = function (n) {\n        return n;\n    };\n    /*\\\n     * mina.easeout\n     [ method ]\n     **\n     * Easeout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easeout = function (n) {\n        return Math.pow(n, 1.7);\n    };\n    /*\\\n     * mina.easein\n     [ method ]\n     **\n     * Easein easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easein = function (n) {\n        return Math.pow(n, .48);\n    };\n    /*\\\n     * mina.easeinout\n     [ method ]\n     **\n     * Easeinout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easeinout = function (n) {\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        var q = .48 - n / 1.04,\n            Q = Math.sqrt(.1734 + q * q),\n            x = Q - q,\n            X = Math.pow(Math.abs(x), 1 / 3) * (x < 0 ? -1 : 1),\n            y = -Q - q,\n            Y = Math.pow(Math.abs(y), 1 / 3) * (y < 0 ? -1 : 1),\n            t = X + Y + .5;\n        return (1 - t) * 3 * t * t + t * t * t;\n    };\n    /*\\\n     * mina.backin\n     [ method ]\n     **\n     * Backin easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.backin = function (n) {\n        if (n == 1) {\n            return 1;\n        }\n        var s = 1.70158;\n        return n * n * ((s + 1) * n - s);\n    };\n    /*\\\n     * mina.backout\n     [ method ]\n     **\n     * Backout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.backout = function (n) {\n        if (n == 0) {\n            return 0;\n        }\n        n = n - 1;\n        var s = 1.70158;\n        return n * n * ((s + 1) * n + s) + 1;\n    };\n    /*\\\n     * mina.elastic\n     [ method ]\n     **\n     * Elastic easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.elastic = function (n) {\n        if (n == !!n) {\n            return n;\n        }\n        return Math.pow(2, -10 * n) * Math.sin((n - .075) *\n            (2 * Math.PI) / .3) + 1;\n    };\n    /*\\\n     * mina.bounce\n     [ method ]\n     **\n     * Bounce easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.bounce = function (n) {\n        var s = 7.5625,\n            p = 2.75,\n            l;\n        if (n < 1 / p) {\n            l = s * n * n;\n        } else {\n            if (n < 2 / p) {\n                n -= 1.5 / p;\n                l = s * n * n + .75;\n            } else {\n                if (n < 2.5 / p) {\n                    n -= 2.25 / p;\n                    l = s * n * n + .9375;\n                } else {\n                    n -= 2.625 / p;\n                    l = s * n * n + .984375;\n                }\n            }\n        }\n        return l;\n    };\n    window.mina = mina;\n    return mina;\n})(typeof eve == \"undefined\" ? function () {} : eve);\n\n// Copyright (c) 2013 - 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar Snap = (function(root) {\nSnap.version = \"0.5.1\";\n/*\\\n * Snap\n [ method ]\n **\n * Creates a drawing surface or wraps existing SVG element.\n **\n - width (number|string) width of surface\n - height (number|string) height of surface\n * or\n - DOM (SVGElement) element to be wrapped into Snap structure\n * or\n - array (array) array of elements (will return set of elements)\n * or\n - query (string) CSS query selector\n = (object) @Element\n\\*/\nfunction Snap(w, h) {\n    if (w) {\n        if (w.nodeType) {\n            return wrap(w);\n        }\n        if (is(w, \"array\") && Snap.set) {\n            return Snap.set.apply(Snap, w);\n        }\n        if (w instanceof Element) {\n            return w;\n        }\n        if (h == null) {\n            // try {\n                w = glob.doc.querySelector(String(w));\n                return wrap(w);\n            // } catch (e) {\n                // return null;\n            // }\n        }\n    }\n    w = w == null ? \"100%\" : w;\n    h = h == null ? \"100%\" : h;\n    return new Paper(w, h);\n}\nSnap.toString = function () {\n    return \"Snap v\" + this.version;\n};\nSnap._ = {};\nvar glob = {\n    win: root.window,\n    doc: root.window.document\n};\nSnap._.glob = glob;\nvar has = \"hasOwnProperty\",\n    Str = String,\n    toFloat = parseFloat,\n    toInt = parseInt,\n    math = Math,\n    mmax = math.max,\n    mmin = math.min,\n    abs = math.abs,\n    pow = math.pow,\n    PI = math.PI,\n    round = math.round,\n    E = \"\",\n    S = \" \",\n    objectToString = Object.prototype.toString,\n    ISURL = /^url\\(['\"]?([^\\)]+?)['\"]?\\)$/i,\n    colourRegExp = /^\\s*((#[a-f\\d]{6})|(#[a-f\\d]{3})|rgba?\\(\\s*([\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?(?:\\s*,\\s*[\\d\\.]+%?)?)\\s*\\)|hsba?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\)|hsla?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\))\\s*$/i,\n    bezierrg = /^(?:cubic-)?bezier\\(([^,]+),([^,]+),([^,]+),([^\\)]+)\\)/,\n    separator = Snap._.separator = /[,\\s]+/,\n    whitespace = /[\\s]/g,\n    commaSpaces = /[\\s]*,[\\s]*/,\n    hsrg = {hs: 1, rg: 1},\n    pathCommand = /([a-z])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n    tCommand = /([rstm])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n    pathValues = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[\\s]*,?[\\s]*/ig,\n    idgen = 0,\n    idprefix = \"S\" + (+new Date).toString(36),\n    ID = function (el) {\n        return (el && el.type ? el.type : E) + idprefix + (idgen++).toString(36);\n    },\n    xlink = \"http://www.w3.org/1999/xlink\",\n    xmlns = \"http://www.w3.org/2000/svg\",\n    hub = {},\n    /*\\\n     * Snap.url\n     [ method ]\n     **\n     * Wraps path into `\"url('<path>')\"`.\n     - value (string) path\n     = (string) wrapped path\n    \\*/\n    URL = Snap.url = function (url) {\n        return \"url('#\" + url + \"')\";\n    };\n\nfunction $(el, attr) {\n    if (attr) {\n        if (el == \"#text\") {\n            el = glob.doc.createTextNode(attr.text || attr[\"#text\"] || \"\");\n        }\n        if (el == \"#comment\") {\n            el = glob.doc.createComment(attr.text || attr[\"#text\"] || \"\");\n        }\n        if (typeof el == \"string\") {\n            el = $(el);\n        }\n        if (typeof attr == \"string\") {\n            if (el.nodeType == 1) {\n                if (attr.substring(0, 6) == \"xlink:\") {\n                    return el.getAttributeNS(xlink, attr.substring(6));\n                }\n                if (attr.substring(0, 4) == \"xml:\") {\n                    return el.getAttributeNS(xmlns, attr.substring(4));\n                }\n                return el.getAttribute(attr);\n            } else if (attr == \"text\") {\n                return el.nodeValue;\n            } else {\n                return null;\n            }\n        }\n        if (el.nodeType == 1) {\n            for (var key in attr) if (attr[has](key)) {\n                var val = Str(attr[key]);\n                if (val) {\n                    if (key.substring(0, 6) == \"xlink:\") {\n                        el.setAttributeNS(xlink, key.substring(6), val);\n                    } else if (key.substring(0, 4) == \"xml:\") {\n                        el.setAttributeNS(xmlns, key.substring(4), val);\n                    } else {\n                        el.setAttribute(key, val);\n                    }\n                } else {\n                    el.removeAttribute(key);\n                }\n            }\n        } else if (\"text\" in attr) {\n            el.nodeValue = attr.text;\n        }\n    } else {\n        el = glob.doc.createElementNS(xmlns, el);\n    }\n    return el;\n}\nSnap._.$ = $;\nSnap._.id = ID;\nfunction getAttrs(el) {\n    var attrs = el.attributes,\n        name,\n        out = {};\n    for (var i = 0; i < attrs.length; i++) {\n        if (attrs[i].namespaceURI == xlink) {\n            name = \"xlink:\";\n        } else {\n            name = \"\";\n        }\n        name += attrs[i].name;\n        out[name] = attrs[i].textContent;\n    }\n    return out;\n}\nfunction is(o, type) {\n    type = Str.prototype.toLowerCase.call(type);\n    if (type == \"finite\") {\n        return isFinite(o);\n    }\n    if (type == \"array\" &&\n        (o instanceof Array || Array.isArray && Array.isArray(o))) {\n        return true;\n    }\n    return  type == \"null\" && o === null ||\n            type == typeof o && o !== null ||\n            type == \"object\" && o === Object(o) ||\n            objectToString.call(o).slice(8, -1).toLowerCase() == type;\n}\n/*\\\n * Snap.format\n [ method ]\n **\n * Replaces construction of type `{<name>}` to the corresponding argument\n **\n - token (string) string to format\n - json (object) object which properties are used as a replacement\n = (string) formatted string\n > Usage\n | // this draws a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n | paper.path(Snap.format(\"M{x},{y}h{dim.width}v{dim.height}h{dim['negative width']}z\", {\n |     x: 10,\n |     y: 20,\n |     dim: {\n |         width: 40,\n |         height: 50,\n |         \"negative width\": -40\n |     }\n | }));\n\\*/\nSnap.format = (function () {\n    var tokenRegex = /\\{([^\\}]+)\\}/g,\n        objNotationRegex = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[('|\")(.+?)\\2\\])(\\(\\))?/g, // matches .xxxxx or [\"xxxxx\"] to run over object properties\n        replacer = function (all, key, obj) {\n            var res = obj;\n            key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {\n                name = name || quotedName;\n                if (res) {\n                    if (name in res) {\n                        res = res[name];\n                    }\n                    typeof res == \"function\" && isFunc && (res = res());\n                }\n            });\n            res = (res == null || res == obj ? all : res) + \"\";\n            return res;\n        };\n    return function (str, obj) {\n        return Str(str).replace(tokenRegex, function (all, key) {\n            return replacer(all, key, obj);\n        });\n    };\n})();\nfunction clone(obj) {\n    if (typeof obj == \"function\" || Object(obj) !== obj) {\n        return obj;\n    }\n    var res = new obj.constructor;\n    for (var key in obj) if (obj[has](key)) {\n        res[key] = clone(obj[key]);\n    }\n    return res;\n}\nSnap._.clone = clone;\nfunction repush(array, item) {\n    for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {\n        return array.push(array.splice(i, 1)[0]);\n    }\n}\nfunction cacher(f, scope, postprocessor) {\n    function newf() {\n        var arg = Array.prototype.slice.call(arguments, 0),\n            args = arg.join(\"\\u2400\"),\n            cache = newf.cache = newf.cache || {},\n            count = newf.count = newf.count || [];\n        if (cache[has](args)) {\n            repush(count, args);\n            return postprocessor ? postprocessor(cache[args]) : cache[args];\n        }\n        count.length >= 1e3 && delete cache[count.shift()];\n        count.push(args);\n        cache[args] = f.apply(scope, arg);\n        return postprocessor ? postprocessor(cache[args]) : cache[args];\n    }\n    return newf;\n}\nSnap._.cacher = cacher;\nfunction angle(x1, y1, x2, y2, x3, y3) {\n    if (x3 == null) {\n        var x = x1 - x2,\n            y = y1 - y2;\n        if (!x && !y) {\n            return 0;\n        }\n        return (180 + math.atan2(-y, -x) * 180 / PI + 360) % 360;\n    } else {\n        return angle(x1, y1, x3, y3) - angle(x2, y2, x3, y3);\n    }\n}\nfunction rad(deg) {\n    return deg % 360 * PI / 180;\n}\nfunction deg(rad) {\n    return rad * 180 / PI % 360;\n}\nfunction x_y() {\n    return this.x + S + this.y;\n}\nfunction x_y_w_h() {\n    return this.x + S + this.y + S + this.width + \" \\xd7 \" + this.height;\n}\n\n/*\\\n * Snap.rad\n [ method ]\n **\n * Transform angle to radians\n - deg (number) angle in degrees\n = (number) angle in radians\n\\*/\nSnap.rad = rad;\n/*\\\n * Snap.deg\n [ method ]\n **\n * Transform angle to degrees\n - rad (number) angle in radians\n = (number) angle in degrees\n\\*/\nSnap.deg = deg;\n/*\\\n * Snap.sin\n [ method ]\n **\n * Equivalent to `Math.sin()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) sin\n\\*/\nSnap.sin = function (angle) {\n    return math.sin(Snap.rad(angle));\n};\n/*\\\n * Snap.tan\n [ method ]\n **\n * Equivalent to `Math.tan()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) tan\n\\*/\nSnap.tan = function (angle) {\n    return math.tan(Snap.rad(angle));\n};\n/*\\\n * Snap.cos\n [ method ]\n **\n * Equivalent to `Math.cos()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) cos\n\\*/\nSnap.cos = function (angle) {\n    return math.cos(Snap.rad(angle));\n};\n/*\\\n * Snap.asin\n [ method ]\n **\n * Equivalent to `Math.asin()` only works with degrees, not radians.\n - num (number) value\n = (number) asin in degrees\n\\*/\nSnap.asin = function (num) {\n    return Snap.deg(math.asin(num));\n};\n/*\\\n * Snap.acos\n [ method ]\n **\n * Equivalent to `Math.acos()` only works with degrees, not radians.\n - num (number) value\n = (number) acos in degrees\n\\*/\nSnap.acos = function (num) {\n    return Snap.deg(math.acos(num));\n};\n/*\\\n * Snap.atan\n [ method ]\n **\n * Equivalent to `Math.atan()` only works with degrees, not radians.\n - num (number) value\n = (number) atan in degrees\n\\*/\nSnap.atan = function (num) {\n    return Snap.deg(math.atan(num));\n};\n/*\\\n * Snap.atan2\n [ method ]\n **\n * Equivalent to `Math.atan2()` only works with degrees, not radians.\n - num (number) value\n = (number) atan2 in degrees\n\\*/\nSnap.atan2 = function (num) {\n    return Snap.deg(math.atan2(num));\n};\n/*\\\n * Snap.angle\n [ method ]\n **\n * Returns an angle between two or three points\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n - x3 (number) #optional x coord of third point\n - y3 (number) #optional y coord of third point\n = (number) angle in degrees\n\\*/\nSnap.angle = angle;\n/*\\\n * Snap.len\n [ method ]\n **\n * Returns distance between two points\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n = (number) distance\n\\*/\nSnap.len = function (x1, y1, x2, y2) {\n    return Math.sqrt(Snap.len2(x1, y1, x2, y2));\n};\n/*\\\n * Snap.len2\n [ method ]\n **\n * Returns squared distance between two points\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n = (number) distance\n\\*/\nSnap.len2 = function (x1, y1, x2, y2) {\n    return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n};\n/*\\\n * Snap.closestPoint\n [ method ]\n **\n * Returns closest point to a given one on a given path.\n - path (Element) path element\n - x (number) x coord of a point\n - y (number) y coord of a point\n = (object) in format\n {\n    x (number) x coord of the point on the path\n    y (number) y coord of the point on the path\n    length (number) length of the path to the point\n    distance (number) distance from the given point to the path\n }\n\\*/\n// Copied from http://bl.ocks.org/mbostock/8027637\nSnap.closestPoint = function (path, x, y) {\n    function distance2(p) {\n        var dx = p.x - x,\n            dy = p.y - y;\n        return dx * dx + dy * dy;\n    }\n    var pathNode = path.node,\n        pathLength = pathNode.getTotalLength(),\n        precision = pathLength / pathNode.pathSegList.numberOfItems * .125,\n        best,\n        bestLength,\n        bestDistance = Infinity;\n\n    // linear scan for coarse approximation\n    for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {\n        if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {\n            best = scan;\n            bestLength = scanLength;\n            bestDistance = scanDistance;\n        }\n    }\n\n    // binary search for precise estimate\n    precision *= .5;\n    while (precision > .5) {\n        var before,\n            after,\n            beforeLength,\n            afterLength,\n            beforeDistance,\n            afterDistance;\n        if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {\n            best = before;\n            bestLength = beforeLength;\n            bestDistance = beforeDistance;\n        } else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {\n            best = after;\n            bestLength = afterLength;\n            bestDistance = afterDistance;\n        } else {\n            precision *= .5;\n        }\n    }\n\n    best = {\n        x: best.x,\n        y: best.y,\n        length: bestLength,\n        distance: Math.sqrt(bestDistance)\n    };\n    return best;\n}\n/*\\\n * Snap.is\n [ method ]\n **\n * Handy replacement for the `typeof` operator\n - o (…) any object or primitive\n - type (string) name of the type, e.g., `string`, `function`, `number`, etc.\n = (boolean) `true` if given value is of given type\n\\*/\nSnap.is = is;\n/*\\\n * Snap.snapTo\n [ method ]\n **\n * Snaps given value to given grid\n - values (array|number) given array of values or step of the grid\n - value (number) value to adjust\n - tolerance (number) #optional maximum distance to the target value that would trigger the snap. Default is `10`.\n = (number) adjusted value\n\\*/\nSnap.snapTo = function (values, value, tolerance) {\n    tolerance = is(tolerance, \"finite\") ? tolerance : 10;\n    if (is(values, \"array\")) {\n        var i = values.length;\n        while (i--) if (abs(values[i] - value) <= tolerance) {\n            return values[i];\n        }\n    } else {\n        values = +values;\n        var rem = value % values;\n        if (rem < tolerance) {\n            return value - rem;\n        }\n        if (rem > values - tolerance) {\n            return value - rem + values;\n        }\n    }\n    return value;\n};\n// Colour\n/*\\\n * Snap.getRGB\n [ method ]\n **\n * Parses color string as RGB object\n - color (string) color string in one of the following formats:\n # <ul>\n #     <li>Color name (<code>red</code>, <code>green</code>, <code>cornflowerblue</code>, etc)</li>\n #     <li>#••• — shortened HTML color: (<code>#000</code>, <code>#fc0</code>, etc.)</li>\n #     <li>#•••••• — full length HTML color: (<code>#000000</code>, <code>#bd2300</code>)</li>\n #     <li>rgb(•••, •••, •••) — red, green and blue channels values: (<code>rgb(200,&nbsp;100,&nbsp;0)</code>)</li>\n #     <li>rgba(•••, •••, •••, •••) — also with opacity</li>\n #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>)</li>\n #     <li>rgba(•••%, •••%, •••%, •••%) — also with opacity</li>\n #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>)</li>\n #     <li>hsba(•••, •••, •••, •••) — also with opacity</li>\n #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n #     <li>hsba(•••%, •••%, •••%, •••%) — also with opacity</li>\n #     <li>hsl(•••, •••, •••) — hue, saturation and luminosity values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;0.5)</code>)</li>\n #     <li>hsla(•••, •••, •••, •••) — also with opacity</li>\n #     <li>hsl(•••%, •••%, •••%) — same as above, but in %</li>\n #     <li>hsla(•••%, •••%, •••%, •••%) — also with opacity</li>\n # </ul>\n * Note that `%` can be used any time: `rgb(20%, 255, 50%)`.\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••,\n o     error (boolean) true if string can't be parsed\n o }\n\\*/\nSnap.getRGB = cacher(function (colour) {\n    if (!colour || !!((colour = Str(colour)).indexOf(\"-\") + 1)) {\n        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n    }\n    if (colour == \"none\") {\n        return {r: -1, g: -1, b: -1, hex: \"none\", toString: rgbtoString};\n    }\n    !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == \"#\") && (colour = toHex(colour));\n    if (!colour) {\n        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n    }\n    var res,\n        red,\n        green,\n        blue,\n        opacity,\n        t,\n        values,\n        rgb = colour.match(colourRegExp);\n    if (rgb) {\n        if (rgb[2]) {\n            blue = toInt(rgb[2].substring(5), 16);\n            green = toInt(rgb[2].substring(3, 5), 16);\n            red = toInt(rgb[2].substring(1, 3), 16);\n        }\n        if (rgb[3]) {\n            blue = toInt((t = rgb[3].charAt(3)) + t, 16);\n            green = toInt((t = rgb[3].charAt(2)) + t, 16);\n            red = toInt((t = rgb[3].charAt(1)) + t, 16);\n        }\n        if (rgb[4]) {\n            values = rgb[4].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red *= 2.55);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green *= 2.55);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue *= 2.55);\n            rgb[1].toLowerCase().slice(0, 4) == \"rgba\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n        }\n        if (rgb[5]) {\n            values = rgb[5].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red /= 100);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green /= 100);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue /= 100);\n            (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n            rgb[1].toLowerCase().slice(0, 4) == \"hsba\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n            return Snap.hsb2rgb(red, green, blue, opacity);\n        }\n        if (rgb[6]) {\n            values = rgb[6].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red /= 100);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green /= 100);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue /= 100);\n            (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n            rgb[1].toLowerCase().slice(0, 4) == \"hsla\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n            return Snap.hsl2rgb(red, green, blue, opacity);\n        }\n        red = mmin(math.round(red), 255);\n        green = mmin(math.round(green), 255);\n        blue = mmin(math.round(blue), 255);\n        opacity = mmin(mmax(opacity, 0), 1);\n        rgb = {r: red, g: green, b: blue, toString: rgbtoString};\n        rgb.hex = \"#\" + (16777216 | blue | green << 8 | red << 16).toString(16).slice(1);\n        rgb.opacity = is(opacity, \"finite\") ? opacity : 1;\n        return rgb;\n    }\n    return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n}, Snap);\n/*\\\n * Snap.hsb\n [ method ]\n **\n * Converts HSB values to a hex representation of the color\n - h (number) hue\n - s (number) saturation\n - b (number) value or brightness\n = (string) hex representation of the color\n\\*/\nSnap.hsb = cacher(function (h, s, b) {\n    return Snap.hsb2rgb(h, s, b).hex;\n});\n/*\\\n * Snap.hsl\n [ method ]\n **\n * Converts HSL values to a hex representation of the color\n - h (number) hue\n - s (number) saturation\n - l (number) luminosity\n = (string) hex representation of the color\n\\*/\nSnap.hsl = cacher(function (h, s, l) {\n    return Snap.hsl2rgb(h, s, l).hex;\n});\n/*\\\n * Snap.rgb\n [ method ]\n **\n * Converts RGB values to a hex representation of the color\n - r (number) red\n - g (number) green\n - b (number) blue\n = (string) hex representation of the color\n\\*/\nSnap.rgb = cacher(function (r, g, b, o) {\n    if (is(o, \"finite\")) {\n        var round = math.round;\n        return \"rgba(\" + [round(r), round(g), round(b), +o.toFixed(2)] + \")\";\n    }\n    return \"#\" + (16777216 | b | g << 8 | r << 16).toString(16).slice(1);\n});\nvar toHex = function (color) {\n    var i = glob.doc.getElementsByTagName(\"head\")[0] || glob.doc.getElementsByTagName(\"svg\")[0],\n        red = \"rgb(255, 0, 0)\";\n    toHex = cacher(function (color) {\n        if (color.toLowerCase() == \"red\") {\n            return red;\n        }\n        i.style.color = red;\n        i.style.color = color;\n        var out = glob.doc.defaultView.getComputedStyle(i, E).getPropertyValue(\"color\");\n        return out == red ? null : out;\n    });\n    return toHex(color);\n},\nhsbtoString = function () {\n    return \"hsb(\" + [this.h, this.s, this.b] + \")\";\n},\nhsltoString = function () {\n    return \"hsl(\" + [this.h, this.s, this.l] + \")\";\n},\nrgbtoString = function () {\n    return this.opacity == 1 || this.opacity == null ?\n            this.hex :\n            \"rgba(\" + [this.r, this.g, this.b, this.opacity] + \")\";\n},\nprepareRGB = function (r, g, b) {\n    if (g == null && is(r, \"object\") && \"r\" in r && \"g\" in r && \"b\" in r) {\n        b = r.b;\n        g = r.g;\n        r = r.r;\n    }\n    if (g == null && is(r, string)) {\n        var clr = Snap.getRGB(r);\n        r = clr.r;\n        g = clr.g;\n        b = clr.b;\n    }\n    if (r > 1 || g > 1 || b > 1) {\n        r /= 255;\n        g /= 255;\n        b /= 255;\n    }\n\n    return [r, g, b];\n},\npackageRGB = function (r, g, b, o) {\n    r = math.round(r * 255);\n    g = math.round(g * 255);\n    b = math.round(b * 255);\n    var rgb = {\n        r: r,\n        g: g,\n        b: b,\n        opacity: is(o, \"finite\") ? o : 1,\n        hex: Snap.rgb(r, g, b),\n        toString: rgbtoString\n    };\n    is(o, \"finite\") && (rgb.opacity = o);\n    return rgb;\n};\n/*\\\n * Snap.color\n [ method ]\n **\n * Parses the color string and returns an object featuring the color's component values\n - clr (string) color string in one of the supported formats (see @Snap.getRGB)\n = (object) Combined RGB/HSB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••,\n o     error (boolean) `true` if string can't be parsed,\n o     h (number) hue,\n o     s (number) saturation,\n o     v (number) value (brightness),\n o     l (number) lightness\n o }\n\\*/\nSnap.color = function (clr) {\n    var rgb;\n    if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"b\" in clr) {\n        rgb = Snap.hsb2rgb(clr);\n        clr.r = rgb.r;\n        clr.g = rgb.g;\n        clr.b = rgb.b;\n        clr.opacity = 1;\n        clr.hex = rgb.hex;\n    } else if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"l\" in clr) {\n        rgb = Snap.hsl2rgb(clr);\n        clr.r = rgb.r;\n        clr.g = rgb.g;\n        clr.b = rgb.b;\n        clr.opacity = 1;\n        clr.hex = rgb.hex;\n    } else {\n        if (is(clr, \"string\")) {\n            clr = Snap.getRGB(clr);\n        }\n        if (is(clr, \"object\") && \"r\" in clr && \"g\" in clr && \"b\" in clr && !(\"error\" in clr)) {\n            rgb = Snap.rgb2hsl(clr);\n            clr.h = rgb.h;\n            clr.s = rgb.s;\n            clr.l = rgb.l;\n            rgb = Snap.rgb2hsb(clr);\n            clr.v = rgb.b;\n        } else {\n            clr = {hex: \"none\"};\n            clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;\n            clr.error = 1;\n        }\n    }\n    clr.toString = rgbtoString;\n    return clr;\n};\n/*\\\n * Snap.hsb2rgb\n [ method ]\n **\n * Converts HSB values to an RGB object\n - h (number) hue\n - s (number) saturation\n - v (number) value or brightness\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••\n o }\n\\*/\nSnap.hsb2rgb = function (h, s, v, o) {\n    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"b\" in h) {\n        v = h.b;\n        s = h.s;\n        o = h.o;\n        h = h.h;\n    }\n    h *= 360;\n    var R, G, B, X, C;\n    h = h % 360 / 60;\n    C = v * s;\n    X = C * (1 - abs(h % 2 - 1));\n    R = G = B = v - C;\n\n    h = ~~h;\n    R += [C, X, 0, 0, X, C][h];\n    G += [X, C, C, X, 0, 0][h];\n    B += [0, 0, X, C, C, X][h];\n    return packageRGB(R, G, B, o);\n};\n/*\\\n * Snap.hsl2rgb\n [ method ]\n **\n * Converts HSL values to an RGB object\n - h (number) hue\n - s (number) saturation\n - l (number) luminosity\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••\n o }\n\\*/\nSnap.hsl2rgb = function (h, s, l, o) {\n    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"l\" in h) {\n        l = h.l;\n        s = h.s;\n        h = h.h;\n    }\n    if (h > 1 || s > 1 || l > 1) {\n        h /= 360;\n        s /= 100;\n        l /= 100;\n    }\n    h *= 360;\n    var R, G, B, X, C;\n    h = h % 360 / 60;\n    C = 2 * s * (l < .5 ? l : 1 - l);\n    X = C * (1 - abs(h % 2 - 1));\n    R = G = B = l - C / 2;\n\n    h = ~~h;\n    R += [C, X, 0, 0, X, C][h];\n    G += [X, C, C, X, 0, 0][h];\n    B += [0, 0, X, C, C, X][h];\n    return packageRGB(R, G, B, o);\n};\n/*\\\n * Snap.rgb2hsb\n [ method ]\n **\n * Converts RGB values to an HSB object\n - r (number) red\n - g (number) green\n - b (number) blue\n = (object) HSB object in the following format:\n o {\n o     h (number) hue,\n o     s (number) saturation,\n o     b (number) brightness\n o }\n\\*/\nSnap.rgb2hsb = function (r, g, b) {\n    b = prepareRGB(r, g, b);\n    r = b[0];\n    g = b[1];\n    b = b[2];\n\n    var H, S, V, C;\n    V = mmax(r, g, b);\n    C = V - mmin(r, g, b);\n    H = C == 0 ? null :\n        V == r ? (g - b) / C :\n        V == g ? (b - r) / C + 2 :\n                 (r - g) / C + 4;\n    H = (H + 360) % 6 * 60 / 360;\n    S = C == 0 ? 0 : C / V;\n    return {h: H, s: S, b: V, toString: hsbtoString};\n};\n/*\\\n * Snap.rgb2hsl\n [ method ]\n **\n * Converts RGB values to an HSL object\n - r (number) red\n - g (number) green\n - b (number) blue\n = (object) HSL object in the following format:\n o {\n o     h (number) hue,\n o     s (number) saturation,\n o     l (number) luminosity\n o }\n\\*/\nSnap.rgb2hsl = function (r, g, b) {\n    b = prepareRGB(r, g, b);\n    r = b[0];\n    g = b[1];\n    b = b[2];\n\n    var H, S, L, M, m, C;\n    M = mmax(r, g, b);\n    m = mmin(r, g, b);\n    C = M - m;\n    H = C == 0 ? null :\n        M == r ? (g - b) / C :\n        M == g ? (b - r) / C + 2 :\n                 (r - g) / C + 4;\n    H = (H + 360) % 6 * 60 / 360;\n    L = (M + m) / 2;\n    S = C == 0 ? 0 :\n         L < .5 ? C / (2 * L) :\n                  C / (2 - 2 * L);\n    return {h: H, s: S, l: L, toString: hsltoString};\n};\n\n// Transformations\n/*\\\n * Snap.parsePathString\n [ method ]\n **\n * Utility method\n **\n * Parses given path string into an array of arrays of path segments\n - pathString (string|array) path string or array of segments (in the last case it is returned straight away)\n = (array) array of segments\n\\*/\nSnap.parsePathString = function (pathString) {\n    if (!pathString) {\n        return null;\n    }\n    var pth = Snap.path(pathString);\n    if (pth.arr) {\n        return Snap.path.clone(pth.arr);\n    }\n\n    var paramCounts = {a: 7, c: 6, o: 2, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, u: 3, z: 0},\n        data = [];\n    if (is(pathString, \"array\") && is(pathString[0], \"array\")) { // rough assumption\n        data = Snap.path.clone(pathString);\n    }\n    if (!data.length) {\n        Str(pathString).replace(pathCommand, function (a, b, c) {\n            var params = [],\n                name = b.toLowerCase();\n            c.replace(pathValues, function (a, b) {\n                b && params.push(+b);\n            });\n            if (name == \"m\" && params.length > 2) {\n                data.push([b].concat(params.splice(0, 2)));\n                name = \"l\";\n                b = b == \"m\" ? \"l\" : \"L\";\n            }\n            if (name == \"o\" && params.length == 1) {\n                data.push([b, params[0]]);\n            }\n            if (name == \"r\") {\n                data.push([b].concat(params));\n            } else while (params.length >= paramCounts[name]) {\n                data.push([b].concat(params.splice(0, paramCounts[name])));\n                if (!paramCounts[name]) {\n                    break;\n                }\n            }\n        });\n    }\n    data.toString = Snap.path.toString;\n    pth.arr = Snap.path.clone(data);\n    return data;\n};\n/*\\\n * Snap.parseTransformString\n [ method ]\n **\n * Utility method\n **\n * Parses given transform string into an array of transformations\n - TString (string|array) transform string or array of transformations (in the last case it is returned straight away)\n = (array) array of transformations\n\\*/\nvar parseTransformString = Snap.parseTransformString = function (TString) {\n    if (!TString) {\n        return null;\n    }\n    var paramCounts = {r: 3, s: 4, t: 2, m: 6},\n        data = [];\n    if (is(TString, \"array\") && is(TString[0], \"array\")) { // rough assumption\n        data = Snap.path.clone(TString);\n    }\n    if (!data.length) {\n        Str(TString).replace(tCommand, function (a, b, c) {\n            var params = [],\n                name = b.toLowerCase();\n            c.replace(pathValues, function (a, b) {\n                b && params.push(+b);\n            });\n            data.push([b].concat(params));\n        });\n    }\n    data.toString = Snap.path.toString;\n    return data;\n};\nfunction svgTransform2string(tstr) {\n    var res = [];\n    tstr = tstr.replace(/(?:^|\\s)(\\w+)\\(([^)]+)\\)/g, function (all, name, params) {\n        params = params.split(/\\s*,\\s*|\\s+/);\n        if (name == \"rotate\" && params.length == 1) {\n            params.push(0, 0);\n        }\n        if (name == \"scale\") {\n            if (params.length > 2) {\n                params = params.slice(0, 2);\n            } else if (params.length == 2) {\n                params.push(0, 0);\n            }\n            if (params.length == 1) {\n                params.push(params[0], 0, 0);\n            }\n        }\n        if (name == \"skewX\") {\n            res.push([\"m\", 1, 0, math.tan(rad(params[0])), 1, 0, 0]);\n        } else if (name == \"skewY\") {\n            res.push([\"m\", 1, math.tan(rad(params[0])), 0, 1, 0, 0]);\n        } else {\n            res.push([name.charAt(0)].concat(params));\n        }\n        return all;\n    });\n    return res;\n}\nSnap._.svgTransform2string = svgTransform2string;\nSnap._.rgTransform = /^[a-z][\\s]*-?\\.?\\d/i;\nfunction transform2matrix(tstr, bbox) {\n    var tdata = parseTransformString(tstr),\n        m = new Snap.Matrix;\n    if (tdata) {\n        for (var i = 0, ii = tdata.length; i < ii; i++) {\n            var t = tdata[i],\n                tlen = t.length,\n                command = Str(t[0]).toLowerCase(),\n                absolute = t[0] != command,\n                inver = absolute ? m.invert() : 0,\n                x1,\n                y1,\n                x2,\n                y2,\n                bb;\n            if (command == \"t\" && tlen == 2){\n                m.translate(t[1], 0);\n            } else if (command == \"t\" && tlen == 3) {\n                if (absolute) {\n                    x1 = inver.x(0, 0);\n                    y1 = inver.y(0, 0);\n                    x2 = inver.x(t[1], t[2]);\n                    y2 = inver.y(t[1], t[2]);\n                    m.translate(x2 - x1, y2 - y1);\n                } else {\n                    m.translate(t[1], t[2]);\n                }\n            } else if (command == \"r\") {\n                if (tlen == 2) {\n                    bb = bb || bbox;\n                    m.rotate(t[1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n                } else if (tlen == 4) {\n                    if (absolute) {\n                        x2 = inver.x(t[2], t[3]);\n                        y2 = inver.y(t[2], t[3]);\n                        m.rotate(t[1], x2, y2);\n                    } else {\n                        m.rotate(t[1], t[2], t[3]);\n                    }\n                }\n            } else if (command == \"s\") {\n                if (tlen == 2 || tlen == 3) {\n                    bb = bb || bbox;\n                    m.scale(t[1], t[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n                } else if (tlen == 4) {\n                    if (absolute) {\n                        x2 = inver.x(t[2], t[3]);\n                        y2 = inver.y(t[2], t[3]);\n                        m.scale(t[1], t[1], x2, y2);\n                    } else {\n                        m.scale(t[1], t[1], t[2], t[3]);\n                    }\n                } else if (tlen == 5) {\n                    if (absolute) {\n                        x2 = inver.x(t[3], t[4]);\n                        y2 = inver.y(t[3], t[4]);\n                        m.scale(t[1], t[2], x2, y2);\n                    } else {\n                        m.scale(t[1], t[2], t[3], t[4]);\n                    }\n                }\n            } else if (command == \"m\" && tlen == 7) {\n                m.add(t[1], t[2], t[3], t[4], t[5], t[6]);\n            }\n        }\n    }\n    return m;\n}\nSnap._.transform2matrix = transform2matrix;\nSnap._unit2px = unit2px;\nvar contains = glob.doc.contains || glob.doc.compareDocumentPosition ?\n    function (a, b) {\n        var adown = a.nodeType == 9 ? a.documentElement : a,\n            bup = b && b.parentNode;\n            return a == bup || !!(bup && bup.nodeType == 1 && (\n                adown.contains ?\n                    adown.contains(bup) :\n                    a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16\n            ));\n    } :\n    function (a, b) {\n        if (b) {\n            while (b) {\n                b = b.parentNode;\n                if (b == a) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\nfunction getSomeDefs(el) {\n    var p = el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) ||\n            el.node.parentNode && wrap(el.node.parentNode) ||\n            Snap.select(\"svg\") ||\n            Snap(0, 0),\n        pdefs = p.select(\"defs\"),\n        defs  = pdefs == null ? false : pdefs.node;\n    if (!defs) {\n        defs = make(\"defs\", p.node).node;\n    }\n    return defs;\n}\nfunction getSomeSVG(el) {\n    return el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) || Snap.select(\"svg\");\n}\nSnap._.getSomeDefs = getSomeDefs;\nSnap._.getSomeSVG = getSomeSVG;\nfunction unit2px(el, name, value) {\n    var svg = getSomeSVG(el).node,\n        out = {},\n        mgr = svg.querySelector(\".svg---mgr\");\n    if (!mgr) {\n        mgr = $(\"rect\");\n        $(mgr, {x: -9e9, y: -9e9, width: 10, height: 10, \"class\": \"svg---mgr\", fill: \"none\"});\n        svg.appendChild(mgr);\n    }\n    function getW(val) {\n        if (val == null) {\n            return E;\n        }\n        if (val == +val) {\n            return val;\n        }\n        $(mgr, {width: val});\n        try {\n            return mgr.getBBox().width;\n        } catch (e) {\n            return 0;\n        }\n    }\n    function getH(val) {\n        if (val == null) {\n            return E;\n        }\n        if (val == +val) {\n            return val;\n        }\n        $(mgr, {height: val});\n        try {\n            return mgr.getBBox().height;\n        } catch (e) {\n            return 0;\n        }\n    }\n    function set(nam, f) {\n        if (name == null) {\n            out[nam] = f(el.attr(nam) || 0);\n        } else if (nam == name) {\n            out = f(value == null ? el.attr(nam) || 0 : value);\n        }\n    }\n    switch (el.type) {\n        case \"rect\":\n            set(\"rx\", getW);\n            set(\"ry\", getH);\n        case \"image\":\n            set(\"width\", getW);\n            set(\"height\", getH);\n        case \"text\":\n            set(\"x\", getW);\n            set(\"y\", getH);\n        break;\n        case \"circle\":\n            set(\"cx\", getW);\n            set(\"cy\", getH);\n            set(\"r\", getW);\n        break;\n        case \"ellipse\":\n            set(\"cx\", getW);\n            set(\"cy\", getH);\n            set(\"rx\", getW);\n            set(\"ry\", getH);\n        break;\n        case \"line\":\n            set(\"x1\", getW);\n            set(\"x2\", getW);\n            set(\"y1\", getH);\n            set(\"y2\", getH);\n        break;\n        case \"marker\":\n            set(\"refX\", getW);\n            set(\"markerWidth\", getW);\n            set(\"refY\", getH);\n            set(\"markerHeight\", getH);\n        break;\n        case \"radialGradient\":\n            set(\"fx\", getW);\n            set(\"fy\", getH);\n        break;\n        case \"tspan\":\n            set(\"dx\", getW);\n            set(\"dy\", getH);\n        break;\n        default:\n            set(name, getW);\n    }\n    svg.removeChild(mgr);\n    return out;\n}\n/*\\\n * Snap.select\n [ method ]\n **\n * Wraps a DOM element specified by CSS selector as @Element\n - query (string) CSS selector of the element\n = (Element) the current element\n\\*/\nSnap.select = function (query) {\n    query = Str(query).replace(/([^\\\\]):/g, \"$1\\\\:\");\n    return wrap(glob.doc.querySelector(query));\n};\n/*\\\n * Snap.selectAll\n [ method ]\n **\n * Wraps DOM elements specified by CSS selector as set or array of @Element\n - query (string) CSS selector of the element\n = (Element) the current element\n\\*/\nSnap.selectAll = function (query) {\n    var nodelist = glob.doc.querySelectorAll(query),\n        set = (Snap.set || Array)();\n    for (var i = 0; i < nodelist.length; i++) {\n        set.push(wrap(nodelist[i]));\n    }\n    return set;\n};\n\nfunction add2group(list) {\n    if (!is(list, \"array\")) {\n        list = Array.prototype.slice.call(arguments, 0);\n    }\n    var i = 0,\n        j = 0,\n        node = this.node;\n    while (this[i]) delete this[i++];\n    for (i = 0; i < list.length; i++) {\n        if (list[i].type == \"set\") {\n            list[i].forEach(function (el) {\n                node.appendChild(el.node);\n            });\n        } else {\n            node.appendChild(list[i].node);\n        }\n    }\n    var children = node.childNodes;\n    for (i = 0; i < children.length; i++) {\n        this[j++] = wrap(children[i]);\n    }\n    return this;\n}\n// Hub garbage collector every 10s\nsetInterval(function () {\n    for (var key in hub) if (hub[has](key)) {\n        var el = hub[key],\n            node = el.node;\n        if (el.type != \"svg\" && !node.ownerSVGElement || el.type == \"svg\" && (!node.parentNode || \"ownerSVGElement\" in node.parentNode && !node.ownerSVGElement)) {\n            delete hub[key];\n        }\n    }\n}, 1e4);\nfunction Element(el) {\n    if (el.snap in hub) {\n        return hub[el.snap];\n    }\n    var svg;\n    try {\n        svg = el.ownerSVGElement;\n    } catch(e) {}\n    /*\\\n     * Element.node\n     [ property (object) ]\n     **\n     * Gives you a reference to the DOM object, so you can assign event handlers or just mess around.\n     > Usage\n     | // draw a circle at coordinate 10,10 with radius of 10\n     | var c = paper.circle(10, 10, 10);\n     | c.node.onclick = function () {\n     |     c.attr(\"fill\", \"red\");\n     | };\n    \\*/\n    this.node = el;\n    if (svg) {\n        this.paper = new Paper(svg);\n    }\n    /*\\\n     * Element.type\n     [ property (string) ]\n     **\n     * SVG tag name of the given element.\n    \\*/\n    this.type = el.tagName || el.nodeName;\n    var id = this.id = ID(this);\n    this.anims = {};\n    this._ = {\n        transform: []\n    };\n    el.snap = id;\n    hub[id] = this;\n    if (this.type == \"g\") {\n        this.add = add2group;\n    }\n    if (this.type in {g: 1, mask: 1, pattern: 1, symbol: 1}) {\n        for (var method in Paper.prototype) if (Paper.prototype[has](method)) {\n            this[method] = Paper.prototype[method];\n        }\n    }\n}\n   /*\\\n     * Element.attr\n     [ method ]\n     **\n     * Gets or sets given attributes of the element.\n     **\n     - params (object) contains key-value pairs of attributes you want to set\n     * or\n     - param (string) name of the attribute\n     = (Element) the current element\n     * or\n     = (string) value of attribute\n     > Usage\n     | el.attr({\n     |     fill: \"#fc0\",\n     |     stroke: \"#000\",\n     |     strokeWidth: 2, // CamelCase...\n     |     \"fill-opacity\": 0.5, // or dash-separated names\n     |     width: \"*=2\" // prefixed values\n     | });\n     | console.log(el.attr(\"fill\")); // #fc0\n     * Prefixed values in format `\"+=10\"` supported. All four operations\n     * (`+`, `-`, `*` and `/`) could be used. Optionally you can use units for `+`\n     * and `-`: `\"+=2em\"`.\n    \\*/\n    Element.prototype.attr = function (params, value) {\n        var el = this,\n            node = el.node;\n        if (!params) {\n            if (node.nodeType != 1) {\n                return {\n                    text: node.nodeValue\n                };\n            }\n            var attr = node.attributes,\n                out = {};\n            for (var i = 0, ii = attr.length; i < ii; i++) {\n                out[attr[i].nodeName] = attr[i].nodeValue;\n            }\n            return out;\n        }\n        if (is(params, \"string\")) {\n            if (arguments.length > 1) {\n                var json = {};\n                json[params] = value;\n                params = json;\n            } else {\n                return eve(\"snap.util.getattr.\" + params, el).firstDefined();\n            }\n        }\n        for (var att in params) {\n            if (params[has](att)) {\n                eve(\"snap.util.attr.\" + att, el, params[att]);\n            }\n        }\n        return el;\n    };\n/*\\\n * Snap.parse\n [ method ]\n **\n * Parses SVG fragment and converts it into a @Fragment\n **\n - svg (string) SVG string\n = (Fragment) the @Fragment\n\\*/\nSnap.parse = function (svg) {\n    var f = glob.doc.createDocumentFragment(),\n        full = true,\n        div = glob.doc.createElement(\"div\");\n    svg = Str(svg);\n    if (!svg.match(/^\\s*<\\s*svg(?:\\s|>)/)) {\n        svg = \"<svg>\" + svg + \"</svg>\";\n        full = false;\n    }\n    div.innerHTML = svg;\n    svg = div.getElementsByTagName(\"svg\")[0];\n    if (svg) {\n        if (full) {\n            f = svg;\n        } else {\n            while (svg.firstChild) {\n                f.appendChild(svg.firstChild);\n            }\n        }\n    }\n    return new Fragment(f);\n};\nfunction Fragment(frag) {\n    this.node = frag;\n}\n/*\\\n * Snap.fragment\n [ method ]\n **\n * Creates a DOM fragment from a given list of elements or strings\n **\n - varargs (…) SVG string\n = (Fragment) the @Fragment\n\\*/\nSnap.fragment = function () {\n    var args = Array.prototype.slice.call(arguments, 0),\n        f = glob.doc.createDocumentFragment();\n    for (var i = 0, ii = args.length; i < ii; i++) {\n        var item = args[i];\n        if (item.node && item.node.nodeType) {\n            f.appendChild(item.node);\n        }\n        if (item.nodeType) {\n            f.appendChild(item);\n        }\n        if (typeof item == \"string\") {\n            f.appendChild(Snap.parse(item).node);\n        }\n    }\n    return new Fragment(f);\n};\n\nfunction make(name, parent) {\n    var res = $(name);\n    parent.appendChild(res);\n    var el = wrap(res);\n    return el;\n}\nfunction Paper(w, h) {\n    var res,\n        desc,\n        defs,\n        proto = Paper.prototype;\n    if (w && w.tagName && w.tagName.toLowerCase() == \"svg\") {\n        if (w.snap in hub) {\n            return hub[w.snap];\n        }\n        var doc = w.ownerDocument;\n        res = new Element(w);\n        desc = w.getElementsByTagName(\"desc\")[0];\n        defs = w.getElementsByTagName(\"defs\")[0];\n        if (!desc) {\n            desc = $(\"desc\");\n            desc.appendChild(doc.createTextNode(\"Created with Snap\"));\n            res.node.appendChild(desc);\n        }\n        if (!defs) {\n            defs = $(\"defs\");\n            res.node.appendChild(defs);\n        }\n        res.defs = defs;\n        for (var key in proto) if (proto[has](key)) {\n            res[key] = proto[key];\n        }\n        res.paper = res.root = res;\n    } else {\n        res = make(\"svg\", glob.doc.body);\n        $(res.node, {\n            height: h,\n            version: 1.1,\n            width: w,\n            xmlns: xmlns\n        });\n    }\n    return res;\n}\nfunction wrap(dom) {\n    if (!dom) {\n        return dom;\n    }\n    if (dom instanceof Element || dom instanceof Fragment) {\n        return dom;\n    }\n    if (dom.tagName && dom.tagName.toLowerCase() == \"svg\") {\n        return new Paper(dom);\n    }\n    if (dom.tagName && dom.tagName.toLowerCase() == \"object\" && dom.type == \"image/svg+xml\") {\n        return new Paper(dom.contentDocument.getElementsByTagName(\"svg\")[0]);\n    }\n    return new Element(dom);\n}\n\nSnap._.make = make;\nSnap._.wrap = wrap;\n/*\\\n * Paper.el\n [ method ]\n **\n * Creates an element on paper with a given name and no attributes\n **\n - name (string) tag name\n - attr (object) attributes\n = (Element) the current element\n > Usage\n | var c = paper.circle(10, 10, 10); // is the same as...\n | var c = paper.el(\"circle\").attr({\n |     cx: 10,\n |     cy: 10,\n |     r: 10\n | });\n | // and the same as\n | var c = paper.el(\"circle\", {\n |     cx: 10,\n |     cy: 10,\n |     r: 10\n | });\n\\*/\nPaper.prototype.el = function (name, attr) {\n    var el = make(name, this.node);\n    attr && el.attr(attr);\n    return el;\n};\n/*\\\n * Element.children\n [ method ]\n **\n * Returns array of all the children of the element.\n = (array) array of Elements\n\\*/\nElement.prototype.children = function () {\n    var out = [],\n        ch = this.node.childNodes;\n    for (var i = 0, ii = ch.length; i < ii; i++) {\n        out[i] = Snap(ch[i]);\n    }\n    return out;\n};\nfunction jsonFiller(root, o) {\n    for (var i = 0, ii = root.length; i < ii; i++) {\n        var item = {\n                type: root[i].type,\n                attr: root[i].attr()\n            },\n            children = root[i].children();\n        o.push(item);\n        if (children.length) {\n            jsonFiller(children, item.childNodes = []);\n        }\n    }\n}\n/*\\\n * Element.toJSON\n [ method ]\n **\n * Returns object representation of the given element and all its children.\n = (object) in format\n o {\n o     type (string) this.type,\n o     attr (object) attributes map,\n o     childNodes (array) optional array of children in the same format\n o }\n\\*/\nElement.prototype.toJSON = function () {\n    var out = [];\n    jsonFiller([this], out);\n    return out[0];\n};\n// default\neve.on(\"snap.util.getattr\", function () {\n    var att = eve.nt();\n    att = att.substring(att.lastIndexOf(\".\") + 1);\n    var css = att.replace(/[A-Z]/g, function (letter) {\n        return \"-\" + letter.toLowerCase();\n    });\n    if (cssAttr[has](css)) {\n        return this.node.ownerDocument.defaultView.getComputedStyle(this.node, null).getPropertyValue(css);\n    } else {\n        return $(this.node, att);\n    }\n});\nvar cssAttr = {\n    \"alignment-baseline\": 0,\n    \"baseline-shift\": 0,\n    \"clip\": 0,\n    \"clip-path\": 0,\n    \"clip-rule\": 0,\n    \"color\": 0,\n    \"color-interpolation\": 0,\n    \"color-interpolation-filters\": 0,\n    \"color-profile\": 0,\n    \"color-rendering\": 0,\n    \"cursor\": 0,\n    \"direction\": 0,\n    \"display\": 0,\n    \"dominant-baseline\": 0,\n    \"enable-background\": 0,\n    \"fill\": 0,\n    \"fill-opacity\": 0,\n    \"fill-rule\": 0,\n    \"filter\": 0,\n    \"flood-color\": 0,\n    \"flood-opacity\": 0,\n    \"font\": 0,\n    \"font-family\": 0,\n    \"font-size\": 0,\n    \"font-size-adjust\": 0,\n    \"font-stretch\": 0,\n    \"font-style\": 0,\n    \"font-variant\": 0,\n    \"font-weight\": 0,\n    \"glyph-orientation-horizontal\": 0,\n    \"glyph-orientation-vertical\": 0,\n    \"image-rendering\": 0,\n    \"kerning\": 0,\n    \"letter-spacing\": 0,\n    \"lighting-color\": 0,\n    \"marker\": 0,\n    \"marker-end\": 0,\n    \"marker-mid\": 0,\n    \"marker-start\": 0,\n    \"mask\": 0,\n    \"opacity\": 0,\n    \"overflow\": 0,\n    \"pointer-events\": 0,\n    \"shape-rendering\": 0,\n    \"stop-color\": 0,\n    \"stop-opacity\": 0,\n    \"stroke\": 0,\n    \"stroke-dasharray\": 0,\n    \"stroke-dashoffset\": 0,\n    \"stroke-linecap\": 0,\n    \"stroke-linejoin\": 0,\n    \"stroke-miterlimit\": 0,\n    \"stroke-opacity\": 0,\n    \"stroke-width\": 0,\n    \"text-anchor\": 0,\n    \"text-decoration\": 0,\n    \"text-rendering\": 0,\n    \"unicode-bidi\": 0,\n    \"visibility\": 0,\n    \"word-spacing\": 0,\n    \"writing-mode\": 0\n};\n\neve.on(\"snap.util.attr\", function (value) {\n    var att = eve.nt(),\n        attr = {};\n    att = att.substring(att.lastIndexOf(\".\") + 1);\n    attr[att] = value;\n    var style = att.replace(/-(\\w)/gi, function (all, letter) {\n            return letter.toUpperCase();\n        }),\n        css = att.replace(/[A-Z]/g, function (letter) {\n            return \"-\" + letter.toLowerCase();\n        });\n    if (cssAttr[has](css)) {\n        this.node.style[style] = value == null ? E : value;\n    } else {\n        $(this.node, attr);\n    }\n});\n(function (proto) {}(Paper.prototype));\n\n// simple ajax\n/*\\\n * Snap.ajax\n [ method ]\n **\n * Simple implementation of Ajax\n **\n - url (string) URL\n - postData (object|string) data for post request\n - callback (function) callback\n - scope (object) #optional scope of callback\n * or\n - url (string) URL\n - callback (function) callback\n - scope (object) #optional scope of callback\n = (XMLHttpRequest) the XMLHttpRequest object, just in case\n\\*/\nSnap.ajax = function (url, postData, callback, scope){\n    var req = new XMLHttpRequest,\n        id = ID();\n    if (req) {\n        if (is(postData, \"function\")) {\n            scope = callback;\n            callback = postData;\n            postData = null;\n        } else if (is(postData, \"object\")) {\n            var pd = [];\n            for (var key in postData) if (postData.hasOwnProperty(key)) {\n                pd.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(postData[key]));\n            }\n            postData = pd.join(\"&\");\n        }\n        req.open(postData ? \"POST\" : \"GET\", url, true);\n        if (postData) {\n            req.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n            req.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n        }\n        if (callback) {\n            eve.once(\"snap.ajax.\" + id + \".0\", callback);\n            eve.once(\"snap.ajax.\" + id + \".200\", callback);\n            eve.once(\"snap.ajax.\" + id + \".304\", callback);\n        }\n        req.onreadystatechange = function() {\n            if (req.readyState != 4) return;\n            eve(\"snap.ajax.\" + id + \".\" + req.status, scope, req);\n        };\n        if (req.readyState == 4) {\n            return req;\n        }\n        req.send(postData);\n        return req;\n    }\n};\n/*\\\n * Snap.load\n [ method ]\n **\n * Loads external SVG file as a @Fragment (see @Snap.ajax for more advanced AJAX)\n **\n - url (string) URL\n - callback (function) callback\n - scope (object) #optional scope of callback\n\\*/\nSnap.load = function (url, callback, scope) {\n    Snap.ajax(url, function (req) {\n        var f = Snap.parse(req.responseText);\n        scope ? callback.call(scope, f) : callback(f);\n    });\n};\nvar getOffset = function (elem) {\n    var box = elem.getBoundingClientRect(),\n        doc = elem.ownerDocument,\n        body = doc.body,\n        docElem = doc.documentElement,\n        clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0,\n        top  = box.top  + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop ) - clientTop,\n        left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;\n    return {\n        y: top,\n        x: left\n    };\n};\n/*\\\n * Snap.getElementByPoint\n [ method ]\n **\n * Returns you topmost element under given point.\n **\n = (object) Snap element object\n - x (number) x coordinate from the top left corner of the window\n - y (number) y coordinate from the top left corner of the window\n > Usage\n | Snap.getElementByPoint(mouseX, mouseY).attr({stroke: \"#f00\"});\n\\*/\nSnap.getElementByPoint = function (x, y) {\n    var paper = this,\n        svg = paper.canvas,\n        target = glob.doc.elementFromPoint(x, y);\n    if (glob.win.opera && target.tagName == \"svg\") {\n        var so = getOffset(target),\n            sr = target.createSVGRect();\n        sr.x = x - so.x;\n        sr.y = y - so.y;\n        sr.width = sr.height = 1;\n        var hits = target.getIntersectionList(sr, null);\n        if (hits.length) {\n            target = hits[hits.length - 1];\n        }\n    }\n    if (!target) {\n        return null;\n    }\n    return wrap(target);\n};\n/*\\\n * Snap.plugin\n [ method ]\n **\n * Let you write plugins. You pass in a function with five arguments, like this:\n | Snap.plugin(function (Snap, Element, Paper, global, Fragment) {\n |     Snap.newmethod = function () {};\n |     Element.prototype.newmethod = function () {};\n |     Paper.prototype.newmethod = function () {};\n | });\n * Inside the function you have access to all main objects (and their\n * prototypes). This allow you to extend anything you want.\n **\n - f (function) your plugin body\n\\*/\nSnap.plugin = function (f) {\n    f(Snap, Element, Paper, glob, Fragment);\n};\nglob.win.Snap = Snap;\nreturn Snap;\n}(window || this));\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        Str = String,\n        unit2px = Snap._unit2px,\n        $ = Snap._.$,\n        make = Snap._.make,\n        getSomeDefs = Snap._.getSomeDefs,\n        has = \"hasOwnProperty\",\n        wrap = Snap._.wrap;\n    /*\\\n     * Element.getBBox\n     [ method ]\n     **\n     * Returns the bounding box descriptor for the given element\n     **\n     = (object) bounding box descriptor:\n     o {\n     o     cx: (number) x of the center,\n     o     cy: (number) x of the center,\n     o     h: (number) height,\n     o     height: (number) height,\n     o     path: (string) path command for the box,\n     o     r0: (number) radius of a circle that fully encloses the box,\n     o     r1: (number) radius of the smallest circle that can be enclosed,\n     o     r2: (number) radius of the largest circle that can be enclosed,\n     o     vb: (string) box as a viewbox command,\n     o     w: (number) width,\n     o     width: (number) width,\n     o     x2: (number) x of the right side,\n     o     x: (number) x of the left side,\n     o     y2: (number) y of the bottom edge,\n     o     y: (number) y of the top edge\n     o }\n    \\*/\n    elproto.getBBox = function (isWithoutTransform) {\n        if (this.type == \"tspan\") {\n            return Snap._.box(this.node.getClientRects().item(0));\n        }\n        if (!Snap.Matrix || !Snap.path) {\n            return this.node.getBBox();\n        }\n        var el = this,\n            m = new Snap.Matrix;\n        if (el.removed) {\n            return Snap._.box();\n        }\n        while (el.type == \"use\") {\n            if (!isWithoutTransform) {\n                m = m.add(el.transform().localMatrix.translate(el.attr(\"x\") || 0, el.attr(\"y\") || 0));\n            }\n            if (el.original) {\n                el = el.original;\n            } else {\n                var href = el.attr(\"xlink:href\");\n                el = el.original = el.node.ownerDocument.getElementById(href.substring(href.indexOf(\"#\") + 1));\n            }\n        }\n        var _ = el._,\n            pathfinder = Snap.path.get[el.type] || Snap.path.get.deflt;\n        try {\n            if (isWithoutTransform) {\n                _.bboxwt = pathfinder ? Snap.path.getBBox(el.realPath = pathfinder(el)) : Snap._.box(el.node.getBBox());\n                return Snap._.box(_.bboxwt);\n            } else {\n                el.realPath = pathfinder(el);\n                el.matrix = el.transform().localMatrix;\n                _.bbox = Snap.path.getBBox(Snap.path.map(el.realPath, m.add(el.matrix)));\n                return Snap._.box(_.bbox);\n            }\n        } catch (e) {\n            // Firefox doesn’t give you bbox of hidden element\n            return Snap._.box();\n        }\n    };\n    var propString = function () {\n        return this.string;\n    };\n    function extractTransform(el, tstr) {\n        if (tstr == null) {\n            var doReturn = true;\n            if (el.type == \"linearGradient\" || el.type == \"radialGradient\") {\n                tstr = el.node.getAttribute(\"gradientTransform\");\n            } else if (el.type == \"pattern\") {\n                tstr = el.node.getAttribute(\"patternTransform\");\n            } else {\n                tstr = el.node.getAttribute(\"transform\");\n            }\n            if (!tstr) {\n                return new Snap.Matrix;\n            }\n            tstr = Snap._.svgTransform2string(tstr);\n        } else {\n            if (!Snap._.rgTransform.test(tstr)) {\n                tstr = Snap._.svgTransform2string(tstr);\n            } else {\n                tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, el._.transform || \"\");\n            }\n            if (is(tstr, \"array\")) {\n                tstr = Snap.path ? Snap.path.toString.call(tstr) : Str(tstr);\n            }\n            el._.transform = tstr;\n        }\n        var m = Snap._.transform2matrix(tstr, el.getBBox(1));\n        if (doReturn) {\n            return m;\n        } else {\n            el.matrix = m;\n        }\n    }\n    /*\\\n     * Element.transform\n     [ method ]\n     **\n     * Gets or sets transformation of the element\n     **\n     - tstr (string) transform string in Snap or SVG format\n     = (Element) the current element\n     * or\n     = (object) transformation descriptor:\n     o {\n     o     string (string) transform string,\n     o     globalMatrix (Matrix) matrix of all transformations applied to element or its parents,\n     o     localMatrix (Matrix) matrix of transformations applied only to the element,\n     o     diffMatrix (Matrix) matrix of difference between global and local transformations,\n     o     global (string) global transformation as string,\n     o     local (string) local transformation as string,\n     o     toString (function) returns `string` property\n     o }\n    \\*/\n    elproto.transform = function (tstr) {\n        var _ = this._;\n        if (tstr == null) {\n            var papa = this,\n                global = new Snap.Matrix(this.node.getCTM()),\n                local = extractTransform(this),\n                ms = [local],\n                m = new Snap.Matrix,\n                i,\n                localString = local.toTransformString(),\n                string = Str(local) == Str(this.matrix) ?\n                            Str(_.transform) : localString;\n            while (papa.type != \"svg\" && (papa = papa.parent())) {\n                ms.push(extractTransform(papa));\n            }\n            i = ms.length;\n            while (i--) {\n                m.add(ms[i]);\n            }\n            return {\n                string: string,\n                globalMatrix: global,\n                totalMatrix: m,\n                localMatrix: local,\n                diffMatrix: global.clone().add(local.invert()),\n                global: global.toTransformString(),\n                total: m.toTransformString(),\n                local: localString,\n                toString: propString\n            };\n        }\n        if (tstr instanceof Snap.Matrix) {\n            this.matrix = tstr;\n            this._.transform = tstr.toTransformString();\n        } else {\n            extractTransform(this, tstr);\n        }\n\n        if (this.node) {\n            if (this.type == \"linearGradient\" || this.type == \"radialGradient\") {\n                $(this.node, {gradientTransform: this.matrix});\n            } else if (this.type == \"pattern\") {\n                $(this.node, {patternTransform: this.matrix});\n            } else {\n                $(this.node, {transform: this.matrix});\n            }\n        }\n\n        return this;\n    };\n    /*\\\n     * Element.parent\n     [ method ]\n     **\n     * Returns the element's parent\n     **\n     = (Element) the parent element\n    \\*/\n    elproto.parent = function () {\n        return wrap(this.node.parentNode);\n    };\n    /*\\\n     * Element.append\n     [ method ]\n     **\n     * Appends the given element to current one\n     **\n     - el (Element|Set) element to append\n     = (Element) the parent element\n    \\*/\n    /*\\\n     * Element.add\n     [ method ]\n     **\n     * See @Element.append\n    \\*/\n    elproto.append = elproto.add = function (el) {\n        if (el) {\n            if (el.type == \"set\") {\n                var it = this;\n                el.forEach(function (el) {\n                    it.add(el);\n                });\n                return this;\n            }\n            el = wrap(el);\n            this.node.appendChild(el.node);\n            el.paper = this.paper;\n        }\n        return this;\n    };\n    /*\\\n     * Element.appendTo\n     [ method ]\n     **\n     * Appends the current element to the given one\n     **\n     - el (Element) parent element to append to\n     = (Element) the child element\n    \\*/\n    elproto.appendTo = function (el) {\n        if (el) {\n            el = wrap(el);\n            el.append(this);\n        }\n        return this;\n    };\n    /*\\\n     * Element.prepend\n     [ method ]\n     **\n     * Prepends the given element to the current one\n     **\n     - el (Element) element to prepend\n     = (Element) the parent element\n    \\*/\n    elproto.prepend = function (el) {\n        if (el) {\n            if (el.type == \"set\") {\n                var it = this,\n                    first;\n                el.forEach(function (el) {\n                    if (first) {\n                        first.after(el);\n                    } else {\n                        it.prepend(el);\n                    }\n                    first = el;\n                });\n                return this;\n            }\n            el = wrap(el);\n            var parent = el.parent();\n            this.node.insertBefore(el.node, this.node.firstChild);\n            this.add && this.add();\n            el.paper = this.paper;\n            this.parent() && this.parent().add();\n            parent && parent.add();\n        }\n        return this;\n    };\n    /*\\\n     * Element.prependTo\n     [ method ]\n     **\n     * Prepends the current element to the given one\n     **\n     - el (Element) parent element to prepend to\n     = (Element) the child element\n    \\*/\n    elproto.prependTo = function (el) {\n        el = wrap(el);\n        el.prepend(this);\n        return this;\n    };\n    /*\\\n     * Element.before\n     [ method ]\n     **\n     * Inserts given element before the current one\n     **\n     - el (Element) element to insert\n     = (Element) the parent element\n    \\*/\n    elproto.before = function (el) {\n        if (el.type == \"set\") {\n            var it = this;\n            el.forEach(function (el) {\n                var parent = el.parent();\n                it.node.parentNode.insertBefore(el.node, it.node);\n                parent && parent.add();\n            });\n            this.parent().add();\n            return this;\n        }\n        el = wrap(el);\n        var parent = el.parent();\n        this.node.parentNode.insertBefore(el.node, this.node);\n        this.parent() && this.parent().add();\n        parent && parent.add();\n        el.paper = this.paper;\n        return this;\n    };\n    /*\\\n     * Element.after\n     [ method ]\n     **\n     * Inserts given element after the current one\n     **\n     - el (Element) element to insert\n     = (Element) the parent element\n    \\*/\n    elproto.after = function (el) {\n        el = wrap(el);\n        var parent = el.parent();\n        if (this.node.nextSibling) {\n            this.node.parentNode.insertBefore(el.node, this.node.nextSibling);\n        } else {\n            this.node.parentNode.appendChild(el.node);\n        }\n        this.parent() && this.parent().add();\n        parent && parent.add();\n        el.paper = this.paper;\n        return this;\n    };\n    /*\\\n     * Element.insertBefore\n     [ method ]\n     **\n     * Inserts the element after the given one\n     **\n     - el (Element) element next to whom insert to\n     = (Element) the parent element\n    \\*/\n    elproto.insertBefore = function (el) {\n        el = wrap(el);\n        var parent = this.parent();\n        el.node.parentNode.insertBefore(this.node, el.node);\n        this.paper = el.paper;\n        parent && parent.add();\n        el.parent() && el.parent().add();\n        return this;\n    };\n    /*\\\n     * Element.insertAfter\n     [ method ]\n     **\n     * Inserts the element after the given one\n     **\n     - el (Element) element next to whom insert to\n     = (Element) the parent element\n    \\*/\n    elproto.insertAfter = function (el) {\n        el = wrap(el);\n        var parent = this.parent();\n        el.node.parentNode.insertBefore(this.node, el.node.nextSibling);\n        this.paper = el.paper;\n        parent && parent.add();\n        el.parent() && el.parent().add();\n        return this;\n    };\n    /*\\\n     * Element.remove\n     [ method ]\n     **\n     * Removes element from the DOM\n     = (Element) the detached element\n    \\*/\n    elproto.remove = function () {\n        var parent = this.parent();\n        this.node.parentNode && this.node.parentNode.removeChild(this.node);\n        delete this.paper;\n        this.removed = true;\n        parent && parent.add();\n        return this;\n    };\n    /*\\\n     * Element.select\n     [ method ]\n     **\n     * Gathers the nested @Element matching the given set of CSS selectors\n     **\n     - query (string) CSS selector\n     = (Element) result of query selection\n    \\*/\n    elproto.select = function (query) {\n        return wrap(this.node.querySelector(query));\n    };\n    /*\\\n     * Element.selectAll\n     [ method ]\n     **\n     * Gathers nested @Element objects matching the given set of CSS selectors\n     **\n     - query (string) CSS selector\n     = (Set|array) result of query selection\n    \\*/\n    elproto.selectAll = function (query) {\n        var nodelist = this.node.querySelectorAll(query),\n            set = (Snap.set || Array)();\n        for (var i = 0; i < nodelist.length; i++) {\n            set.push(wrap(nodelist[i]));\n        }\n        return set;\n    };\n    /*\\\n     * Element.asPX\n     [ method ]\n     **\n     * Returns given attribute of the element as a `px` value (not %, em, etc.)\n     **\n     - attr (string) attribute name\n     - value (string) #optional attribute value\n     = (Element) result of query selection\n    \\*/\n    elproto.asPX = function (attr, value) {\n        if (value == null) {\n            value = this.attr(attr);\n        }\n        return +unit2px(this, attr, value);\n    };\n    // SIERRA Element.use(): I suggest adding a note about how to access the original element the returned <use> instantiates. It's a part of SVG with which ordinary web developers may be least familiar.\n    /*\\\n     * Element.use\n     [ method ]\n     **\n     * Creates a `<use>` element linked to the current element\n     **\n     = (Element) the `<use>` element\n    \\*/\n    elproto.use = function () {\n        var use,\n            id = this.node.id;\n        if (!id) {\n            id = this.id;\n            $(this.node, {\n                id: id\n            });\n        }\n        if (this.type == \"linearGradient\" || this.type == \"radialGradient\" ||\n            this.type == \"pattern\") {\n            use = make(this.type, this.node.parentNode);\n        } else {\n            use = make(\"use\", this.node.parentNode);\n        }\n        $(use.node, {\n            \"xlink:href\": \"#\" + id\n        });\n        use.original = this;\n        return use;\n    };\n    function fixids(el) {\n        var els = el.selectAll(\"*\"),\n            it,\n            url = /^\\s*url\\((\"|'|)(.*)\\1\\)\\s*$/,\n            ids = [],\n            uses = {};\n        function urltest(it, name) {\n            var val = $(it.node, name);\n            val = val && val.match(url);\n            val = val && val[2];\n            if (val && val.charAt() == \"#\") {\n                val = val.substring(1);\n            } else {\n                return;\n            }\n            if (val) {\n                uses[val] = (uses[val] || []).concat(function (id) {\n                    var attr = {};\n                    attr[name] = Snap.url(id);\n                    $(it.node, attr);\n                });\n            }\n        }\n        function linktest(it) {\n            var val = $(it.node, \"xlink:href\");\n            if (val && val.charAt() == \"#\") {\n                val = val.substring(1);\n            } else {\n                return;\n            }\n            if (val) {\n                uses[val] = (uses[val] || []).concat(function (id) {\n                    it.attr(\"xlink:href\", \"#\" + id);\n                });\n            }\n        }\n        for (var i = 0, ii = els.length; i < ii; i++) {\n            it = els[i];\n            urltest(it, \"fill\");\n            urltest(it, \"stroke\");\n            urltest(it, \"filter\");\n            urltest(it, \"mask\");\n            urltest(it, \"clip-path\");\n            linktest(it);\n            var oldid = $(it.node, \"id\");\n            if (oldid) {\n                $(it.node, {id: it.id});\n                ids.push({\n                    old: oldid,\n                    id: it.id\n                });\n            }\n        }\n        for (i = 0, ii = ids.length; i < ii; i++) {\n            var fs = uses[ids[i].old];\n            if (fs) {\n                for (var j = 0, jj = fs.length; j < jj; j++) {\n                    fs[j](ids[i].id);\n                }\n            }\n        }\n    }\n    /*\\\n     * Element.clone\n     [ method ]\n     **\n     * Creates a clone of the element and inserts it after the element\n     **\n     = (Element) the clone\n    \\*/\n    elproto.clone = function () {\n        var clone = wrap(this.node.cloneNode(true));\n        if ($(clone.node, \"id\")) {\n            $(clone.node, {id: clone.id});\n        }\n        fixids(clone);\n        clone.insertAfter(this);\n        return clone;\n    };\n    /*\\\n     * Element.toDefs\n     [ method ]\n     **\n     * Moves element to the shared `<defs>` area\n     **\n     = (Element) the element\n    \\*/\n    elproto.toDefs = function () {\n        var defs = getSomeDefs(this);\n        defs.appendChild(this.node);\n        return this;\n    };\n    /*\\\n     * Element.toPattern\n     [ method ]\n     **\n     * Creates a `<pattern>` element from the current element\n     **\n     * To create a pattern you have to specify the pattern rect:\n     - x (string|number)\n     - y (string|number)\n     - width (string|number)\n     - height (string|number)\n     = (Element) the `<pattern>` element\n     * You can use pattern later on as an argument for `fill` attribute:\n     | var p = paper.path(\"M10-5-10,15M15,0,0,15M0-5-20,15\").attr({\n     |         fill: \"none\",\n     |         stroke: \"#bada55\",\n     |         strokeWidth: 5\n     |     }).pattern(0, 0, 10, 10),\n     |     c = paper.circle(200, 200, 100);\n     | c.attr({\n     |     fill: p\n     | });\n    \\*/\n    elproto.pattern = elproto.toPattern = function (x, y, width, height) {\n        var p = make(\"pattern\", getSomeDefs(this));\n        if (x == null) {\n            x = this.getBBox();\n        }\n        if (is(x, \"object\") && \"x\" in x) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            x = x.x;\n        }\n        $(p.node, {\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n            patternUnits: \"userSpaceOnUse\",\n            id: p.id,\n            viewBox: [x, y, width, height].join(\" \")\n        });\n        p.node.appendChild(this.node);\n        return p;\n    };\n// SIERRA Element.marker(): clarify what a reference point is. E.g., helps you offset the object from its edge such as when centering it over a path.\n// SIERRA Element.marker(): I suggest the method should accept default reference point values.  Perhaps centered with (refX = width/2) and (refY = height/2)? Also, couldn't it assume the element's current _width_ and _height_? And please specify what _x_ and _y_ mean: offsets? If so, from where?  Couldn't they also be assigned default values?\n    /*\\\n     * Element.marker\n     [ method ]\n     **\n     * Creates a `<marker>` element from the current element\n     **\n     * To create a marker you have to specify the bounding rect and reference point:\n     - x (number)\n     - y (number)\n     - width (number)\n     - height (number)\n     - refX (number)\n     - refY (number)\n     = (Element) the `<marker>` element\n     * You can specify the marker later as an argument for `marker-start`, `marker-end`, `marker-mid`, and `marker` attributes. The `marker` attribute places the marker at every point along the path, and `marker-mid` places them at every point except the start and end.\n    \\*/\n    // TODO add usage for markers\n    elproto.marker = function (x, y, width, height, refX, refY) {\n        var p = make(\"marker\", getSomeDefs(this));\n        if (x == null) {\n            x = this.getBBox();\n        }\n        if (is(x, \"object\") && \"x\" in x) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            refX = x.refX || x.cx;\n            refY = x.refY || x.cy;\n            x = x.x;\n        }\n        $(p.node, {\n            viewBox: [x, y, width, height].join(\" \"),\n            markerWidth: width,\n            markerHeight: height,\n            orient: \"auto\",\n            refX: refX || 0,\n            refY: refY || 0,\n            id: p.id\n        });\n        p.node.appendChild(this.node);\n        return p;\n    };\n    var eldata = {};\n    /*\\\n     * Element.data\n     [ method ]\n     **\n     * Adds or retrieves given value associated with given key. (Don’t confuse\n     * with `data-` attributes)\n     *\n     * See also @Element.removeData\n     - key (string) key to store data\n     - value (any) #optional value to store\n     = (object) @Element\n     * or, if value is not specified:\n     = (any) value\n     > Usage\n     | for (var i = 0, i < 5, i++) {\n     |     paper.circle(10 + 15 * i, 10, 10)\n     |          .attr({fill: \"#000\"})\n     |          .data(\"i\", i)\n     |          .click(function () {\n     |             alert(this.data(\"i\"));\n     |          });\n     | }\n    \\*/\n    elproto.data = function (key, value) {\n        var data = eldata[this.id] = eldata[this.id] || {};\n        if (arguments.length == 0){\n            eve(\"snap.data.get.\" + this.id, this, data, null);\n            return data;\n        }\n        if (arguments.length == 1) {\n            if (Snap.is(key, \"object\")) {\n                for (var i in key) if (key[has](i)) {\n                    this.data(i, key[i]);\n                }\n                return this;\n            }\n            eve(\"snap.data.get.\" + this.id, this, data[key], key);\n            return data[key];\n        }\n        data[key] = value;\n        eve(\"snap.data.set.\" + this.id, this, value, key);\n        return this;\n    };\n    /*\\\n     * Element.removeData\n     [ method ]\n     **\n     * Removes value associated with an element by given key.\n     * If key is not provided, removes all the data of the element.\n     - key (string) #optional key\n     = (object) @Element\n    \\*/\n    elproto.removeData = function (key) {\n        if (key == null) {\n            eldata[this.id] = {};\n        } else {\n            eldata[this.id] && delete eldata[this.id][key];\n        }\n        return this;\n    };\n    /*\\\n     * Element.outerSVG\n     [ method ]\n     **\n     * Returns SVG code for the element, equivalent to HTML's `outerHTML`.\n     *\n     * See also @Element.innerSVG\n     = (string) SVG code for the element\n    \\*/\n    /*\\\n     * Element.toString\n     [ method ]\n     **\n     * See @Element.outerSVG\n    \\*/\n    elproto.outerSVG = elproto.toString = toString(1);\n    /*\\\n     * Element.innerSVG\n     [ method ]\n     **\n     * Returns SVG code for the element's contents, equivalent to HTML's `innerHTML`\n     = (string) SVG code for the element\n    \\*/\n    elproto.innerSVG = toString();\n    function toString(type) {\n        return function () {\n            var res = type ? \"<\" + this.type : \"\",\n                attr = this.node.attributes,\n                chld = this.node.childNodes;\n            if (type) {\n                for (var i = 0, ii = attr.length; i < ii; i++) {\n                    res += \" \" + attr[i].name + '=\"' +\n                            attr[i].value.replace(/\"/g, '\\\\\"') + '\"';\n                }\n            }\n            if (chld.length) {\n                type && (res += \">\");\n                for (i = 0, ii = chld.length; i < ii; i++) {\n                    if (chld[i].nodeType == 3) {\n                        res += chld[i].nodeValue;\n                    } else if (chld[i].nodeType == 1) {\n                        res += wrap(chld[i]).toString();\n                    }\n                }\n                type && (res += \"</\" + this.type + \">\");\n            } else {\n                type && (res += \"/>\");\n            }\n            return res;\n        };\n    }\n    elproto.toDataURL = function () {\n        if (window && window.btoa) {\n            var bb = this.getBBox(),\n                svg = Snap.format('<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"{width}\" height=\"{height}\" viewBox=\"{x} {y} {width} {height}\">{contents}</svg>', {\n                x: +bb.x.toFixed(3),\n                y: +bb.y.toFixed(3),\n                width: +bb.width.toFixed(3),\n                height: +bb.height.toFixed(3),\n                contents: this.outerSVG()\n            });\n            return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(svg)));\n        }\n    };\n    /*\\\n     * Fragment.select\n     [ method ]\n     **\n     * See @Element.select\n    \\*/\n    Fragment.prototype.select = elproto.select;\n    /*\\\n     * Fragment.selectAll\n     [ method ]\n     **\n     * See @Element.selectAll\n    \\*/\n    Fragment.prototype.selectAll = elproto.selectAll;\n});\n\n// Copyright (c) 2016 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        Str = String,\n        has = \"hasOwnProperty\";\n    function slice(from, to, f) {\n        return function (arr) {\n            var res = arr.slice(from, to);\n            if (res.length == 1) {\n                res = res[0];\n            }\n            return f ? f(res) : res;\n        };\n    }\n    var Animation = function (attr, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        this.attr = attr;\n        this.dur = ms;\n        easing && (this.easing = easing);\n        callback && (this.callback = callback);\n    };\n    Snap._.Animation = Animation;\n    /*\\\n     * Snap.animation\n     [ method ]\n     **\n     * Creates an animation object\n     **\n     - attr (object) attributes of final destination\n     - duration (number) duration of the animation, in milliseconds\n     - easing (function) #optional one of easing functions of @mina or custom one\n     - callback (function) #optional callback function that fires when animation ends\n     = (object) animation object\n    \\*/\n    Snap.animation = function (attr, ms, easing, callback) {\n        return new Animation(attr, ms, easing, callback);\n    };\n    /*\\\n     * Element.inAnim\n     [ method ]\n     **\n     * Returns a set of animations that may be able to manipulate the current element\n     **\n     = (object) in format:\n     o {\n     o     anim (object) animation object,\n     o     mina (object) @mina object,\n     o     curStatus (number) 0..1 — status of the animation: 0 — just started, 1 — just finished,\n     o     status (function) gets or sets the status of the animation,\n     o     stop (function) stops the animation\n     o }\n    \\*/\n    elproto.inAnim = function () {\n        var el = this,\n            res = [];\n        for (var id in el.anims) if (el.anims[has](id)) {\n            (function (a) {\n                res.push({\n                    anim: new Animation(a._attrs, a.dur, a.easing, a._callback),\n                    mina: a,\n                    curStatus: a.status(),\n                    status: function (val) {\n                        return a.status(val);\n                    },\n                    stop: function () {\n                        a.stop();\n                    }\n                });\n            }(el.anims[id]));\n        }\n        return res;\n    };\n    /*\\\n     * Snap.animate\n     [ method ]\n     **\n     * Runs generic animation of one number into another with a caring function\n     **\n     - from (number|array) number or array of numbers\n     - to (number|array) number or array of numbers\n     - setter (function) caring function that accepts one number argument\n     - duration (number) duration, in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function to execute when animation ends\n     = (object) animation object in @mina format\n     o {\n     o     id (string) animation id, consider it read-only,\n     o     duration (function) gets or sets the duration of the animation,\n     o     easing (function) easing,\n     o     speed (function) gets or sets the speed of the animation,\n     o     status (function) gets or sets the status of the animation,\n     o     stop (function) stops the animation\n     o }\n     | var rect = Snap().rect(0, 0, 10, 10);\n     | Snap.animate(0, 10, function (val) {\n     |     rect.attr({\n     |         x: val\n     |     });\n     | }, 1000);\n     | // in given context is equivalent to\n     | rect.animate({x: 10}, 1000);\n    \\*/\n    Snap.animate = function (from, to, setter, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        var now = mina.time(),\n            anim = mina(from, to, now, now + ms, mina.time, setter, easing);\n        callback && eve.once(\"mina.finish.\" + anim.id, callback);\n        return anim;\n    };\n    /*\\\n     * Element.stop\n     [ method ]\n     **\n     * Stops all the animations for the current element\n     **\n     = (Element) the current element\n    \\*/\n    elproto.stop = function () {\n        var anims = this.inAnim();\n        for (var i = 0, ii = anims.length; i < ii; i++) {\n            anims[i].stop();\n        }\n        return this;\n    };\n    /*\\\n     * Element.animate\n     [ method ]\n     **\n     * Animates the given attributes of the element\n     **\n     - attrs (object) key-value pairs of destination attributes\n     - duration (number) duration of the animation in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function that executes when the animation ends\n     = (Element) the current element\n    \\*/\n    elproto.animate = function (attrs, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        if (attrs instanceof Animation) {\n            callback = attrs.callback;\n            easing = attrs.easing;\n            ms = attrs.dur;\n            attrs = attrs.attr;\n        }\n        var fkeys = [], tkeys = [], keys = {}, from, to, f, eq,\n            el = this;\n        for (var key in attrs) if (attrs[has](key)) {\n            if (el.equal) {\n                eq = el.equal(key, Str(attrs[key]));\n                from = eq.from;\n                to = eq.to;\n                f = eq.f;\n            } else {\n                from = +el.attr(key);\n                to = +attrs[key];\n            }\n            var len = is(from, \"array\") ? from.length : 1;\n            keys[key] = slice(fkeys.length, fkeys.length + len, f);\n            fkeys = fkeys.concat(from);\n            tkeys = tkeys.concat(to);\n        }\n        var now = mina.time(),\n            anim = mina(fkeys, tkeys, now, now + ms, mina.time, function (val) {\n                var attr = {};\n                for (var key in keys) if (keys[has](key)) {\n                    attr[key] = keys[key](val);\n                }\n                el.attr(attr);\n            }, easing);\n        el.anims[anim.id] = anim;\n        anim._attrs = attrs;\n        anim._callback = callback;\n        eve(\"snap.animcreated.\" + el.id, anim);\n        eve.once(\"mina.finish.\" + anim.id, function () {\n            eve.off(\"mina.*.\" + anim.id);\n            delete el.anims[anim.id];\n            callback && callback.call(el);\n        });\n        eve.once(\"mina.stop.\" + anim.id, function () {\n            eve.off(\"mina.*.\" + anim.id);\n            delete el.anims[anim.id];\n        });\n        return el;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var objectToString = Object.prototype.toString,\n        Str = String,\n        math = Math,\n        E = \"\";\n    function Matrix(a, b, c, d, e, f) {\n        if (b == null && objectToString.call(a) == \"[object SVGMatrix]\") {\n            this.a = a.a;\n            this.b = a.b;\n            this.c = a.c;\n            this.d = a.d;\n            this.e = a.e;\n            this.f = a.f;\n            return;\n        }\n        if (a != null) {\n            this.a = +a;\n            this.b = +b;\n            this.c = +c;\n            this.d = +d;\n            this.e = +e;\n            this.f = +f;\n        } else {\n            this.a = 1;\n            this.b = 0;\n            this.c = 0;\n            this.d = 1;\n            this.e = 0;\n            this.f = 0;\n        }\n    }\n    (function (matrixproto) {\n        /*\\\n         * Matrix.add\n         [ method ]\n         **\n         * Adds the given matrix to existing one\n         - a (number)\n         - b (number)\n         - c (number)\n         - d (number)\n         - e (number)\n         - f (number)\n         * or\n         - matrix (object) @Matrix\n        \\*/\n        matrixproto.add = function (a, b, c, d, e, f) {\n            if (a && a instanceof Matrix) {\n                return this.add(a.a, a.b, a.c, a.d, a.e, a.f);\n            }\n            var aNew = a * this.a + b * this.c,\n                bNew = a * this.b + b * this.d;\n            this.e += e * this.a + f * this.c;\n            this.f += e * this.b + f * this.d;\n            this.c = c * this.a + d * this.c;\n            this.d = c * this.b + d * this.d;\n\n            this.a = aNew;\n            this.b = bNew;\n            return this;\n        };\n        /*\\\n         * Matrix.multLeft\n         [ method ]\n         **\n         * Multiplies a passed affine transform to the left: M * this.\n         - a (number)\n         - b (number)\n         - c (number)\n         - d (number)\n         - e (number)\n         - f (number)\n         * or\n         - matrix (object) @Matrix\n        \\*/\n        Matrix.prototype.multLeft = function (a, b, c, d, e, f) {\n            if (a && a instanceof Matrix) {\n                return this.multLeft(a.a, a.b, a.c, a.d, a.e, a.f);\n            }\n            var aNew = a * this.a + c * this.b,\n                cNew = a * this.c + c * this.d,\n                eNew = a * this.e + c * this.f + e;\n            this.b = b * this.a + d * this.b;\n            this.d = b * this.c + d * this.d;\n            this.f = b * this.e + d * this.f + f;\n\n            this.a = aNew;\n            this.c = cNew;\n            this.e = eNew;\n            return this;\n        };\n        /*\\\n         * Matrix.invert\n         [ method ]\n         **\n         * Returns an inverted version of the matrix\n         = (object) @Matrix\n        \\*/\n        matrixproto.invert = function () {\n            var me = this,\n                x = me.a * me.d - me.b * me.c;\n            return new Matrix(me.d / x, -me.b / x, -me.c / x, me.a / x, (me.c * me.f - me.d * me.e) / x, (me.b * me.e - me.a * me.f) / x);\n        };\n        /*\\\n         * Matrix.clone\n         [ method ]\n         **\n         * Returns a copy of the matrix\n         = (object) @Matrix\n        \\*/\n        matrixproto.clone = function () {\n            return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n        };\n        /*\\\n         * Matrix.translate\n         [ method ]\n         **\n         * Translate the matrix\n         - x (number) horizontal offset distance\n         - y (number) vertical offset distance\n        \\*/\n        matrixproto.translate = function (x, y) {\n            this.e += x * this.a + y * this.c;\n            this.f += x * this.b + y * this.d;\n            return this;\n        };\n        /*\\\n         * Matrix.scale\n         [ method ]\n         **\n         * Scales the matrix\n         - x (number) amount to be scaled, with `1` resulting in no change\n         - y (number) #optional amount to scale along the vertical axis. (Otherwise `x` applies to both axes.)\n         - cx (number) #optional horizontal origin point from which to scale\n         - cy (number) #optional vertical origin point from which to scale\n         * Default cx, cy is the middle point of the element.\n        \\*/\n        matrixproto.scale = function (x, y, cx, cy) {\n            y == null && (y = x);\n            (cx || cy) && this.translate(cx, cy);\n            this.a *= x;\n            this.b *= x;\n            this.c *= y;\n            this.d *= y;\n            (cx || cy) && this.translate(-cx, -cy);\n            return this;\n        };\n        /*\\\n         * Matrix.rotate\n         [ method ]\n         **\n         * Rotates the matrix\n         - a (number) angle of rotation, in degrees\n         - x (number) horizontal origin point from which to rotate\n         - y (number) vertical origin point from which to rotate\n        \\*/\n        matrixproto.rotate = function (a, x, y) {\n            a = Snap.rad(a);\n            x = x || 0;\n            y = y || 0;\n            var cos = +math.cos(a).toFixed(9),\n                sin = +math.sin(a).toFixed(9);\n            this.add(cos, sin, -sin, cos, x, y);\n            return this.add(1, 0, 0, 1, -x, -y);\n        };\n        /*\\\n         * Matrix.skewX\n         [ method ]\n         **\n         * Skews the matrix along the x-axis\n         - x (number) Angle to skew along the x-axis (in degrees).\n        \\*/\n        matrixproto.skewX = function (x) {\n            return this.skew(x, 0);\n        };\n        /*\\\n         * Matrix.skewY\n         [ method ]\n         **\n         * Skews the matrix along the y-axis\n         - y (number) Angle to skew along the y-axis (in degrees).\n        \\*/\n        matrixproto.skewY = function (y) {\n            return this.skew(0, y);\n        };\n        /*\\\n         * Matrix.skew\n         [ method ]\n         **\n         * Skews the matrix\n         - y (number) Angle to skew along the y-axis (in degrees).\n         - x (number) Angle to skew along the x-axis (in degrees).\n        \\*/\n        matrixproto.skew = function (x, y) {\n            x = x || 0;\n            y = y || 0;\n            x = Snap.rad(x);\n            y = Snap.rad(y);\n            var c = math.tan(x).toFixed(9);\n            var b = math.tan(y).toFixed(9);\n            return this.add(1, b, c, 1, 0, 0);\n        };\n        /*\\\n         * Matrix.x\n         [ method ]\n         **\n         * Returns x coordinate for given point after transformation described by the matrix. See also @Matrix.y\n         - x (number)\n         - y (number)\n         = (number) x\n        \\*/\n        matrixproto.x = function (x, y) {\n            return x * this.a + y * this.c + this.e;\n        };\n        /*\\\n         * Matrix.y\n         [ method ]\n         **\n         * Returns y coordinate for given point after transformation described by the matrix. See also @Matrix.x\n         - x (number)\n         - y (number)\n         = (number) y\n        \\*/\n        matrixproto.y = function (x, y) {\n            return x * this.b + y * this.d + this.f;\n        };\n        matrixproto.get = function (i) {\n            return +this[Str.fromCharCode(97 + i)].toFixed(4);\n        };\n        matrixproto.toString = function () {\n            return \"matrix(\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + \")\";\n        };\n        matrixproto.offset = function () {\n            return [this.e.toFixed(4), this.f.toFixed(4)];\n        };\n        function norm(a) {\n            return a[0] * a[0] + a[1] * a[1];\n        }\n        function normalize(a) {\n            var mag = math.sqrt(norm(a));\n            a[0] && (a[0] /= mag);\n            a[1] && (a[1] /= mag);\n        }\n        /*\\\n         * Matrix.determinant\n         [ method ]\n         **\n         * Finds determinant of the given matrix.\n         = (number) determinant\n        \\*/\n        matrixproto.determinant = function () {\n            return this.a * this.d - this.b * this.c;\n        };\n        /*\\\n         * Matrix.split\n         [ method ]\n         **\n         * Splits matrix into primitive transformations\n         = (object) in format:\n         o dx (number) translation by x\n         o dy (number) translation by y\n         o scalex (number) scale by x\n         o scaley (number) scale by y\n         o shear (number) shear\n         o rotate (number) rotation in deg\n         o isSimple (boolean) could it be represented via simple transformations\n        \\*/\n        matrixproto.split = function () {\n            var out = {};\n            // translation\n            out.dx = this.e;\n            out.dy = this.f;\n\n            // scale and shear\n            var row = [[this.a, this.b], [this.c, this.d]];\n            out.scalex = math.sqrt(norm(row[0]));\n            normalize(row[0]);\n\n            out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];\n            row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];\n\n            out.scaley = math.sqrt(norm(row[1]));\n            normalize(row[1]);\n            out.shear /= out.scaley;\n\n            if (this.determinant() < 0) {\n                out.scalex = -out.scalex;\n            }\n\n            // rotation\n            var sin = row[0][1],\n                cos = row[1][1];\n            if (cos < 0) {\n                out.rotate = Snap.deg(math.acos(cos));\n                if (sin < 0) {\n                    out.rotate = 360 - out.rotate;\n                }\n            } else {\n                out.rotate = Snap.deg(math.asin(sin));\n            }\n\n            out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);\n            out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;\n            out.noRotation = !+out.shear.toFixed(9) && !out.rotate;\n            return out;\n        };\n        /*\\\n         * Matrix.toTransformString\n         [ method ]\n         **\n         * Returns transform string that represents given matrix\n         = (string) transform string\n        \\*/\n        matrixproto.toTransformString = function (shorter) {\n            var s = shorter || this.split();\n            if (!+s.shear.toFixed(9)) {\n                s.scalex = +s.scalex.toFixed(4);\n                s.scaley = +s.scaley.toFixed(4);\n                s.rotate = +s.rotate.toFixed(4);\n                return  (s.dx || s.dy ? \"t\" + [+s.dx.toFixed(4), +s.dy.toFixed(4)] : E) +\n                        (s.rotate ? \"r\" + [+s.rotate.toFixed(4), 0, 0] : E) +\n                        (s.scalex != 1 || s.scaley != 1 ? \"s\" + [s.scalex, s.scaley, 0, 0] : E);\n            } else {\n                return \"m\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];\n            }\n        };\n    })(Matrix.prototype);\n    /*\\\n     * Snap.Matrix\n     [ method ]\n     **\n     * Matrix constructor, extend on your own risk.\n     * To create matrices use @Snap.matrix.\n    \\*/\n    Snap.Matrix = Matrix;\n    /*\\\n     * Snap.matrix\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns a matrix based on the given parameters\n     - a (number)\n     - b (number)\n     - c (number)\n     - d (number)\n     - e (number)\n     - f (number)\n     * or\n     - svgMatrix (SVGMatrix)\n     = (object) @Matrix\n    \\*/\n    Snap.matrix = function (a, b, c, d, e, f) {\n        return new Matrix(a, b, c, d, e, f);\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var has = \"hasOwnProperty\",\n        make = Snap._.make,\n        wrap = Snap._.wrap,\n        is = Snap.is,\n        getSomeDefs = Snap._.getSomeDefs,\n        reURLValue = /^url\\((['\"]?)([^)]+)\\1\\)$/,\n        $ = Snap._.$,\n        URL = Snap.url,\n        Str = String,\n        separator = Snap._.separator,\n        E = \"\";\n    /*\\\n     * Snap.deurl\n     [ method ]\n     **\n     * Unwraps path from `\"url(<path>)\"`.\n     - value (string) url path\n     = (string) unwrapped path\n    \\*/\n    Snap.deurl = function (value) {\n        var res = String(value).match(reURLValue);\n        return res ? res[2] : value;\n    }\n    // Attributes event handlers\n    eve.on(\"snap.util.attr.mask\", function (value) {\n        if (value instanceof Element || value instanceof Fragment) {\n            eve.stop();\n            if (value instanceof Fragment && value.node.childNodes.length == 1) {\n                value = value.node.firstChild;\n                getSomeDefs(this).appendChild(value);\n                value = wrap(value);\n            }\n            if (value.type == \"mask\") {\n                var mask = value;\n            } else {\n                mask = make(\"mask\", getSomeDefs(this));\n                mask.node.appendChild(value.node);\n            }\n            !mask.node.id && $(mask.node, {\n                id: mask.id\n            });\n            $(this.node, {\n                mask: URL(mask.id)\n            });\n        }\n    });\n    (function (clipIt) {\n        eve.on(\"snap.util.attr.clip\", clipIt);\n        eve.on(\"snap.util.attr.clip-path\", clipIt);\n        eve.on(\"snap.util.attr.clipPath\", clipIt);\n    }(function (value) {\n        if (value instanceof Element || value instanceof Fragment) {\n            eve.stop();\n            var clip,\n                node = value.node;\n            while (node) {\n                if (node.nodeName === \"clipPath\") {\n                    clip = new Element(node);\n                    break;\n                }\n                if (node.nodeName === \"svg\") {\n                    clip = undefined;\n                    break;\n                }\n                node = node.parentNode;\n            }\n            if (!clip) {\n                clip = make(\"clipPath\", getSomeDefs(this));\n                clip.node.appendChild(value.node);\n                !clip.node.id && $(clip.node, {\n                    id: clip.id\n                });\n            }\n            $(this.node, {\n                \"clip-path\": URL(clip.node.id || clip.id)\n            });\n        }\n    }));\n    function fillStroke(name) {\n        return function (value) {\n            eve.stop();\n            if (value instanceof Fragment && value.node.childNodes.length == 1 &&\n                (value.node.firstChild.tagName == \"radialGradient\" ||\n                value.node.firstChild.tagName == \"linearGradient\" ||\n                value.node.firstChild.tagName == \"pattern\")) {\n                value = value.node.firstChild;\n                getSomeDefs(this).appendChild(value);\n                value = wrap(value);\n            }\n            if (value instanceof Element) {\n                if (value.type == \"radialGradient\" || value.type == \"linearGradient\"\n                   || value.type == \"pattern\") {\n                    if (!value.node.id) {\n                        $(value.node, {\n                            id: value.id\n                        });\n                    }\n                    var fill = URL(value.node.id);\n                } else {\n                    fill = value.attr(name);\n                }\n            } else {\n                fill = Snap.color(value);\n                if (fill.error) {\n                    var grad = Snap(getSomeDefs(this).ownerSVGElement).gradient(value);\n                    if (grad) {\n                        if (!grad.node.id) {\n                            $(grad.node, {\n                                id: grad.id\n                            });\n                        }\n                        fill = URL(grad.node.id);\n                    } else {\n                        fill = value;\n                    }\n                } else {\n                    fill = Str(fill);\n                }\n            }\n            var attrs = {};\n            attrs[name] = fill;\n            $(this.node, attrs);\n            this.node.style[name] = E;\n        };\n    }\n    eve.on(\"snap.util.attr.fill\", fillStroke(\"fill\"));\n    eve.on(\"snap.util.attr.stroke\", fillStroke(\"stroke\"));\n    var gradrg = /^([lr])(?:\\(([^)]*)\\))?(.*)$/i;\n    eve.on(\"snap.util.grad.parse\", function parseGrad(string) {\n        string = Str(string);\n        var tokens = string.match(gradrg);\n        if (!tokens) {\n            return null;\n        }\n        var type = tokens[1],\n            params = tokens[2],\n            stops = tokens[3];\n        params = params.split(/\\s*,\\s*/).map(function (el) {\n            return +el == el ? +el : el;\n        });\n        if (params.length == 1 && params[0] == 0) {\n            params = [];\n        }\n        stops = stops.split(\"-\");\n        stops = stops.map(function (el) {\n            el = el.split(\":\");\n            var out = {\n                color: el[0]\n            };\n            if (el[1]) {\n                out.offset = parseFloat(el[1]);\n            }\n            return out;\n        });\n        var len = stops.length,\n            start = 0,\n            j = 0;\n        function seed(i, end) {\n            var step = (end - start) / (i - j);\n            for (var k = j; k < i; k++) {\n                stops[k].offset = +(+start + step * (k - j)).toFixed(2);\n            }\n            j = i;\n            start = end;\n        }\n        len--;\n        for (var i = 0; i < len; i++) if (\"offset\" in stops[i]) {\n            seed(i, stops[i].offset);\n        }\n        stops[len].offset = stops[len].offset || 100;\n        seed(len, stops[len].offset);\n        return {\n            type: type,\n            params: params,\n            stops: stops\n        };\n    });\n\n    eve.on(\"snap.util.attr.d\", function (value) {\n        eve.stop();\n        if (is(value, \"array\") && is(value[0], \"array\")) {\n            value = Snap.path.toString.call(value);\n        }\n        value = Str(value);\n        if (value.match(/[ruo]/i)) {\n            value = Snap.path.toAbsolute(value);\n        }\n        $(this.node, {d: value});\n    })(-1);\n    eve.on(\"snap.util.attr.#text\", function (value) {\n        eve.stop();\n        value = Str(value);\n        var txt = glob.doc.createTextNode(value);\n        while (this.node.firstChild) {\n            this.node.removeChild(this.node.firstChild);\n        }\n        this.node.appendChild(txt);\n    })(-1);\n    eve.on(\"snap.util.attr.path\", function (value) {\n        eve.stop();\n        this.attr({d: value});\n    })(-1);\n    eve.on(\"snap.util.attr.class\", function (value) {\n        eve.stop();\n        this.node.className.baseVal = value;\n    })(-1);\n    eve.on(\"snap.util.attr.viewBox\", function (value) {\n        var vb;\n        if (is(value, \"object\") && \"x\" in value) {\n            vb = [value.x, value.y, value.width, value.height].join(\" \");\n        } else if (is(value, \"array\")) {\n            vb = value.join(\" \");\n        } else {\n            vb = value;\n        }\n        $(this.node, {\n            viewBox: vb\n        });\n        eve.stop();\n    })(-1);\n    eve.on(\"snap.util.attr.transform\", function (value) {\n        this.transform(value);\n        eve.stop();\n    })(-1);\n    eve.on(\"snap.util.attr.r\", function (value) {\n        if (this.type == \"rect\") {\n            eve.stop();\n            $(this.node, {\n                rx: value,\n                ry: value\n            });\n        }\n    })(-1);\n    eve.on(\"snap.util.attr.textpath\", function (value) {\n        eve.stop();\n        if (this.type == \"text\") {\n            var id, tp, node;\n            if (!value && this.textPath) {\n                tp = this.textPath;\n                while (tp.node.firstChild) {\n                    this.node.appendChild(tp.node.firstChild);\n                }\n                tp.remove();\n                delete this.textPath;\n                return;\n            }\n            if (is(value, \"string\")) {\n                var defs = getSomeDefs(this),\n                    path = wrap(defs.parentNode).path(value);\n                defs.appendChild(path.node);\n                id = path.id;\n                path.attr({id: id});\n            } else {\n                value = wrap(value);\n                if (value instanceof Element) {\n                    id = value.attr(\"id\");\n                    if (!id) {\n                        id = value.id;\n                        value.attr({id: id});\n                    }\n                }\n            }\n            if (id) {\n                tp = this.textPath;\n                node = this.node;\n                if (tp) {\n                    tp.attr({\"xlink:href\": \"#\" + id});\n                } else {\n                    tp = $(\"textPath\", {\n                        \"xlink:href\": \"#\" + id\n                    });\n                    while (node.firstChild) {\n                        tp.appendChild(node.firstChild);\n                    }\n                    node.appendChild(tp);\n                    this.textPath = wrap(tp);\n                }\n            }\n        }\n    })(-1);\n    eve.on(\"snap.util.attr.text\", function (value) {\n        if (this.type == \"text\") {\n            var i = 0,\n                node = this.node,\n                tuner = function (chunk) {\n                    var out = $(\"tspan\");\n                    if (is(chunk, \"array\")) {\n                        for (var i = 0; i < chunk.length; i++) {\n                            out.appendChild(tuner(chunk[i]));\n                        }\n                    } else {\n                        out.appendChild(glob.doc.createTextNode(chunk));\n                    }\n                    out.normalize && out.normalize();\n                    return out;\n                };\n            while (node.firstChild) {\n                node.removeChild(node.firstChild);\n            }\n            var tuned = tuner(value);\n            while (tuned.firstChild) {\n                node.appendChild(tuned.firstChild);\n            }\n        }\n        eve.stop();\n    })(-1);\n    function setFontSize(value) {\n        eve.stop();\n        if (value == +value) {\n            value += \"px\";\n        }\n        this.node.style.fontSize = value;\n    }\n    eve.on(\"snap.util.attr.fontSize\", setFontSize)(-1);\n    eve.on(\"snap.util.attr.font-size\", setFontSize)(-1);\n\n\n    eve.on(\"snap.util.getattr.transform\", function () {\n        eve.stop();\n        return this.transform();\n    })(-1);\n    eve.on(\"snap.util.getattr.textpath\", function () {\n        eve.stop();\n        return this.textPath;\n    })(-1);\n    // Markers\n    (function () {\n        function getter(end) {\n            return function () {\n                eve.stop();\n                var style = glob.doc.defaultView.getComputedStyle(this.node, null).getPropertyValue(\"marker-\" + end);\n                if (style == \"none\") {\n                    return style;\n                } else {\n                    return Snap(glob.doc.getElementById(style.match(reURLValue)[1]));\n                }\n            };\n        }\n        function setter(end) {\n            return function (value) {\n                eve.stop();\n                var name = \"marker\" + end.charAt(0).toUpperCase() + end.substring(1);\n                if (value == \"\" || !value) {\n                    this.node.style[name] = \"none\";\n                    return;\n                }\n                if (value.type == \"marker\") {\n                    var id = value.node.id;\n                    if (!id) {\n                        $(value.node, {id: value.id});\n                    }\n                    this.node.style[name] = URL(id);\n                    return;\n                }\n            };\n        }\n        eve.on(\"snap.util.getattr.marker-end\", getter(\"end\"))(-1);\n        eve.on(\"snap.util.getattr.markerEnd\", getter(\"end\"))(-1);\n        eve.on(\"snap.util.getattr.marker-start\", getter(\"start\"))(-1);\n        eve.on(\"snap.util.getattr.markerStart\", getter(\"start\"))(-1);\n        eve.on(\"snap.util.getattr.marker-mid\", getter(\"mid\"))(-1);\n        eve.on(\"snap.util.getattr.markerMid\", getter(\"mid\"))(-1);\n        eve.on(\"snap.util.attr.marker-end\", setter(\"end\"))(-1);\n        eve.on(\"snap.util.attr.markerEnd\", setter(\"end\"))(-1);\n        eve.on(\"snap.util.attr.marker-start\", setter(\"start\"))(-1);\n        eve.on(\"snap.util.attr.markerStart\", setter(\"start\"))(-1);\n        eve.on(\"snap.util.attr.marker-mid\", setter(\"mid\"))(-1);\n        eve.on(\"snap.util.attr.markerMid\", setter(\"mid\"))(-1);\n    }());\n    eve.on(\"snap.util.getattr.r\", function () {\n        if (this.type == \"rect\" && $(this.node, \"rx\") == $(this.node, \"ry\")) {\n            eve.stop();\n            return $(this.node, \"rx\");\n        }\n    })(-1);\n    function textExtract(node) {\n        var out = [];\n        var children = node.childNodes;\n        for (var i = 0, ii = children.length; i < ii; i++) {\n            var chi = children[i];\n            if (chi.nodeType == 3) {\n                out.push(chi.nodeValue);\n            }\n            if (chi.tagName == \"tspan\") {\n                if (chi.childNodes.length == 1 && chi.firstChild.nodeType == 3) {\n                    out.push(chi.firstChild.nodeValue);\n                } else {\n                    out.push(textExtract(chi));\n                }\n            }\n        }\n        return out;\n    }\n    eve.on(\"snap.util.getattr.text\", function () {\n        if (this.type == \"text\" || this.type == \"tspan\") {\n            eve.stop();\n            var out = textExtract(this.node);\n            return out.length == 1 ? out[0] : out;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.#text\", function () {\n        return this.node.textContent;\n    })(-1);\n    eve.on(\"snap.util.getattr.fill\", function (internal) {\n        if (internal) {\n            return;\n        }\n        eve.stop();\n        var value = eve(\"snap.util.getattr.fill\", this, true).firstDefined();\n        return Snap(Snap.deurl(value)) || value;\n    })(-1);\n    eve.on(\"snap.util.getattr.stroke\", function (internal) {\n        if (internal) {\n            return;\n        }\n        eve.stop();\n        var value = eve(\"snap.util.getattr.stroke\", this, true).firstDefined();\n        return Snap(Snap.deurl(value)) || value;\n    })(-1);\n    eve.on(\"snap.util.getattr.viewBox\", function () {\n        eve.stop();\n        var vb = $(this.node, \"viewBox\");\n        if (vb) {\n            vb = vb.split(separator);\n            return Snap._.box(+vb[0], +vb[1], +vb[2], +vb[3]);\n        } else {\n            return;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.points\", function () {\n        var p = $(this.node, \"points\");\n        eve.stop();\n        if (p) {\n            return p.split(separator);\n        } else {\n            return;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.path\", function () {\n        var p = $(this.node, \"d\");\n        eve.stop();\n        return p;\n    })(-1);\n    eve.on(\"snap.util.getattr.class\", function () {\n        return this.node.className.baseVal;\n    })(-1);\n    function getFontSize() {\n        eve.stop();\n        return this.node.style.fontSize;\n    }\n    eve.on(\"snap.util.getattr.fontSize\", getFontSize)(-1);\n    eve.on(\"snap.util.getattr.font-size\", getFontSize)(-1);\n});\n\n// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var rgNotSpace = /\\S+/g,\n        rgBadSpace = /[\\t\\r\\n\\f]/g,\n        rgTrim = /(^\\s+|\\s+$)/g,\n        Str = String,\n        elproto = Element.prototype;\n    /*\\\n     * Element.addClass\n     [ method ]\n     **\n     * Adds given class name or list of class names to the element.\n     - value (string) class name or space separated list of class names\n     **\n     = (Element) original element.\n    \\*/\n    elproto.addClass = function (value) {\n        var classes = Str(value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n\n        if (classes.length) {\n            j = 0;\n            while (clazz = classes[j++]) {\n                pos = curClasses.indexOf(clazz);\n                if (!~pos) {\n                    curClasses.push(clazz);\n                }\n            }\n\n            finalValue = curClasses.join(\" \");\n            if (className != finalValue) {\n                elem.className.baseVal = finalValue;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Element.removeClass\n     [ method ]\n     **\n     * Removes given class name or list of class names from the element.\n     - value (string) class name or space separated list of class names\n     **\n     = (Element) original element.\n    \\*/\n    elproto.removeClass = function (value) {\n        var classes = Str(value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n        if (curClasses.length) {\n            j = 0;\n            while (clazz = classes[j++]) {\n                pos = curClasses.indexOf(clazz);\n                if (~pos) {\n                    curClasses.splice(pos, 1);\n                }\n            }\n\n            finalValue = curClasses.join(\" \");\n            if (className != finalValue) {\n                elem.className.baseVal = finalValue;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Element.hasClass\n     [ method ]\n     **\n     * Checks if the element has a given class name in the list of class names applied to it.\n     - value (string) class name\n     **\n     = (boolean) `true` if the element has given class\n    \\*/\n    elproto.hasClass = function (value) {\n        var elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [];\n        return !!~curClasses.indexOf(value);\n    };\n    /*\\\n     * Element.toggleClass\n     [ method ]\n     **\n     * Add or remove one or more classes from the element, depending on either\n     * the class’s presence or the value of the `flag` argument.\n     - value (string) class name or space separated list of class names\n     - flag (boolean) value to determine whether the class should be added or removed\n     **\n     = (Element) original element.\n    \\*/\n    elproto.toggleClass = function (value, flag) {\n        if (flag != null) {\n            if (flag) {\n                return this.addClass(value);\n            } else {\n                return this.removeClass(value);\n            }\n        }\n        var classes = (value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n        j = 0;\n        while (clazz = classes[j++]) {\n            pos = curClasses.indexOf(clazz);\n            if (~pos) {\n                curClasses.splice(pos, 1);\n            } else {\n                curClasses.push(clazz);\n            }\n        }\n\n        finalValue = curClasses.join(\" \");\n        if (className != finalValue) {\n            elem.className.baseVal = finalValue;\n        }\n        return this;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var operators = {\n            \"+\": function (x, y) {\n                    return x + y;\n                },\n            \"-\": function (x, y) {\n                    return x - y;\n                },\n            \"/\": function (x, y) {\n                    return x / y;\n                },\n            \"*\": function (x, y) {\n                    return x * y;\n                }\n        },\n        Str = String,\n        reUnit = /[a-z]+$/i,\n        reAddon = /^\\s*([+\\-\\/*])\\s*=\\s*([\\d.eE+\\-]+)\\s*([^\\d\\s]+)?\\s*$/;\n    function getNumber(val) {\n        return val;\n    }\n    function getUnit(unit) {\n        return function (val) {\n            return +val.toFixed(3) + unit;\n        };\n    }\n    eve.on(\"snap.util.attr\", function (val) {\n        var plus = Str(val).match(reAddon);\n        if (plus) {\n            var evnt = eve.nt(),\n                name = evnt.substring(evnt.lastIndexOf(\".\") + 1),\n                a = this.attr(name),\n                atr = {};\n            eve.stop();\n            var unit = plus[3] || \"\",\n                aUnit = a.match(reUnit),\n                op = operators[plus[1]];\n            if (aUnit && aUnit == unit) {\n                val = op(parseFloat(a), +plus[2]);\n            } else {\n                a = this.asPX(name);\n                val = op(this.asPX(name), this.asPX(name, plus[2] + unit));\n            }\n            if (isNaN(a) || isNaN(val)) {\n                return;\n            }\n            atr[name] = val;\n            this.attr(atr);\n        }\n    })(-10);\n    eve.on(\"snap.util.equal\", function (name, b) {\n        var A, B, a = Str(this.attr(name) || \"\"),\n            el = this,\n            bplus = Str(b).match(reAddon);\n        if (bplus) {\n            eve.stop();\n            var unit = bplus[3] || \"\",\n                aUnit = a.match(reUnit),\n                op = operators[bplus[1]];\n            if (aUnit && aUnit == unit) {\n                return {\n                    from: parseFloat(a),\n                    to: op(parseFloat(a), +bplus[2]),\n                    f: getUnit(aUnit)\n                };\n            } else {\n                a = this.asPX(name);\n                return {\n                    from: a,\n                    to: op(a, this.asPX(name, bplus[2] + unit)),\n                    f: getNumber\n                };\n            }\n        }\n    })(-10);\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var proto = Paper.prototype,\n        is = Snap.is;\n    /*\\\n     * Paper.rect\n     [ method ]\n     *\n     * Draws a rectangle\n     **\n     - x (number) x coordinate of the top left corner\n     - y (number) y coordinate of the top left corner\n     - width (number) width\n     - height (number) height\n     - rx (number) #optional horizontal radius for rounded corners, default is 0\n     - ry (number) #optional vertical radius for rounded corners, default is rx or 0\n     = (object) the `rect` element\n     **\n     > Usage\n     | // regular rectangle\n     | var c = paper.rect(10, 10, 50, 50);\n     | // rectangle with rounded corners\n     | var c = paper.rect(40, 40, 50, 50, 10);\n    \\*/\n    proto.rect = function (x, y, w, h, rx, ry) {\n        var attr;\n        if (ry == null) {\n            ry = rx;\n        }\n        if (is(x, \"object\") && x == \"[object Object]\") {\n            attr = x;\n        } else if (x != null) {\n            attr = {\n                x: x,\n                y: y,\n                width: w,\n                height: h\n            };\n            if (rx != null) {\n                attr.rx = rx;\n                attr.ry = ry;\n            }\n        }\n        return this.el(\"rect\", attr);\n    };\n    /*\\\n     * Paper.circle\n     [ method ]\n     **\n     * Draws a circle\n     **\n     - x (number) x coordinate of the centre\n     - y (number) y coordinate of the centre\n     - r (number) radius\n     = (object) the `circle` element\n     **\n     > Usage\n     | var c = paper.circle(50, 50, 40);\n    \\*/\n    proto.circle = function (cx, cy, r) {\n        var attr;\n        if (is(cx, \"object\") && cx == \"[object Object]\") {\n            attr = cx;\n        } else if (cx != null) {\n            attr = {\n                cx: cx,\n                cy: cy,\n                r: r\n            };\n        }\n        return this.el(\"circle\", attr);\n    };\n\n    var preload = (function () {\n        function onerror() {\n            this.parentNode.removeChild(this);\n        }\n        return function (src, f) {\n            var img = glob.doc.createElement(\"img\"),\n                body = glob.doc.body;\n            img.style.cssText = \"position:absolute;left:-9999em;top:-9999em\";\n            img.onload = function () {\n                f.call(img);\n                img.onload = img.onerror = null;\n                body.removeChild(img);\n            };\n            img.onerror = onerror;\n            body.appendChild(img);\n            img.src = src;\n        };\n    }());\n\n    /*\\\n     * Paper.image\n     [ method ]\n     **\n     * Places an image on the surface\n     **\n     - src (string) URI of the source image\n     - x (number) x offset position\n     - y (number) y offset position\n     - width (number) width of the image\n     - height (number) height of the image\n     = (object) the `image` element\n     * or\n     = (object) Snap element object with type `image`\n     **\n     > Usage\n     | var c = paper.image(\"apple.png\", 10, 10, 80, 80);\n    \\*/\n    proto.image = function (src, x, y, width, height) {\n        var el = this.el(\"image\");\n        if (is(src, \"object\") && \"src\" in src) {\n            el.attr(src);\n        } else if (src != null) {\n            var set = {\n                \"xlink:href\": src,\n                preserveAspectRatio: \"none\"\n            };\n            if (x != null && y != null) {\n                set.x = x;\n                set.y = y;\n            }\n            if (width != null && height != null) {\n                set.width = width;\n                set.height = height;\n            } else {\n                preload(src, function () {\n                    Snap._.$(el.node, {\n                        width: this.offsetWidth,\n                        height: this.offsetHeight\n                    });\n                });\n            }\n            Snap._.$(el.node, set);\n        }\n        return el;\n    };\n    /*\\\n     * Paper.ellipse\n     [ method ]\n     **\n     * Draws an ellipse\n     **\n     - x (number) x coordinate of the centre\n     - y (number) y coordinate of the centre\n     - rx (number) horizontal radius\n     - ry (number) vertical radius\n     = (object) the `ellipse` element\n     **\n     > Usage\n     | var c = paper.ellipse(50, 50, 40, 20);\n    \\*/\n    proto.ellipse = function (cx, cy, rx, ry) {\n        var attr;\n        if (is(cx, \"object\") && cx == \"[object Object]\") {\n            attr = cx;\n        } else if (cx != null) {\n            attr ={\n                cx: cx,\n                cy: cy,\n                rx: rx,\n                ry: ry\n            };\n        }\n        return this.el(\"ellipse\", attr);\n    };\n    // SIERRA Paper.path(): Unclear from the link what a Catmull-Rom curveto is, and why it would make life any easier.\n    /*\\\n     * Paper.path\n     [ method ]\n     **\n     * Creates a `<path>` element using the given string as the path's definition\n     - pathString (string) #optional path string in SVG format\n     * Path string consists of one-letter commands, followed by comma seprarated arguments in numerical form. Example:\n     | \"M10,20L30,40\"\n     * This example features two commands: `M`, with arguments `(10, 20)` and `L` with arguments `(30, 40)`. Uppercase letter commands express coordinates in absolute terms, while lowercase commands express them in relative terms from the most recently declared coordinates.\n     *\n     # <p>Here is short list of commands available, for more details see <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path's data attribute's format are described in the SVG specification.\">SVG path string format</a> or <a href=\"https://developer.mozilla.org/en/SVG/Tutorial/Paths\">article about path strings at MDN</a>.</p>\n     # <table><thead><tr><th>Command</th><th>Name</th><th>Parameters</th></tr></thead><tbody>\n     # <tr><td>M</td><td>moveto</td><td>(x y)+</td></tr>\n     # <tr><td>Z</td><td>closepath</td><td>(none)</td></tr>\n     # <tr><td>L</td><td>lineto</td><td>(x y)+</td></tr>\n     # <tr><td>H</td><td>horizontal lineto</td><td>x+</td></tr>\n     # <tr><td>V</td><td>vertical lineto</td><td>y+</td></tr>\n     # <tr><td>C</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td></tr>\n     # <tr><td>S</td><td>smooth curveto</td><td>(x2 y2 x y)+</td></tr>\n     # <tr><td>Q</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td></tr>\n     # <tr><td>T</td><td>smooth quadratic Bézier curveto</td><td>(x y)+</td></tr>\n     # <tr><td>A</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+</td></tr>\n     # <tr><td>R</td><td><a href=\"http://en.wikipedia.org/wiki/Catmull–Rom_spline#Catmull.E2.80.93Rom_spline\">Catmull-Rom curveto</a>*</td><td>x1 y1 (x y)+</td></tr></tbody></table>\n     * * _Catmull-Rom curveto_ is a not standard SVG command and added to make life easier.\n     * Note: there is a special case when a path consists of only three commands: `M10,10R…z`. In this case the path connects back to its starting point.\n     > Usage\n     | var c = paper.path(\"M10 10L90 90\");\n     | // draw a diagonal line:\n     | // move to 10,10, line to 90,90\n    \\*/\n    proto.path = function (d) {\n        var attr;\n        if (is(d, \"object\") && !is(d, \"array\")) {\n            attr = d;\n        } else if (d) {\n            attr = {d: d};\n        }\n        return this.el(\"path\", attr);\n    };\n    /*\\\n     * Paper.g\n     [ method ]\n     **\n     * Creates a group element\n     **\n     - varargs (…) #optional elements to nest within the group\n     = (object) the `g` element\n     **\n     > Usage\n     | var c1 = paper.circle(),\n     |     c2 = paper.rect(),\n     |     g = paper.g(c2, c1); // note that the order of elements is different\n     * or\n     | var c1 = paper.circle(),\n     |     c2 = paper.rect(),\n     |     g = paper.g();\n     | g.add(c2, c1);\n    \\*/\n    /*\\\n     * Paper.group\n     [ method ]\n     **\n     * See @Paper.g\n    \\*/\n    proto.group = proto.g = function (first) {\n        var attr,\n            el = this.el(\"g\");\n        if (arguments.length == 1 && first && !first.type) {\n            el.attr(first);\n        } else if (arguments.length) {\n            el.add(Array.prototype.slice.call(arguments, 0));\n        }\n        return el;\n    };\n    /*\\\n     * Paper.svg\n     [ method ]\n     **\n     * Creates a nested SVG element.\n     - x (number) @optional X of the element\n     - y (number) @optional Y of the element\n     - width (number) @optional width of the element\n     - height (number) @optional height of the element\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     **\n     = (object) the `svg` element\n     **\n    \\*/\n    proto.svg = function (x, y, width, height, vbx, vby, vbw, vbh) {\n        var attrs = {};\n        if (is(x, \"object\") && y == null) {\n            attrs = x;\n        } else {\n            if (x != null) {\n                attrs.x = x;\n            }\n            if (y != null) {\n                attrs.y = y;\n            }\n            if (width != null) {\n                attrs.width = width;\n            }\n            if (height != null) {\n                attrs.height = height;\n            }\n            if (vbx != null && vby != null && vbw != null && vbh != null) {\n                attrs.viewBox = [vbx, vby, vbw, vbh];\n            }\n        }\n        return this.el(\"svg\", attrs);\n    };\n    /*\\\n     * Paper.mask\n     [ method ]\n     **\n     * Equivalent in behaviour to @Paper.g, except it’s a mask.\n     **\n     = (object) the `mask` element\n     **\n    \\*/\n    proto.mask = function (first) {\n        var attr,\n            el = this.el(\"mask\");\n        if (arguments.length == 1 && first && !first.type) {\n            el.attr(first);\n        } else if (arguments.length) {\n            el.add(Array.prototype.slice.call(arguments, 0));\n        }\n        return el;\n    };\n    /*\\\n     * Paper.ptrn\n     [ method ]\n     **\n     * Equivalent in behaviour to @Paper.g, except it’s a pattern.\n     - x (number) @optional X of the element\n     - y (number) @optional Y of the element\n     - width (number) @optional width of the element\n     - height (number) @optional height of the element\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     **\n     = (object) the `pattern` element\n     **\n    \\*/\n    proto.ptrn = function (x, y, width, height, vx, vy, vw, vh) {\n        if (is(x, \"object\")) {\n            var attr = x;\n        } else {\n            attr = {patternUnits: \"userSpaceOnUse\"};\n            if (x) {\n                attr.x = x;\n            }\n            if (y) {\n                attr.y = y;\n            }\n            if (width != null) {\n                attr.width = width;\n            }\n            if (height != null) {\n                attr.height = height;\n            }\n            if (vx != null && vy != null && vw != null && vh != null) {\n                attr.viewBox = [vx, vy, vw, vh];\n            } else {\n                attr.viewBox = [x || 0, y || 0, width || 0, height || 0];\n            }\n        }\n        return this.el(\"pattern\", attr);\n    };\n    /*\\\n     * Paper.use\n     [ method ]\n     **\n     * Creates a <use> element.\n     - id (string) @optional id of element to link\n     * or\n     - id (Element) @optional element to link\n     **\n     = (object) the `use` element\n     **\n    \\*/\n    proto.use = function (id) {\n        if (id != null) {\n            if (id instanceof Element) {\n                if (!id.attr(\"id\")) {\n                    id.attr({id: Snap._.id(id)});\n                }\n                id = id.attr(\"id\");\n            }\n            if (String(id).charAt() == \"#\") {\n                id = id.substring(1);\n            }\n            return this.el(\"use\", {\"xlink:href\": \"#\" + id});\n        } else {\n            return Element.prototype.use.call(this);\n        }\n    };\n    /*\\\n     * Paper.symbol\n     [ method ]\n     **\n     * Creates a <symbol> element.\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     = (object) the `symbol` element\n     **\n    \\*/\n    proto.symbol = function (vx, vy, vw, vh) {\n        var attr = {};\n        if (vx != null && vy != null && vw != null && vh != null) {\n            attr.viewBox = [vx, vy, vw, vh];\n        }\n\n        return this.el(\"symbol\", attr);\n    };\n    /*\\\n     * Paper.text\n     [ method ]\n     **\n     * Draws a text string\n     **\n     - x (number) x coordinate position\n     - y (number) y coordinate position\n     - text (string|array) The text string to draw or array of strings to nest within separate `<tspan>` elements\n     = (object) the `text` element\n     **\n     > Usage\n     | var t1 = paper.text(50, 50, \"Snap\");\n     | var t2 = paper.text(50, 50, [\"S\",\"n\",\"a\",\"p\"]);\n     | // Text path usage\n     | t1.attr({textpath: \"M10,10L100,100\"});\n     | // or\n     | var pth = paper.path(\"M10,10L100,100\");\n     | t1.attr({textpath: pth});\n    \\*/\n    proto.text = function (x, y, text) {\n        var attr = {};\n        if (is(x, \"object\")) {\n            attr = x;\n        } else if (x != null) {\n            attr = {\n                x: x,\n                y: y,\n                text: text || \"\"\n            };\n        }\n        return this.el(\"text\", attr);\n    };\n    /*\\\n     * Paper.line\n     [ method ]\n     **\n     * Draws a line\n     **\n     - x1 (number) x coordinate position of the start\n     - y1 (number) y coordinate position of the start\n     - x2 (number) x coordinate position of the end\n     - y2 (number) y coordinate position of the end\n     = (object) the `line` element\n     **\n     > Usage\n     | var t1 = paper.line(50, 50, 100, 100);\n    \\*/\n    proto.line = function (x1, y1, x2, y2) {\n        var attr = {};\n        if (is(x1, \"object\")) {\n            attr = x1;\n        } else if (x1 != null) {\n            attr = {\n                x1: x1,\n                x2: x2,\n                y1: y1,\n                y2: y2\n            };\n        }\n        return this.el(\"line\", attr);\n    };\n    /*\\\n     * Paper.polyline\n     [ method ]\n     **\n     * Draws a polyline\n     **\n     - points (array) array of points\n     * or\n     - varargs (…) points\n     = (object) the `polyline` element\n     **\n     > Usage\n     | var p1 = paper.polyline([10, 10, 100, 100]);\n     | var p2 = paper.polyline(10, 10, 100, 100);\n    \\*/\n    proto.polyline = function (points) {\n        if (arguments.length > 1) {\n            points = Array.prototype.slice.call(arguments, 0);\n        }\n        var attr = {};\n        if (is(points, \"object\") && !is(points, \"array\")) {\n            attr = points;\n        } else if (points != null) {\n            attr = {points: points};\n        }\n        return this.el(\"polyline\", attr);\n    };\n    /*\\\n     * Paper.polygon\n     [ method ]\n     **\n     * Draws a polygon. See @Paper.polyline\n    \\*/\n    proto.polygon = function (points) {\n        if (arguments.length > 1) {\n            points = Array.prototype.slice.call(arguments, 0);\n        }\n        var attr = {};\n        if (is(points, \"object\") && !is(points, \"array\")) {\n            attr = points;\n        } else if (points != null) {\n            attr = {points: points};\n        }\n        return this.el(\"polygon\", attr);\n    };\n    // gradients\n    (function () {\n        var $ = Snap._.$;\n        // gradients' helpers\n        /*\\\n         * Element.stops\n         [ method ]\n         **\n         * Only for gradients!\n         * Returns array of gradient stops elements.\n         = (array) the stops array.\n        \\*/\n        function Gstops() {\n            return this.selectAll(\"stop\");\n        }\n        /*\\\n         * Element.addStop\n         [ method ]\n         **\n         * Only for gradients!\n         * Adds another stop to the gradient.\n         - color (string) stops color\n         - offset (number) stops offset 0..100\n         = (object) gradient element\n        \\*/\n        function GaddStop(color, offset) {\n            var stop = $(\"stop\"),\n                attr = {\n                    offset: +offset + \"%\"\n                };\n            color = Snap.color(color);\n            attr[\"stop-color\"] = color.hex;\n            if (color.opacity < 1) {\n                attr[\"stop-opacity\"] = color.opacity;\n            }\n            $(stop, attr);\n            var stops = this.stops(),\n                inserted;\n            for (var i = 0; i < stops.length; i++) {\n                var stopOffset = parseFloat(stops[i].attr(\"offset\"));\n                if (stopOffset > offset) {\n                    this.node.insertBefore(stop, stops[i].node);\n                    inserted = true;\n                    break;\n                }\n            }\n            if (!inserted) {\n                this.node.appendChild(stop);\n            }\n            return this;\n        }\n        function GgetBBox() {\n            if (this.type == \"linearGradient\") {\n                var x1 = $(this.node, \"x1\") || 0,\n                    x2 = $(this.node, \"x2\") || 1,\n                    y1 = $(this.node, \"y1\") || 0,\n                    y2 = $(this.node, \"y2\") || 0;\n                return Snap._.box(x1, y1, math.abs(x2 - x1), math.abs(y2 - y1));\n            } else {\n                var cx = this.node.cx || .5,\n                    cy = this.node.cy || .5,\n                    r = this.node.r || 0;\n                return Snap._.box(cx - r, cy - r, r * 2, r * 2);\n            }\n        }\n        /*\\\n         * Element.setStops\n         [ method ]\n         **\n         * Only for gradients!\n         * Updates stops of the gradient based on passed gradient descriptor. See @Ppaer.gradient\n         - str (string) gradient descriptor part after `()`.\n         = (object) gradient element\n         | var g = paper.gradient(\"l(0, 0, 1, 1)#000-#f00-#fff\");\n         | g.setStops(\"#fff-#000-#f00-#fc0\");\n        \\*/\n        function GsetStops(str) {\n            var grad = str,\n                stops = this.stops();\n            if (typeof str == \"string\") {\n                grad = eve(\"snap.util.grad.parse\", null, \"l(0,0,0,1)\" + str).firstDefined().stops;\n            }\n            if (!Snap.is(grad, \"array\")) {\n                return;\n            }\n            for (var i = 0; i < stops.length; i++) {\n                if (grad[i]) {\n                    var color = Snap.color(grad[i].color),\n                        attr = {\"offset\": grad[i].offset + \"%\"};\n                    attr[\"stop-color\"] = color.hex;\n                    if (color.opacity < 1) {\n                        attr[\"stop-opacity\"] = color.opacity;\n                    }\n                    stops[i].attr(attr);\n                } else {\n                    stops[i].remove();\n                }\n            }\n            for (i = stops.length; i < grad.length; i++) {\n                this.addStop(grad[i].color, grad[i].offset);\n            }\n            return this;\n        }\n        function gradient(defs, str) {\n            var grad = eve(\"snap.util.grad.parse\", null, str).firstDefined(),\n                el;\n            if (!grad) {\n                return null;\n            }\n            grad.params.unshift(defs);\n            if (grad.type.toLowerCase() == \"l\") {\n                el = gradientLinear.apply(0, grad.params);\n            } else {\n                el = gradientRadial.apply(0, grad.params);\n            }\n            if (grad.type != grad.type.toLowerCase()) {\n                $(el.node, {\n                    gradientUnits: \"userSpaceOnUse\"\n                });\n            }\n            var stops = grad.stops,\n                len = stops.length;\n            for (var i = 0; i < len; i++) {\n                var stop = stops[i];\n                el.addStop(stop.color, stop.offset);\n            }\n            return el;\n        }\n        function gradientLinear(defs, x1, y1, x2, y2) {\n            var el = Snap._.make(\"linearGradient\", defs);\n            el.stops = Gstops;\n            el.addStop = GaddStop;\n            el.getBBox = GgetBBox;\n            el.setStops = GsetStops;\n            if (x1 != null) {\n                $(el.node, {\n                    x1: x1,\n                    y1: y1,\n                    x2: x2,\n                    y2: y2\n                });\n            }\n            return el;\n        }\n        function gradientRadial(defs, cx, cy, r, fx, fy) {\n            var el = Snap._.make(\"radialGradient\", defs);\n            el.stops = Gstops;\n            el.addStop = GaddStop;\n            el.getBBox = GgetBBox;\n            if (cx != null) {\n                $(el.node, {\n                    cx: cx,\n                    cy: cy,\n                    r: r\n                });\n            }\n            if (fx != null && fy != null) {\n                $(el.node, {\n                    fx: fx,\n                    fy: fy\n                });\n            }\n            return el;\n        }\n        /*\\\n         * Paper.gradient\n         [ method ]\n         **\n         * Creates a gradient element\n         **\n         - gradient (string) gradient descriptor\n         > Gradient Descriptor\n         * The gradient descriptor is an expression formatted as\n         * follows: `<type>(<coords>)<colors>`.  The `<type>` can be\n         * either linear or radial.  The uppercase `L` or `R` letters\n         * indicate absolute coordinates offset from the SVG surface.\n         * Lowercase `l` or `r` letters indicate coordinates\n         * calculated relative to the element to which the gradient is\n         * applied.  Coordinates specify a linear gradient vector as\n         * `x1`, `y1`, `x2`, `y2`, or a radial gradient as `cx`, `cy`,\n         * `r` and optional `fx`, `fy` specifying a focal point away\n         * from the center of the circle. Specify `<colors>` as a list\n         * of dash-separated CSS color values.  Each color may be\n         * followed by a custom offset value, separated with a colon\n         * character.\n         > Examples\n         * Linear gradient, relative from top-left corner to bottom-right\n         * corner, from black through red to white:\n         | var g = paper.gradient(\"l(0, 0, 1, 1)#000-#f00-#fff\");\n         * Linear gradient, absolute from (0, 0) to (100, 100), from black\n         * through red at 25% to white:\n         | var g = paper.gradient(\"L(0, 0, 100, 100)#000-#f00:25-#fff\");\n         * Radial gradient, relative from the center of the element with radius\n         * half the width, from black to white:\n         | var g = paper.gradient(\"r(0.5, 0.5, 0.5)#000-#fff\");\n         * To apply the gradient:\n         | paper.circle(50, 50, 40).attr({\n         |     fill: g\n         | });\n         = (object) the `gradient` element\n        \\*/\n        proto.gradient = function (str) {\n            return gradient(this.defs, str);\n        };\n        proto.gradientLinear = function (x1, y1, x2, y2) {\n            return gradientLinear(this.defs, x1, y1, x2, y2);\n        };\n        proto.gradientRadial = function (cx, cy, r, fx, fy) {\n            return gradientRadial(this.defs, cx, cy, r, fx, fy);\n        };\n        /*\\\n         * Paper.toString\n         [ method ]\n         **\n         * Returns SVG code for the @Paper\n         = (string) SVG code for the @Paper\n        \\*/\n        proto.toString = function () {\n            var doc = this.node.ownerDocument,\n                f = doc.createDocumentFragment(),\n                d = doc.createElement(\"div\"),\n                svg = this.node.cloneNode(true),\n                res;\n            f.appendChild(d);\n            d.appendChild(svg);\n            Snap._.$(svg, {xmlns: \"http://www.w3.org/2000/svg\"});\n            res = d.innerHTML;\n            f.removeChild(f.firstChild);\n            return res;\n        };\n        /*\\\n         * Paper.toDataURL\n         [ method ]\n         **\n         * Returns SVG code for the @Paper as Data URI string.\n         = (string) Data URI string\n        \\*/\n        proto.toDataURL = function () {\n            if (window && window.btoa) {\n                return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(this)));\n            }\n        };\n        /*\\\n         * Paper.clear\n         [ method ]\n         **\n         * Removes all child nodes of the paper, except <defs>.\n        \\*/\n        proto.clear = function () {\n            var node = this.node.firstChild,\n                next;\n            while (node) {\n                next = node.nextSibling;\n                if (node.tagName != \"defs\") {\n                    node.parentNode.removeChild(node);\n                } else {\n                    proto.clear.call({node: node});\n                }\n                node = next;\n            }\n        };\n    }());\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        clone = Snap._.clone,\n        has = \"hasOwnProperty\",\n        p2s = /,?([a-z]),?/gi,\n        toFloat = parseFloat,\n        math = Math,\n        PI = math.PI,\n        mmin = math.min,\n        mmax = math.max,\n        pow = math.pow,\n        abs = math.abs;\n    function paths(ps) {\n        var p = paths.ps = paths.ps || {};\n        if (p[ps]) {\n            p[ps].sleep = 100;\n        } else {\n            p[ps] = {\n                sleep: 100\n            };\n        }\n        setTimeout(function () {\n            for (var key in p) if (p[has](key) && key != ps) {\n                p[key].sleep--;\n                !p[key].sleep && delete p[key];\n            }\n        });\n        return p[ps];\n    }\n    function box(x, y, width, height) {\n        if (x == null) {\n            x = y = width = height = 0;\n        }\n        if (y == null) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            x = x.x;\n        }\n        return {\n            x: x,\n            y: y,\n            width: width,\n            w: width,\n            height: height,\n            h: height,\n            x2: x + width,\n            y2: y + height,\n            cx: x + width / 2,\n            cy: y + height / 2,\n            r1: math.min(width, height) / 2,\n            r2: math.max(width, height) / 2,\n            r0: math.sqrt(width * width + height * height) / 2,\n            path: rectPath(x, y, width, height),\n            vb: [x, y, width, height].join(\" \")\n        };\n    }\n    function toString() {\n        return this.join(\",\").replace(p2s, \"$1\");\n    }\n    function pathClone(pathArray) {\n        var res = clone(pathArray);\n        res.toString = toString;\n        return res;\n    }\n    function getPointAtSegmentLength(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {\n        if (length == null) {\n            return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);\n        } else {\n            return findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y,\n                getTotLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));\n        }\n    }\n    function getLengthFactory(istotal, subpath) {\n        function O(val) {\n            return +(+val).toFixed(3);\n        }\n        return Snap._.cacher(function (path, length, onlystart) {\n            if (path instanceof Element) {\n                path = path.attr(\"d\");\n            }\n            path = path2curve(path);\n            var x, y, p, l, sp = \"\", subpaths = {}, point,\n                len = 0;\n            for (var i = 0, ii = path.length; i < ii; i++) {\n                p = path[i];\n                if (p[0] == \"M\") {\n                    x = +p[1];\n                    y = +p[2];\n                } else {\n                    l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n                    if (len + l > length) {\n                        if (subpath && !subpaths.start) {\n                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n                            sp += [\n                                \"C\" + O(point.start.x),\n                                O(point.start.y),\n                                O(point.m.x),\n                                O(point.m.y),\n                                O(point.x),\n                                O(point.y)\n                            ];\n                            if (onlystart) {return sp;}\n                            subpaths.start = sp;\n                            sp = [\n                                \"M\" + O(point.x),\n                                O(point.y) + \"C\" + O(point.n.x),\n                                O(point.n.y),\n                                O(point.end.x),\n                                O(point.end.y),\n                                O(p[5]),\n                                O(p[6])\n                            ].join();\n                            len += l;\n                            x = +p[5];\n                            y = +p[6];\n                            continue;\n                        }\n                        if (!istotal && !subpath) {\n                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n                            return point;\n                        }\n                    }\n                    len += l;\n                    x = +p[5];\n                    y = +p[6];\n                }\n                sp += p.shift() + p;\n            }\n            subpaths.end = sp;\n            point = istotal ? len : subpath ? subpaths : findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);\n            return point;\n        }, null, Snap._.clone);\n    }\n    var getTotalLength = getLengthFactory(1),\n        getPointAtLength = getLengthFactory(),\n        getSubpathsAtLength = getLengthFactory(0, 1);\n    function findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n        var t1 = 1 - t,\n            t13 = pow(t1, 3),\n            t12 = pow(t1, 2),\n            t2 = t * t,\n            t3 = t2 * t,\n            x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n            y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,\n            mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),\n            my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),\n            nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),\n            ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),\n            ax = t1 * p1x + t * c1x,\n            ay = t1 * p1y + t * c1y,\n            cx = t1 * c2x + t * p2x,\n            cy = t1 * c2y + t * p2y,\n            alpha = 90 - math.atan2(mx - nx, my - ny) * 180 / PI;\n        // (mx > nx || my < ny) && (alpha += 180);\n        return {\n            x: x,\n            y: y,\n            m: {x: mx, y: my},\n            n: {x: nx, y: ny},\n            start: {x: ax, y: ay},\n            end: {x: cx, y: cy},\n            alpha: alpha\n        };\n    }\n    function bezierBBox(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n        if (!Snap.is(p1x, \"array\")) {\n            p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];\n        }\n        var bbox = curveDim.apply(null, p1x);\n        return box(\n            bbox.min.x,\n            bbox.min.y,\n            bbox.max.x - bbox.min.x,\n            bbox.max.y - bbox.min.y\n        );\n    }\n    function isPointInsideBBox(bbox, x, y) {\n        return  x >= bbox.x &&\n                x <= bbox.x + bbox.width &&\n                y >= bbox.y &&\n                y <= bbox.y + bbox.height;\n    }\n    function isBBoxIntersect(bbox1, bbox2) {\n        bbox1 = box(bbox1);\n        bbox2 = box(bbox2);\n        return isPointInsideBBox(bbox2, bbox1.x, bbox1.y)\n            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y)\n            || isPointInsideBBox(bbox2, bbox1.x, bbox1.y2)\n            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2)\n            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y)\n            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y)\n            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y2)\n            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2)\n            || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x\n                || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)\n            && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y\n                || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n    }\n    function base3(t, p1, p2, p3, p4) {\n        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n            t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n        return t * t2 - 3 * p1 + 3 * p2;\n    }\n    function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n        if (z == null) {\n            z = 1;\n        }\n        z = z > 1 ? 1 : z < 0 ? 0 : z;\n        var z2 = z / 2,\n            n = 12,\n            Tvalues = [-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],\n            Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],\n            sum = 0;\n        for (var i = 0; i < n; i++) {\n            var ct = z2 * Tvalues[i] + z2,\n                xbase = base3(ct, x1, x2, x3, x4),\n                ybase = base3(ct, y1, y2, y3, y4),\n                comb = xbase * xbase + ybase * ybase;\n            sum += Cvalues[i] * math.sqrt(comb);\n        }\n        return z2 * sum;\n    }\n    function getTotLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {\n        if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {\n            return;\n        }\n        var t = 1,\n            step = t / 2,\n            t2 = t - step,\n            l,\n            e = .01;\n        l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n        while (abs(l - ll) > e) {\n            step /= 2;\n            t2 += (l < ll ? 1 : -1) * step;\n            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n        }\n        return t2;\n    }\n    function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {\n        if (\n            mmax(x1, x2) < mmin(x3, x4) ||\n            mmin(x1, x2) > mmax(x3, x4) ||\n            mmax(y1, y2) < mmin(y3, y4) ||\n            mmin(y1, y2) > mmax(y3, y4)\n        ) {\n            return;\n        }\n        var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n            ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n            denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n        if (!denominator) {\n            return;\n        }\n        var px = nx / denominator,\n            py = ny / denominator,\n            px2 = +px.toFixed(2),\n            py2 = +py.toFixed(2);\n        if (\n            px2 < +mmin(x1, x2).toFixed(2) ||\n            px2 > +mmax(x1, x2).toFixed(2) ||\n            px2 < +mmin(x3, x4).toFixed(2) ||\n            px2 > +mmax(x3, x4).toFixed(2) ||\n            py2 < +mmin(y1, y2).toFixed(2) ||\n            py2 > +mmax(y1, y2).toFixed(2) ||\n            py2 < +mmin(y3, y4).toFixed(2) ||\n            py2 > +mmax(y3, y4).toFixed(2)\n        ) {\n            return;\n        }\n        return {x: px, y: py};\n    }\n    function inter(bez1, bez2) {\n        return interHelper(bez1, bez2);\n    }\n    function interCount(bez1, bez2) {\n        return interHelper(bez1, bez2, 1);\n    }\n    function interHelper(bez1, bez2, justCount) {\n        var bbox1 = bezierBBox(bez1),\n            bbox2 = bezierBBox(bez2);\n        if (!isBBoxIntersect(bbox1, bbox2)) {\n            return justCount ? 0 : [];\n        }\n        var l1 = bezlen.apply(0, bez1),\n            l2 = bezlen.apply(0, bez2),\n            n1 = ~~(l1 / 8),\n            n2 = ~~(l2 / 8),\n            dots1 = [],\n            dots2 = [],\n            xy = {},\n            res = justCount ? 0 : [];\n        for (var i = 0; i < n1 + 1; i++) {\n            var p = findDotsAtSegment.apply(0, bez1.concat(i / n1));\n            dots1.push({x: p.x, y: p.y, t: i / n1});\n        }\n        for (i = 0; i < n2 + 1; i++) {\n            p = findDotsAtSegment.apply(0, bez2.concat(i / n2));\n            dots2.push({x: p.x, y: p.y, t: i / n2});\n        }\n        for (i = 0; i < n1; i++) {\n            for (var j = 0; j < n2; j++) {\n                var di = dots1[i],\n                    di1 = dots1[i + 1],\n                    dj = dots2[j],\n                    dj1 = dots2[j + 1],\n                    ci = abs(di1.x - di.x) < .001 ? \"y\" : \"x\",\n                    cj = abs(dj1.x - dj.x) < .001 ? \"y\" : \"x\",\n                    is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);\n                if (is) {\n                    if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {\n                        continue;\n                    }\n                    xy[is.x.toFixed(4)] = is.y.toFixed(4);\n                    var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n                        t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n                    if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n                        if (justCount) {\n                            res++;\n                        } else {\n                            res.push({\n                                x: is.x,\n                                y: is.y,\n                                t1: t1,\n                                t2: t2\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    function pathIntersection(path1, path2) {\n        return interPathHelper(path1, path2);\n    }\n    function pathIntersectionNumber(path1, path2) {\n        return interPathHelper(path1, path2, 1);\n    }\n    function interPathHelper(path1, path2, justCount) {\n        path1 = path2curve(path1);\n        path2 = path2curve(path2);\n        var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,\n            res = justCount ? 0 : [];\n        for (var i = 0, ii = path1.length; i < ii; i++) {\n            var pi = path1[i];\n            if (pi[0] == \"M\") {\n                x1 = x1m = pi[1];\n                y1 = y1m = pi[2];\n            } else {\n                if (pi[0] == \"C\") {\n                    bez1 = [x1, y1].concat(pi.slice(1));\n                    x1 = bez1[6];\n                    y1 = bez1[7];\n                } else {\n                    bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n                    x1 = x1m;\n                    y1 = y1m;\n                }\n                for (var j = 0, jj = path2.length; j < jj; j++) {\n                    var pj = path2[j];\n                    if (pj[0] == \"M\") {\n                        x2 = x2m = pj[1];\n                        y2 = y2m = pj[2];\n                    } else {\n                        if (pj[0] == \"C\") {\n                            bez2 = [x2, y2].concat(pj.slice(1));\n                            x2 = bez2[6];\n                            y2 = bez2[7];\n                        } else {\n                            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n                            x2 = x2m;\n                            y2 = y2m;\n                        }\n                        var intr = interHelper(bez1, bez2, justCount);\n                        if (justCount) {\n                            res += intr;\n                        } else {\n                            for (var k = 0, kk = intr.length; k < kk; k++) {\n                                intr[k].segment1 = i;\n                                intr[k].segment2 = j;\n                                intr[k].bez1 = bez1;\n                                intr[k].bez2 = bez2;\n                            }\n                            res = res.concat(intr);\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    function isPointInsidePath(path, x, y) {\n        var bbox = pathBBox(path);\n        return isPointInsideBBox(bbox, x, y) &&\n               interPathHelper(path, [[\"M\", x, y], [\"H\", bbox.x2 + 10]], 1) % 2 == 1;\n    }\n    function pathBBox(path) {\n        var pth = paths(path);\n        if (pth.bbox) {\n            return clone(pth.bbox);\n        }\n        if (!path) {\n            return box();\n        }\n        path = path2curve(path);\n        var x = 0,\n            y = 0,\n            X = [],\n            Y = [],\n            p;\n        for (var i = 0, ii = path.length; i < ii; i++) {\n            p = path[i];\n            if (p[0] == \"M\") {\n                x = p[1];\n                y = p[2];\n                X.push(x);\n                Y.push(y);\n            } else {\n                var dim = curveDim(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n                X = X.concat(dim.min.x, dim.max.x);\n                Y = Y.concat(dim.min.y, dim.max.y);\n                x = p[5];\n                y = p[6];\n            }\n        }\n        var xmin = mmin.apply(0, X),\n            ymin = mmin.apply(0, Y),\n            xmax = mmax.apply(0, X),\n            ymax = mmax.apply(0, Y),\n            bb = box(xmin, ymin, xmax - xmin, ymax - ymin);\n        pth.bbox = clone(bb);\n        return bb;\n    }\n    function rectPath(x, y, w, h, r) {\n        if (r) {\n            return [\n                [\"M\", +x + +r, y],\n                [\"l\", w - r * 2, 0],\n                [\"a\", r, r, 0, 0, 1, r, r],\n                [\"l\", 0, h - r * 2],\n                [\"a\", r, r, 0, 0, 1, -r, r],\n                [\"l\", r * 2 - w, 0],\n                [\"a\", r, r, 0, 0, 1, -r, -r],\n                [\"l\", 0, r * 2 - h],\n                [\"a\", r, r, 0, 0, 1, r, -r],\n                [\"z\"]\n            ];\n        }\n        var res = [[\"M\", x, y], [\"l\", w, 0], [\"l\", 0, h], [\"l\", -w, 0], [\"z\"]];\n        res.toString = toString;\n        return res;\n    }\n    function ellipsePath(x, y, rx, ry, a) {\n        if (a == null && ry == null) {\n            ry = rx;\n        }\n        x = +x;\n        y = +y;\n        rx = +rx;\n        ry = +ry;\n        if (a != null) {\n            var rad = Math.PI / 180,\n                x1 = x + rx * Math.cos(-ry * rad),\n                x2 = x + rx * Math.cos(-a * rad),\n                y1 = y + rx * Math.sin(-ry * rad),\n                y2 = y + rx * Math.sin(-a * rad),\n                res = [[\"M\", x1, y1], [\"A\", rx, rx, 0, +(a - ry > 180), 0, x2, y2]];\n        } else {\n            res = [\n                [\"M\", x, y],\n                [\"m\", 0, -ry],\n                [\"a\", rx, ry, 0, 1, 1, 0, 2 * ry],\n                [\"a\", rx, ry, 0, 1, 1, 0, -2 * ry],\n                [\"z\"]\n            ];\n        }\n        res.toString = toString;\n        return res;\n    }\n    var unit2px = Snap._unit2px,\n        getPath = {\n        path: function (el) {\n            return el.attr(\"path\");\n        },\n        circle: function (el) {\n            var attr = unit2px(el);\n            return ellipsePath(attr.cx, attr.cy, attr.r);\n        },\n        ellipse: function (el) {\n            var attr = unit2px(el);\n            return ellipsePath(attr.cx || 0, attr.cy || 0, attr.rx, attr.ry);\n        },\n        rect: function (el) {\n            var attr = unit2px(el);\n            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height, attr.rx, attr.ry);\n        },\n        image: function (el) {\n            var attr = unit2px(el);\n            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height);\n        },\n        line: function (el) {\n            return \"M\" + [el.attr(\"x1\") || 0, el.attr(\"y1\") || 0, el.attr(\"x2\"), el.attr(\"y2\")];\n        },\n        polyline: function (el) {\n            return \"M\" + el.attr(\"points\");\n        },\n        polygon: function (el) {\n            return \"M\" + el.attr(\"points\") + \"z\";\n        },\n        deflt: function (el) {\n            var bbox = el.node.getBBox();\n            return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n        }\n    };\n    function pathToRelative(pathArray) {\n        var pth = paths(pathArray),\n            lowerCase = String.prototype.toLowerCase;\n        if (pth.rel) {\n            return pathClone(pth.rel);\n        }\n        if (!Snap.is(pathArray, \"array\") || !Snap.is(pathArray && pathArray[0], \"array\")) {\n            pathArray = Snap.parsePathString(pathArray);\n        }\n        var res = [],\n            x = 0,\n            y = 0,\n            mx = 0,\n            my = 0,\n            start = 0;\n        if (pathArray[0][0] == \"M\") {\n            x = pathArray[0][1];\n            y = pathArray[0][2];\n            mx = x;\n            my = y;\n            start++;\n            res.push([\"M\", x, y]);\n        }\n        for (var i = start, ii = pathArray.length; i < ii; i++) {\n            var r = res[i] = [],\n                pa = pathArray[i];\n            if (pa[0] != lowerCase.call(pa[0])) {\n                r[0] = lowerCase.call(pa[0]);\n                switch (r[0]) {\n                    case \"a\":\n                        r[1] = pa[1];\n                        r[2] = pa[2];\n                        r[3] = pa[3];\n                        r[4] = pa[4];\n                        r[5] = pa[5];\n                        r[6] = +(pa[6] - x).toFixed(3);\n                        r[7] = +(pa[7] - y).toFixed(3);\n                        break;\n                    case \"v\":\n                        r[1] = +(pa[1] - y).toFixed(3);\n                        break;\n                    case \"m\":\n                        mx = pa[1];\n                        my = pa[2];\n                    default:\n                        for (var j = 1, jj = pa.length; j < jj; j++) {\n                            r[j] = +(pa[j] - (j % 2 ? x : y)).toFixed(3);\n                        }\n                }\n            } else {\n                r = res[i] = [];\n                if (pa[0] == \"m\") {\n                    mx = pa[1] + x;\n                    my = pa[2] + y;\n                }\n                for (var k = 0, kk = pa.length; k < kk; k++) {\n                    res[i][k] = pa[k];\n                }\n            }\n            var len = res[i].length;\n            switch (res[i][0]) {\n                case \"z\":\n                    x = mx;\n                    y = my;\n                    break;\n                case \"h\":\n                    x += +res[i][len - 1];\n                    break;\n                case \"v\":\n                    y += +res[i][len - 1];\n                    break;\n                default:\n                    x += +res[i][len - 2];\n                    y += +res[i][len - 1];\n            }\n        }\n        res.toString = toString;\n        pth.rel = pathClone(res);\n        return res;\n    }\n    function pathToAbsolute(pathArray) {\n        var pth = paths(pathArray);\n        if (pth.abs) {\n            return pathClone(pth.abs);\n        }\n        if (!is(pathArray, \"array\") || !is(pathArray && pathArray[0], \"array\")) { // rough assumption\n            pathArray = Snap.parsePathString(pathArray);\n        }\n        if (!pathArray || !pathArray.length) {\n            return [[\"M\", 0, 0]];\n        }\n        var res = [],\n            x = 0,\n            y = 0,\n            mx = 0,\n            my = 0,\n            start = 0,\n            pa0;\n        if (pathArray[0][0] == \"M\") {\n            x = +pathArray[0][1];\n            y = +pathArray[0][2];\n            mx = x;\n            my = y;\n            start++;\n            res[0] = [\"M\", x, y];\n        }\n        var crz = pathArray.length == 3 &&\n            pathArray[0][0] == \"M\" &&\n            pathArray[1][0].toUpperCase() == \"R\" &&\n            pathArray[2][0].toUpperCase() == \"Z\";\n        for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n            res.push(r = []);\n            pa = pathArray[i];\n            pa0 = pa[0];\n            if (pa0 != pa0.toUpperCase()) {\n                r[0] = pa0.toUpperCase();\n                switch (r[0]) {\n                    case \"A\":\n                        r[1] = pa[1];\n                        r[2] = pa[2];\n                        r[3] = pa[3];\n                        r[4] = pa[4];\n                        r[5] = pa[5];\n                        r[6] = +pa[6] + x;\n                        r[7] = +pa[7] + y;\n                        break;\n                    case \"V\":\n                        r[1] = +pa[1] + y;\n                        break;\n                    case \"H\":\n                        r[1] = +pa[1] + x;\n                        break;\n                    case \"R\":\n                        var dots = [x, y].concat(pa.slice(1));\n                        for (var j = 2, jj = dots.length; j < jj; j++) {\n                            dots[j] = +dots[j] + x;\n                            dots[++j] = +dots[j] + y;\n                        }\n                        res.pop();\n                        res = res.concat(catmullRom2bezier(dots, crz));\n                        break;\n                    case \"O\":\n                        res.pop();\n                        dots = ellipsePath(x, y, pa[1], pa[2]);\n                        dots.push(dots[0]);\n                        res = res.concat(dots);\n                        break;\n                    case \"U\":\n                        res.pop();\n                        res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n                        r = [\"U\"].concat(res[res.length - 1].slice(-2));\n                        break;\n                    case \"M\":\n                        mx = +pa[1] + x;\n                        my = +pa[2] + y;\n                    default:\n                        for (j = 1, jj = pa.length; j < jj; j++) {\n                            r[j] = +pa[j] + (j % 2 ? x : y);\n                        }\n                }\n            } else if (pa0 == \"R\") {\n                dots = [x, y].concat(pa.slice(1));\n                res.pop();\n                res = res.concat(catmullRom2bezier(dots, crz));\n                r = [\"R\"].concat(pa.slice(-2));\n            } else if (pa0 == \"O\") {\n                res.pop();\n                dots = ellipsePath(x, y, pa[1], pa[2]);\n                dots.push(dots[0]);\n                res = res.concat(dots);\n            } else if (pa0 == \"U\") {\n                res.pop();\n                res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n                r = [\"U\"].concat(res[res.length - 1].slice(-2));\n            } else {\n                for (var k = 0, kk = pa.length; k < kk; k++) {\n                    r[k] = pa[k];\n                }\n            }\n            pa0 = pa0.toUpperCase();\n            if (pa0 != \"O\") {\n                switch (r[0]) {\n                    case \"Z\":\n                        x = +mx;\n                        y = +my;\n                        break;\n                    case \"H\":\n                        x = r[1];\n                        break;\n                    case \"V\":\n                        y = r[1];\n                        break;\n                    case \"M\":\n                        mx = r[r.length - 2];\n                        my = r[r.length - 1];\n                    default:\n                        x = r[r.length - 2];\n                        y = r[r.length - 1];\n                }\n            }\n        }\n        res.toString = toString;\n        pth.abs = pathClone(res);\n        return res;\n    }\n    function l2c(x1, y1, x2, y2) {\n        return [x1, y1, x2, y2, x2, y2];\n    }\n    function q2c(x1, y1, ax, ay, x2, y2) {\n        var _13 = 1 / 3,\n            _23 = 2 / 3;\n        return [\n                _13 * x1 + _23 * ax,\n                _13 * y1 + _23 * ay,\n                _13 * x2 + _23 * ax,\n                _13 * y2 + _23 * ay,\n                x2,\n                y2\n            ];\n    }\n    function a2c(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n        // for more information of where this math came from visit:\n        // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n        var _120 = PI * 120 / 180,\n            rad = PI / 180 * (+angle || 0),\n            res = [],\n            xy,\n            rotate = Snap._.cacher(function (x, y, rad) {\n                var X = x * math.cos(rad) - y * math.sin(rad),\n                    Y = x * math.sin(rad) + y * math.cos(rad);\n                return {x: X, y: Y};\n            });\n        if (!rx || !ry) {\n            return [x1, y1, x2, y2, x2, y2];\n        }\n        if (!recursive) {\n            xy = rotate(x1, y1, -rad);\n            x1 = xy.x;\n            y1 = xy.y;\n            xy = rotate(x2, y2, -rad);\n            x2 = xy.x;\n            y2 = xy.y;\n            var cos = math.cos(PI / 180 * angle),\n                sin = math.sin(PI / 180 * angle),\n                x = (x1 - x2) / 2,\n                y = (y1 - y2) / 2;\n            var h = x * x / (rx * rx) + y * y / (ry * ry);\n            if (h > 1) {\n                h = math.sqrt(h);\n                rx = h * rx;\n                ry = h * ry;\n            }\n            var rx2 = rx * rx,\n                ry2 = ry * ry,\n                k = (large_arc_flag == sweep_flag ? -1 : 1) *\n                    math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n                cx = k * rx * y / ry + (x1 + x2) / 2,\n                cy = k * -ry * x / rx + (y1 + y2) / 2,\n                f1 = math.asin(((y1 - cy) / ry).toFixed(9)),\n                f2 = math.asin(((y2 - cy) / ry).toFixed(9));\n\n            f1 = x1 < cx ? PI - f1 : f1;\n            f2 = x2 < cx ? PI - f2 : f2;\n            f1 < 0 && (f1 = PI * 2 + f1);\n            f2 < 0 && (f2 = PI * 2 + f2);\n            if (sweep_flag && f1 > f2) {\n                f1 = f1 - PI * 2;\n            }\n            if (!sweep_flag && f2 > f1) {\n                f2 = f2 - PI * 2;\n            }\n        } else {\n            f1 = recursive[0];\n            f2 = recursive[1];\n            cx = recursive[2];\n            cy = recursive[3];\n        }\n        var df = f2 - f1;\n        if (abs(df) > _120) {\n            var f2old = f2,\n                x2old = x2,\n                y2old = y2;\n            f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n            x2 = cx + rx * math.cos(f2);\n            y2 = cy + ry * math.sin(f2);\n            res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n        }\n        df = f2 - f1;\n        var c1 = math.cos(f1),\n            s1 = math.sin(f1),\n            c2 = math.cos(f2),\n            s2 = math.sin(f2),\n            t = math.tan(df / 4),\n            hx = 4 / 3 * rx * t,\n            hy = 4 / 3 * ry * t,\n            m1 = [x1, y1],\n            m2 = [x1 + hx * s1, y1 - hy * c1],\n            m3 = [x2 + hx * s2, y2 - hy * c2],\n            m4 = [x2, y2];\n        m2[0] = 2 * m1[0] - m2[0];\n        m2[1] = 2 * m1[1] - m2[1];\n        if (recursive) {\n            return [m2, m3, m4].concat(res);\n        } else {\n            res = [m2, m3, m4].concat(res).join().split(\",\");\n            var newres = [];\n            for (var i = 0, ii = res.length; i < ii; i++) {\n                newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n            }\n            return newres;\n        }\n    }\n    function findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n        var t1 = 1 - t;\n        return {\n            x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t * c1x + t1 * 3 * t * t * c2x + pow(t, 3) * p2x,\n            y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t * c1y + t1 * 3 * t * t * c2y + pow(t, 3) * p2y\n        };\n    }\n\n    // Returns bounding box of cubic bezier curve.\n    // Source: http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n    // Original version: NISHIO Hirokazu\n    // Modifications: https://github.com/timo22345\n    function curveDim(x0, y0, x1, y1, x2, y2, x3, y3) {\n        var tvalues = [],\n            bounds = [[], []],\n            a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n        for (var i = 0; i < 2; ++i) {\n            if (i == 0) {\n                b = 6 * x0 - 12 * x1 + 6 * x2;\n                a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n                c = 3 * x1 - 3 * x0;\n            } else {\n                b = 6 * y0 - 12 * y1 + 6 * y2;\n                a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n                c = 3 * y1 - 3 * y0;\n            }\n            if (abs(a) < 1e-12) {\n                if (abs(b) < 1e-12) {\n                    continue;\n                }\n                t = -c / b;\n                if (0 < t && t < 1) {\n                    tvalues.push(t);\n                }\n                continue;\n            }\n            b2ac = b * b - 4 * c * a;\n            sqrtb2ac = math.sqrt(b2ac);\n            if (b2ac < 0) {\n                continue;\n            }\n            t1 = (-b + sqrtb2ac) / (2 * a);\n            if (0 < t1 && t1 < 1) {\n                tvalues.push(t1);\n            }\n            t2 = (-b - sqrtb2ac) / (2 * a);\n            if (0 < t2 && t2 < 1) {\n                tvalues.push(t2);\n            }\n        }\n\n        var x, y, j = tvalues.length,\n            jlen = j,\n            mt;\n        while (j--) {\n            t = tvalues[j];\n            mt = 1 - t;\n            bounds[0][j] = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;\n            bounds[1][j] = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;\n        }\n\n        bounds[0][jlen] = x0;\n        bounds[1][jlen] = y0;\n        bounds[0][jlen + 1] = x3;\n        bounds[1][jlen + 1] = y3;\n        bounds[0].length = bounds[1].length = jlen + 2;\n\n\n        return {\n          min: {x: mmin.apply(0, bounds[0]), y: mmin.apply(0, bounds[1])},\n          max: {x: mmax.apply(0, bounds[0]), y: mmax.apply(0, bounds[1])}\n        };\n    }\n\n    function path2curve(path, path2) {\n        var pth = !path2 && paths(path);\n        if (!path2 && pth.curve) {\n            return pathClone(pth.curve);\n        }\n        var p = pathToAbsolute(path),\n            p2 = path2 && pathToAbsolute(path2),\n            attrs = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n            attrs2 = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n            processPath = function (path, d, pcom) {\n                var nx, ny;\n                if (!path) {\n                    return [\"C\", d.x, d.y, d.x, d.y, d.x, d.y];\n                }\n                !(path[0] in {T: 1, Q: 1}) && (d.qx = d.qy = null);\n                switch (path[0]) {\n                    case \"M\":\n                        d.X = path[1];\n                        d.Y = path[2];\n                        break;\n                    case \"A\":\n                        path = [\"C\"].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));\n                        break;\n                    case \"S\":\n                        if (pcom == \"C\" || pcom == \"S\") { // In \"S\" case we have to take into account, if the previous command is C/S.\n                            nx = d.x * 2 - d.bx;          // And reflect the previous\n                            ny = d.y * 2 - d.by;          // command's control point relative to the current point.\n                        }\n                        else {                            // or some else or nothing\n                            nx = d.x;\n                            ny = d.y;\n                        }\n                        path = [\"C\", nx, ny].concat(path.slice(1));\n                        break;\n                    case \"T\":\n                        if (pcom == \"Q\" || pcom == \"T\") { // In \"T\" case we have to take into account, if the previous command is Q/T.\n                            d.qx = d.x * 2 - d.qx;        // And make a reflection similar\n                            d.qy = d.y * 2 - d.qy;        // to case \"S\".\n                        }\n                        else {                            // or something else or nothing\n                            d.qx = d.x;\n                            d.qy = d.y;\n                        }\n                        path = [\"C\"].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n                        break;\n                    case \"Q\":\n                        d.qx = path[1];\n                        d.qy = path[2];\n                        path = [\"C\"].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n                        break;\n                    case \"L\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], path[2]));\n                        break;\n                    case \"H\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], d.y));\n                        break;\n                    case \"V\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, d.x, path[1]));\n                        break;\n                    case \"Z\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, d.X, d.Y));\n                        break;\n                }\n                return path;\n            },\n            fixArc = function (pp, i) {\n                if (pp[i].length > 7) {\n                    pp[i].shift();\n                    var pi = pp[i];\n                    while (pi.length) {\n                        pcoms1[i] = \"A\"; // if created multiple C:s, their original seg is saved\n                        p2 && (pcoms2[i] = \"A\"); // the same as above\n                        pp.splice(i++, 0, [\"C\"].concat(pi.splice(0, 6)));\n                    }\n                    pp.splice(i, 1);\n                    ii = mmax(p.length, p2 && p2.length || 0);\n                }\n            },\n            fixM = function (path1, path2, a1, a2, i) {\n                if (path1 && path2 && path1[i][0] == \"M\" && path2[i][0] != \"M\") {\n                    path2.splice(i, 0, [\"M\", a2.x, a2.y]);\n                    a1.bx = 0;\n                    a1.by = 0;\n                    a1.x = path1[i][1];\n                    a1.y = path1[i][2];\n                    ii = mmax(p.length, p2 && p2.length || 0);\n                }\n            },\n            pcoms1 = [], // path commands of original path p\n            pcoms2 = [], // path commands of original path p2\n            pfirst = \"\", // temporary holder for original path command\n            pcom = \"\"; // holder for previous path command of original path\n        for (var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {\n            p[i] && (pfirst = p[i][0]); // save current path command\n\n            if (pfirst != \"C\") // C is not saved yet, because it may be result of conversion\n            {\n                pcoms1[i] = pfirst; // Save current path command\n                i && ( pcom = pcoms1[i - 1]); // Get previous path command pcom\n            }\n            p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n\n            if (pcoms1[i] != \"A\" && pfirst == \"C\") pcoms1[i] = \"C\"; // A is the only command\n            // which may produce multiple C:s\n            // so we have to make sure that C is also C in original path\n\n            fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\n            if (p2) { // the same procedures is done to p2\n                p2[i] && (pfirst = p2[i][0]);\n                if (pfirst != \"C\") {\n                    pcoms2[i] = pfirst;\n                    i && (pcom = pcoms2[i - 1]);\n                }\n                p2[i] = processPath(p2[i], attrs2, pcom);\n\n                if (pcoms2[i] != \"A\" && pfirst == \"C\") {\n                    pcoms2[i] = \"C\";\n                }\n\n                fixArc(p2, i);\n            }\n            fixM(p, p2, attrs, attrs2, i);\n            fixM(p2, p, attrs2, attrs, i);\n            var seg = p[i],\n                seg2 = p2 && p2[i],\n                seglen = seg.length,\n                seg2len = p2 && seg2.length;\n            attrs.x = seg[seglen - 2];\n            attrs.y = seg[seglen - 1];\n            attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;\n            attrs.by = toFloat(seg[seglen - 3]) || attrs.y;\n            attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);\n            attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);\n            attrs2.x = p2 && seg2[seg2len - 2];\n            attrs2.y = p2 && seg2[seg2len - 1];\n        }\n        if (!p2) {\n            pth.curve = pathClone(p);\n        }\n        return p2 ? [p, p2] : p;\n    }\n    function mapPath(path, matrix) {\n        if (!matrix) {\n            return path;\n        }\n        var x, y, i, j, ii, jj, pathi;\n        path = path2curve(path);\n        for (i = 0, ii = path.length; i < ii; i++) {\n            pathi = path[i];\n            for (j = 1, jj = pathi.length; j < jj; j += 2) {\n                x = matrix.x(pathi[j], pathi[j + 1]);\n                y = matrix.y(pathi[j], pathi[j + 1]);\n                pathi[j] = x;\n                pathi[j + 1] = y;\n            }\n        }\n        return path;\n    }\n\n    // http://schepers.cc/getting-to-the-point\n    function catmullRom2bezier(crp, z) {\n        var d = [];\n        for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n            var p = [\n                        {x: +crp[i - 2], y: +crp[i - 1]},\n                        {x: +crp[i],     y: +crp[i + 1]},\n                        {x: +crp[i + 2], y: +crp[i + 3]},\n                        {x: +crp[i + 4], y: +crp[i + 5]}\n                    ];\n            if (z) {\n                if (!i) {\n                    p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};\n                } else if (iLen - 4 == i) {\n                    p[3] = {x: +crp[0], y: +crp[1]};\n                } else if (iLen - 2 == i) {\n                    p[2] = {x: +crp[0], y: +crp[1]};\n                    p[3] = {x: +crp[2], y: +crp[3]};\n                }\n            } else {\n                if (iLen - 4 == i) {\n                    p[3] = p[2];\n                } else if (!i) {\n                    p[0] = {x: +crp[i], y: +crp[i + 1]};\n                }\n            }\n            d.push([\"C\",\n                  (-p[0].x + 6 * p[1].x + p[2].x) / 6,\n                  (-p[0].y + 6 * p[1].y + p[2].y) / 6,\n                  (p[1].x + 6 * p[2].x - p[3].x) / 6,\n                  (p[1].y + 6*p[2].y - p[3].y) / 6,\n                  p[2].x,\n                  p[2].y\n            ]);\n        }\n\n        return d;\n    }\n\n    // export\n    Snap.path = paths;\n\n    /*\\\n     * Snap.path.getTotalLength\n     [ method ]\n     **\n     * Returns the length of the given path in pixels\n     **\n     - path (string) SVG path string\n     **\n     = (number) length\n    \\*/\n    Snap.path.getTotalLength = getTotalLength;\n    /*\\\n     * Snap.path.getPointAtLength\n     [ method ]\n     **\n     * Returns the coordinates of the point located at the given length along the given path\n     **\n     - path (string) SVG path string\n     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n     **\n     = (object) representation of the point:\n     o {\n     o     x: (number) x coordinate,\n     o     y: (number) y coordinate,\n     o     alpha: (number) angle of derivative\n     o }\n    \\*/\n    Snap.path.getPointAtLength = getPointAtLength;\n    /*\\\n     * Snap.path.getSubpath\n     [ method ]\n     **\n     * Returns the subpath of a given path between given start and end lengths\n     **\n     - path (string) SVG path string\n     - from (number) length, in pixels, from the start of the path to the start of the segment\n     - to (number) length, in pixels, from the start of the path to the end of the segment\n     **\n     = (string) path string definition for the segment\n    \\*/\n    Snap.path.getSubpath = function (path, from, to) {\n        if (this.getTotalLength(path) - to < 1e-6) {\n            return getSubpathsAtLength(path, from).end;\n        }\n        var a = getSubpathsAtLength(path, to, 1);\n        return from ? getSubpathsAtLength(a, from).end : a;\n    };\n    /*\\\n     * Element.getTotalLength\n     [ method ]\n     **\n     * Returns the length of the path in pixels (only works for `path` elements)\n     = (number) length\n    \\*/\n    elproto.getTotalLength = function () {\n        if (this.node.getTotalLength) {\n            return this.node.getTotalLength();\n        }\n    };\n    // SIERRA Element.getPointAtLength()/Element.getTotalLength(): If a <path> is broken into different segments, is the jump distance to the new coordinates set by the _M_ or _m_ commands calculated as part of the path's total length?\n    /*\\\n     * Element.getPointAtLength\n     [ method ]\n     **\n     * Returns coordinates of the point located at the given length on the given path (only works for `path` elements)\n     **\n     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n     **\n     = (object) representation of the point:\n     o {\n     o     x: (number) x coordinate,\n     o     y: (number) y coordinate,\n     o     alpha: (number) angle of derivative\n     o }\n    \\*/\n    elproto.getPointAtLength = function (length) {\n        return getPointAtLength(this.attr(\"d\"), length);\n    };\n    // SIERRA Element.getSubpath(): Similar to the problem for Element.getPointAtLength(). Unclear how this would work for a segmented path. Overall, the concept of _subpath_ and what I'm calling a _segment_ (series of non-_M_ or _Z_ commands) is unclear.\n    /*\\\n     * Element.getSubpath\n     [ method ]\n     **\n     * Returns subpath of a given element from given start and end lengths (only works for `path` elements)\n     **\n     - from (number) length, in pixels, from the start of the path to the start of the segment\n     - to (number) length, in pixels, from the start of the path to the end of the segment\n     **\n     = (string) path string definition for the segment\n    \\*/\n    elproto.getSubpath = function (from, to) {\n        return Snap.path.getSubpath(this.attr(\"d\"), from, to);\n    };\n    Snap._.box = box;\n    /*\\\n     * Snap.path.findDotsAtSegment\n     [ method ]\n     **\n     * Utility method\n     **\n     * Finds dot coordinates on the given cubic beziér curve at the given t\n     - p1x (number) x of the first point of the curve\n     - p1y (number) y of the first point of the curve\n     - c1x (number) x of the first anchor of the curve\n     - c1y (number) y of the first anchor of the curve\n     - c2x (number) x of the second anchor of the curve\n     - c2y (number) y of the second anchor of the curve\n     - p2x (number) x of the second point of the curve\n     - p2y (number) y of the second point of the curve\n     - t (number) position on the curve (0..1)\n     = (object) point information in format:\n     o {\n     o     x: (number) x coordinate of the point,\n     o     y: (number) y coordinate of the point,\n     o     m: {\n     o         x: (number) x coordinate of the left anchor,\n     o         y: (number) y coordinate of the left anchor\n     o     },\n     o     n: {\n     o         x: (number) x coordinate of the right anchor,\n     o         y: (number) y coordinate of the right anchor\n     o     },\n     o     start: {\n     o         x: (number) x coordinate of the start of the curve,\n     o         y: (number) y coordinate of the start of the curve\n     o     },\n     o     end: {\n     o         x: (number) x coordinate of the end of the curve,\n     o         y: (number) y coordinate of the end of the curve\n     o     },\n     o     alpha: (number) angle of the curve derivative at the point\n     o }\n    \\*/\n    Snap.path.findDotsAtSegment = findDotsAtSegment;\n    /*\\\n     * Snap.path.bezierBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns the bounding box of a given cubic beziér curve\n     - p1x (number) x of the first point of the curve\n     - p1y (number) y of the first point of the curve\n     - c1x (number) x of the first anchor of the curve\n     - c1y (number) y of the first anchor of the curve\n     - c2x (number) x of the second anchor of the curve\n     - c2y (number) y of the second anchor of the curve\n     - p2x (number) x of the second point of the curve\n     - p2y (number) y of the second point of the curve\n     * or\n     - bez (array) array of six points for beziér curve\n     = (object) bounding box\n     o {\n     o     x: (number) x coordinate of the left top point of the box,\n     o     y: (number) y coordinate of the left top point of the box,\n     o     x2: (number) x coordinate of the right bottom point of the box,\n     o     y2: (number) y coordinate of the right bottom point of the box,\n     o     width: (number) width of the box,\n     o     height: (number) height of the box\n     o }\n    \\*/\n    Snap.path.bezierBBox = bezierBBox;\n    /*\\\n     * Snap.path.isPointInsideBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if given point is inside bounding box\n     - bbox (string) bounding box\n     - x (string) x coordinate of the point\n     - y (string) y coordinate of the point\n     = (boolean) `true` if point is inside\n    \\*/\n    Snap.path.isPointInsideBBox = isPointInsideBBox;\n    Snap.closest = function (x, y, X, Y) {\n        var r = 100,\n            b = box(x - r / 2, y - r / 2, r, r),\n            inside = [],\n            getter = X[0].hasOwnProperty(\"x\") ? function (i) {\n                return {\n                    x: X[i].x,\n                    y: X[i].y\n                };\n            } : function (i) {\n                return {\n                    x: X[i],\n                    y: Y[i]\n                };\n            },\n            found = 0;\n        while (r <= 1e6 && !found) {\n            for (var i = 0, ii = X.length; i < ii; i++) {\n                var xy = getter(i);\n                if (isPointInsideBBox(b, xy.x, xy.y)) {\n                    found++;\n                    inside.push(xy);\n                    break;\n                }\n            }\n            if (!found) {\n                r *= 2;\n                b = box(x - r / 2, y - r / 2, r, r)\n            }\n        }\n        if (r == 1e6) {\n            return;\n        }\n        var len = Infinity,\n            res;\n        for (i = 0, ii = inside.length; i < ii; i++) {\n            var l = Snap.len(x, y, inside[i].x, inside[i].y);\n            if (len > l) {\n                len = l;\n                inside[i].len = l;\n                res = inside[i];\n            }\n        }\n        return res;\n    };\n    /*\\\n     * Snap.path.isBBoxIntersect\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if two bounding boxes intersect\n     - bbox1 (string) first bounding box\n     - bbox2 (string) second bounding box\n     = (boolean) `true` if bounding boxes intersect\n    \\*/\n    Snap.path.isBBoxIntersect = isBBoxIntersect;\n    /*\\\n     * Snap.path.intersection\n     [ method ]\n     **\n     * Utility method\n     **\n     * Finds intersections of two paths\n     - path1 (string) path string\n     - path2 (string) path string\n     = (array) dots of intersection\n     o [\n     o     {\n     o         x: (number) x coordinate of the point,\n     o         y: (number) y coordinate of the point,\n     o         t1: (number) t value for segment of path1,\n     o         t2: (number) t value for segment of path2,\n     o         segment1: (number) order number for segment of path1,\n     o         segment2: (number) order number for segment of path2,\n     o         bez1: (array) eight coordinates representing beziér curve for the segment of path1,\n     o         bez2: (array) eight coordinates representing beziér curve for the segment of path2\n     o     }\n     o ]\n    \\*/\n    Snap.path.intersection = pathIntersection;\n    Snap.path.intersectionNumber = pathIntersectionNumber;\n    /*\\\n     * Snap.path.isPointInside\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if given point is inside a given closed path.\n     *\n     * Note: fill mode doesn’t affect the result of this method.\n     - path (string) path string\n     - x (number) x of the point\n     - y (number) y of the point\n     = (boolean) `true` if point is inside the path\n    \\*/\n    Snap.path.isPointInside = isPointInsidePath;\n    /*\\\n     * Snap.path.getBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns the bounding box of a given path\n     - path (string) path string\n     = (object) bounding box\n     o {\n     o     x: (number) x coordinate of the left top point of the box,\n     o     y: (number) y coordinate of the left top point of the box,\n     o     x2: (number) x coordinate of the right bottom point of the box,\n     o     y2: (number) y coordinate of the right bottom point of the box,\n     o     width: (number) width of the box,\n     o     height: (number) height of the box\n     o }\n    \\*/\n    Snap.path.getBBox = pathBBox;\n    Snap.path.get = getPath;\n    /*\\\n     * Snap.path.toRelative\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path coordinates into relative values\n     - path (string) path string\n     = (array) path string\n    \\*/\n    Snap.path.toRelative = pathToRelative;\n    /*\\\n     * Snap.path.toAbsolute\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path coordinates into absolute values\n     - path (string) path string\n     = (array) path string\n    \\*/\n    Snap.path.toAbsolute = pathToAbsolute;\n    /*\\\n     * Snap.path.toCubic\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path to a new path where all segments are cubic beziér curves\n     - pathString (string|array) path string or array of segments\n     = (array) array of segments\n    \\*/\n    Snap.path.toCubic = path2curve;\n    /*\\\n     * Snap.path.map\n     [ method ]\n     **\n     * Transform the path string with the given matrix\n     - path (string) path string\n     - matrix (object) see @Matrix\n     = (string) transformed path string\n    \\*/\n    Snap.path.map = mapPath;\n    Snap.path.toString = toString;\n    Snap.path.clone = pathClone;\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var mmax = Math.max,\n        mmin = Math.min;\n\n    // Set\n    var Set = function (items) {\n        this.items = [];\n\tthis.bindings = {};\n        this.length = 0;\n        this.type = \"set\";\n        if (items) {\n            for (var i = 0, ii = items.length; i < ii; i++) {\n                if (items[i]) {\n                    this[this.items.length] = this.items[this.items.length] = items[i];\n                    this.length++;\n                }\n            }\n        }\n    },\n    setproto = Set.prototype;\n    /*\\\n     * Set.push\n     [ method ]\n     **\n     * Adds each argument to the current set\n     = (object) original element\n    \\*/\n    setproto.push = function () {\n        var item,\n            len;\n        for (var i = 0, ii = arguments.length; i < ii; i++) {\n            item = arguments[i];\n            if (item) {\n                len = this.items.length;\n                this[len] = this.items[len] = item;\n                this.length++;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Set.pop\n     [ method ]\n     **\n     * Removes last element and returns it\n     = (object) element\n    \\*/\n    setproto.pop = function () {\n        this.length && delete this[this.length--];\n        return this.items.pop();\n    };\n    /*\\\n     * Set.forEach\n     [ method ]\n     **\n     * Executes given function for each element in the set\n     *\n     * If the function returns `false`, the loop stops running.\n     **\n     - callback (function) function to run\n     - thisArg (object) context object for the callback\n     = (object) Set object\n    \\*/\n    setproto.forEach = function (callback, thisArg) {\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            if (callback.call(thisArg, this.items[i], i) === false) {\n                return this;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Set.animate\n     [ method ]\n     **\n     * Animates each element in set in sync.\n     *\n     **\n     - attrs (object) key-value pairs of destination attributes\n     - duration (number) duration of the animation in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function that executes when the animation ends\n     * or\n     - animation (array) array of animation parameter for each element in set in format `[attrs, duration, easing, callback]`\n     > Usage\n     | // animate all elements in set to radius 10\n     | set.animate({r: 10}, 500, mina.easein);\n     | // or\n     | // animate first element to radius 10, but second to radius 20 and in different time\n     | set.animate([{r: 10}, 500, mina.easein], [{r: 20}, 1500, mina.easein]);\n     = (Element) the current element\n    \\*/\n    setproto.animate = function (attrs, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        if (attrs instanceof Snap._.Animation) {\n            callback = attrs.callback;\n            easing = attrs.easing;\n            ms = easing.dur;\n            attrs = attrs.attr;\n        }\n        var args = arguments;\n        if (Snap.is(attrs, \"array\") && Snap.is(args[args.length - 1], \"array\")) {\n            var each = true;\n        }\n        var begin,\n            handler = function () {\n                if (begin) {\n                    this.b = begin;\n                } else {\n                    begin = this.b;\n                }\n            },\n            cb = 0,\n            set = this,\n            callbacker = callback && function () {\n                if (++cb == set.length) {\n                    callback.call(this);\n                }\n            };\n        return this.forEach(function (el, i) {\n            eve.once(\"snap.animcreated.\" + el.id, handler);\n            if (each) {\n                args[i] && el.animate.apply(el, args[i]);\n            } else {\n                el.animate(attrs, ms, easing, callbacker);\n            }\n        });\n    };\n    /*\\\n     * Set.remove\n     [ method ]\n     **\n     * Removes all children of the set.\n     *\n     = (object) Set object\n    \\*/\n    setproto.remove = function () {\n        while (this.length) {\n            this.pop().remove();\n        }\n        return this;\n    };\n    /*\\\n     * Set.bind\n     [ method ]\n     **\n     * Specifies how to handle a specific attribute when applied\n     * to a set.\n     *\n     **\n     - attr (string) attribute name\n     - callback (function) function to run\n     * or\n     - attr (string) attribute name\n     - element (Element) specific element in the set to apply the attribute to\n     * or\n     - attr (string) attribute name\n     - element (Element) specific element in the set to apply the attribute to\n     - eattr (string) attribute on the element to bind the attribute to\n     = (object) Set object\n    \\*/\n    setproto.bind = function (attr, a, b) {\n        var data = {};\n        if (typeof a == \"function\") {\n            this.bindings[attr] = a;\n        } else {\n            var aname = b || attr;\n            this.bindings[attr] = function (v) {\n                data[aname] = v;\n                a.attr(data);\n            };\n        }\n        return this;\n    };\n    /*\\\n     * Set.attr\n     [ method ]\n     **\n     * Equivalent of @Element.attr.\n     = (object) Set object\n    \\*/\n    setproto.attr = function (value) {\n        var unbound = {};\n        for (var k in value) {\n            if (this.bindings[k]) {\n                this.bindings[k](value[k]);\n            } else {\n                unbound[k] = value[k];\n            }\n        }\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            this.items[i].attr(unbound);\n        }\n        return this;\n    };\n    /*\\\n     * Set.clear\n     [ method ]\n     **\n     * Removes all elements from the set\n    \\*/\n    setproto.clear = function () {\n        while (this.length) {\n            this.pop();\n        }\n    };\n    /*\\\n     * Set.splice\n     [ method ]\n     **\n     * Removes range of elements from the set\n     **\n     - index (number) position of the deletion\n     - count (number) number of element to remove\n     - insertion… (object) #optional elements to insert\n     = (object) set elements that were deleted\n    \\*/\n    setproto.splice = function (index, count, insertion) {\n        index = index < 0 ? mmax(this.length + index, 0) : index;\n        count = mmax(0, mmin(this.length - index, count));\n        var tail = [],\n            todel = [],\n            args = [],\n            i;\n        for (i = 2; i < arguments.length; i++) {\n            args.push(arguments[i]);\n        }\n        for (i = 0; i < count; i++) {\n            todel.push(this[index + i]);\n        }\n        for (; i < this.length - index; i++) {\n            tail.push(this[index + i]);\n        }\n        var arglen = args.length;\n        for (i = 0; i < arglen + tail.length; i++) {\n            this.items[index + i] = this[index + i] = i < arglen ? args[i] : tail[i - arglen];\n        }\n        i = this.items.length = this.length -= count - arglen;\n        while (this[i]) {\n            delete this[i++];\n        }\n        return new Set(todel);\n    };\n    /*\\\n     * Set.exclude\n     [ method ]\n     **\n     * Removes given element from the set\n     **\n     - element (object) element to remove\n     = (boolean) `true` if object was found and removed from the set\n    \\*/\n    setproto.exclude = function (el) {\n        for (var i = 0, ii = this.length; i < ii; i++) if (this[i] == el) {\n            this.splice(i, 1);\n            return true;\n        }\n        return false;\n    };\n    /*\\\n     * Set.insertAfter\n     [ method ]\n     **\n     * Inserts set elements after given element.\n     **\n     - element (object) set will be inserted after this element\n     = (object) Set object\n    \\*/\n    setproto.insertAfter = function (el) {\n        var i = this.items.length;\n        while (i--) {\n            this.items[i].insertAfter(el);\n        }\n        return this;\n    };\n    /*\\\n     * Set.getBBox\n     [ method ]\n     **\n     * Union of all bboxes of the set. See @Element.getBBox.\n     = (object) bounding box descriptor. See @Element.getBBox.\n    \\*/\n    setproto.getBBox = function () {\n        var x = [],\n            y = [],\n            x2 = [],\n            y2 = [];\n        for (var i = this.items.length; i--;) if (!this.items[i].removed) {\n            var box = this.items[i].getBBox();\n            x.push(box.x);\n            y.push(box.y);\n            x2.push(box.x + box.width);\n            y2.push(box.y + box.height);\n        }\n        x = mmin.apply(0, x);\n        y = mmin.apply(0, y);\n        x2 = mmax.apply(0, x2);\n        y2 = mmax.apply(0, y2);\n        return {\n            x: x,\n            y: y,\n            x2: x2,\n            y2: y2,\n            width: x2 - x,\n            height: y2 - y,\n            cx: x + (x2 - x) / 2,\n            cy: y + (y2 - y) / 2\n        };\n    };\n    /*\\\n     * Set.insertAfter\n     [ method ]\n     **\n     * Creates a clone of the set.\n     **\n     = (object) New Set object\n    \\*/\n    setproto.clone = function (s) {\n        s = new Set;\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            s.push(this.items[i].clone());\n        }\n        return s;\n    };\n    setproto.toString = function () {\n        return \"Snap\\u2018s set\";\n    };\n    setproto.type = \"set\";\n    // export\n    /*\\\n     * Snap.Set\n     [ property ]\n     **\n     * Set constructor.\n    \\*/\n    Snap.Set = Set;\n    /*\\\n     * Snap.set\n     [ method ]\n     **\n     * Creates a set and fills it with list of arguments.\n     **\n     = (object) New Set object\n     | var r = paper.rect(0, 0, 10, 10),\n     |     s1 = Snap.set(), // empty set\n     |     s2 = Snap.set(r, paper.circle(100, 100, 20)); // prefilled set\n    \\*/\n    Snap.set = function () {\n        var set = new Set;\n        if (arguments.length) {\n            set.push.apply(set, Array.prototype.slice.call(arguments, 0));\n        }\n        return set;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var names = {},\n        reUnit = /[%a-z]+$/i,\n        Str = String;\n    names.stroke = names.fill = \"colour\";\n    function getEmpty(item) {\n        var l = item[0];\n        switch (l.toLowerCase()) {\n            case \"t\": return [l, 0, 0];\n            case \"m\": return [l, 1, 0, 0, 1, 0, 0];\n            case \"r\": if (item.length == 4) {\n                return [l, 0, item[2], item[3]];\n            } else {\n                return [l, 0];\n            }\n            case \"s\": if (item.length == 5) {\n                return [l, 1, 1, item[3], item[4]];\n            } else if (item.length == 3) {\n                return [l, 1, 1];\n            } else {\n                return [l, 1];\n            }\n        }\n    }\n    function equaliseTransform(t1, t2, getBBox) {\n        t1 = t1 || new Snap.Matrix;\n        t2 = t2 || new Snap.Matrix;\n        t1 = Snap.parseTransformString(t1.toTransformString()) || [];\n        t2 = Snap.parseTransformString(t2.toTransformString()) || [];\n        var maxlength = Math.max(t1.length, t2.length),\n            from = [],\n            to = [],\n            i = 0, j, jj,\n            tt1, tt2;\n        for (; i < maxlength; i++) {\n            tt1 = t1[i] || getEmpty(t2[i]);\n            tt2 = t2[i] || getEmpty(tt1);\n            if (tt1[0] != tt2[0] ||\n                tt1[0].toLowerCase() == \"r\" && (tt1[2] != tt2[2] || tt1[3] != tt2[3]) ||\n                tt1[0].toLowerCase() == \"s\" && (tt1[3] != tt2[3] || tt1[4] != tt2[4])\n                ) {\n                    t1 = Snap._.transform2matrix(t1, getBBox());\n                    t2 = Snap._.transform2matrix(t2, getBBox());\n                    from = [[\"m\", t1.a, t1.b, t1.c, t1.d, t1.e, t1.f]];\n                    to = [[\"m\", t2.a, t2.b, t2.c, t2.d, t2.e, t2.f]];\n                    break;\n            }\n            from[i] = [];\n            to[i] = [];\n            for (j = 0, jj = Math.max(tt1.length, tt2.length); j < jj; j++) {\n                j in tt1 && (from[i][j] = tt1[j]);\n                j in tt2 && (to[i][j] = tt2[j]);\n            }\n        }\n        return {\n            from: path2array(from),\n            to: path2array(to),\n            f: getPath(from)\n        };\n    }\n    function getNumber(val) {\n        return val;\n    }\n    function getUnit(unit) {\n        return function (val) {\n            return +val.toFixed(3) + unit;\n        };\n    }\n    function getViewBox(val) {\n        return val.join(\" \");\n    }\n    function getColour(clr) {\n        return Snap.rgb(clr[0], clr[1], clr[2], clr[3]);\n    }\n    function getPath(path) {\n        var k = 0, i, ii, j, jj, out, a, b = [];\n        for (i = 0, ii = path.length; i < ii; i++) {\n            out = \"[\";\n            a = ['\"' + path[i][0] + '\"'];\n            for (j = 1, jj = path[i].length; j < jj; j++) {\n                a[j] = \"val[\" + k++ + \"]\";\n            }\n            out += a + \"]\";\n            b[i] = out;\n        }\n        return Function(\"val\", \"return Snap.path.toString.call([\" + b + \"])\");\n    }\n    function path2array(path) {\n        var out = [];\n        for (var i = 0, ii = path.length; i < ii; i++) {\n            for (var j = 1, jj = path[i].length; j < jj; j++) {\n                out.push(path[i][j]);\n            }\n        }\n        return out;\n    }\n    function isNumeric(obj) {\n        return isFinite(obj);\n    }\n    function arrayEqual(arr1, arr2) {\n        if (!Snap.is(arr1, \"array\") || !Snap.is(arr2, \"array\")) {\n            return false;\n        }\n        return arr1.toString() == arr2.toString();\n    }\n    Element.prototype.equal = function (name, b) {\n        return eve(\"snap.util.equal\", this, name, b).firstDefined();\n    };\n    eve.on(\"snap.util.equal\", function (name, b) {\n        var A, B, a = Str(this.attr(name) || \"\"),\n            el = this;\n        if (names[name] == \"colour\") {\n            A = Snap.color(a);\n            B = Snap.color(b);\n            return {\n                from: [A.r, A.g, A.b, A.opacity],\n                to: [B.r, B.g, B.b, B.opacity],\n                f: getColour\n            };\n        }\n        if (name == \"viewBox\") {\n            A = this.attr(name).vb.split(\" \").map(Number);\n            B = b.split(\" \").map(Number);\n            return {\n                from: A,\n                to: B,\n                f: getViewBox\n            };\n        }\n        if (name == \"transform\" || name == \"gradientTransform\" || name == \"patternTransform\") {\n            if (typeof b == \"string\") {\n                b = Str(b).replace(/\\.{3}|\\u2026/g, a);\n            }\n            a = this.matrix;\n            if (!Snap._.rgTransform.test(b)) {\n                b = Snap._.transform2matrix(Snap._.svgTransform2string(b), this.getBBox());\n            } else {\n                b = Snap._.transform2matrix(b, this.getBBox());\n            }\n            return equaliseTransform(a, b, function () {\n                return el.getBBox(1);\n            });\n        }\n        if (name == \"d\" || name == \"path\") {\n            A = Snap.path.toCubic(a, b);\n            return {\n                from: path2array(A[0]),\n                to: path2array(A[1]),\n                f: getPath(A[0])\n            };\n        }\n        if (name == \"points\") {\n            A = Str(a).split(Snap._.separator);\n            B = Str(b).split(Snap._.separator);\n            return {\n                from: A,\n                to: B,\n                f: function (val) { return val; }\n            };\n        }\n        if (isNumeric(a) && isNumeric(b)) {\n            return {\n                from: parseFloat(a),\n                to: parseFloat(b),\n                f: getNumber\n            };\n        }\n        var aUnit = a.match(reUnit),\n            bUnit = Str(b).match(reUnit);\n        if (aUnit && arrayEqual(aUnit, bUnit)) {\n            return {\n                from: parseFloat(a),\n                to: parseFloat(b),\n                f: getUnit(aUnit)\n            };\n        } else {\n            return {\n                from: this.asPX(name),\n                to: this.asPX(name, b),\n                f: getNumber\n            };\n        }\n    });\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n    has = \"hasOwnProperty\",\n    supportsTouch = \"createTouch\" in glob.doc,\n    events = [\n        \"click\", \"dblclick\", \"mousedown\", \"mousemove\", \"mouseout\",\n        \"mouseover\", \"mouseup\", \"touchstart\", \"touchmove\", \"touchend\",\n        \"touchcancel\"\n    ],\n    touchMap = {\n        mousedown: \"touchstart\",\n        mousemove: \"touchmove\",\n        mouseup: \"touchend\"\n    },\n    getScroll = function (xy, el) {\n        var name = xy == \"y\" ? \"scrollTop\" : \"scrollLeft\",\n            doc = el && el.node ? el.node.ownerDocument : glob.doc;\n        return doc[name in doc.documentElement ? \"documentElement\" : \"body\"][name];\n    },\n    preventDefault = function () {\n        this.returnValue = false;\n    },\n    preventTouch = function () {\n        return this.originalEvent.preventDefault();\n    },\n    stopPropagation = function () {\n        this.cancelBubble = true;\n    },\n    stopTouch = function () {\n        return this.originalEvent.stopPropagation();\n    },\n    addEvent = function (obj, type, fn, element) {\n        var realName = supportsTouch && touchMap[type] ? touchMap[type] : type,\n            f = function (e) {\n                var scrollY = getScroll(\"y\", element),\n                    scrollX = getScroll(\"x\", element);\n                if (supportsTouch && touchMap[has](type)) {\n                    for (var i = 0, ii = e.targetTouches && e.targetTouches.length; i < ii; i++) {\n                        if (e.targetTouches[i].target == obj || obj.contains(e.targetTouches[i].target)) {\n                            var olde = e;\n                            e = e.targetTouches[i];\n                            e.originalEvent = olde;\n                            e.preventDefault = preventTouch;\n                            e.stopPropagation = stopTouch;\n                            break;\n                        }\n                    }\n                }\n                var x = e.clientX + scrollX,\n                    y = e.clientY + scrollY;\n                return fn.call(element, e, x, y);\n            };\n\n        if (type !== realName) {\n            obj.addEventListener(type, f, false);\n        }\n\n        obj.addEventListener(realName, f, false);\n\n        return function () {\n            if (type !== realName) {\n                obj.removeEventListener(type, f, false);\n            }\n\n            obj.removeEventListener(realName, f, false);\n            return true;\n        };\n    },\n    drag = [],\n    dragMove = function (e) {\n        var x = e.clientX,\n            y = e.clientY,\n            scrollY = getScroll(\"y\"),\n            scrollX = getScroll(\"x\"),\n            dragi,\n            j = drag.length;\n        while (j--) {\n            dragi = drag[j];\n            if (supportsTouch) {\n                var i = e.touches && e.touches.length,\n                    touch;\n                while (i--) {\n                    touch = e.touches[i];\n                    if (touch.identifier == dragi.el._drag.id || dragi.el.node.contains(touch.target)) {\n                        x = touch.clientX;\n                        y = touch.clientY;\n                        (e.originalEvent ? e.originalEvent : e).preventDefault();\n                        break;\n                    }\n                }\n            } else {\n                e.preventDefault();\n            }\n            var node = dragi.el.node,\n                o,\n                next = node.nextSibling,\n                parent = node.parentNode,\n                display = node.style.display;\n            // glob.win.opera && parent.removeChild(node);\n            // node.style.display = \"none\";\n            // o = dragi.el.paper.getElementByPoint(x, y);\n            // node.style.display = display;\n            // glob.win.opera && (next ? parent.insertBefore(node, next) : parent.appendChild(node));\n            // o && eve(\"snap.drag.over.\" + dragi.el.id, dragi.el, o);\n            x += scrollX;\n            y += scrollY;\n            eve(\"snap.drag.move.\" + dragi.el.id, dragi.move_scope || dragi.el, x - dragi.el._drag.x, y - dragi.el._drag.y, x, y, e);\n        }\n    },\n    dragUp = function (e) {\n        Snap.unmousemove(dragMove).unmouseup(dragUp);\n        var i = drag.length,\n            dragi;\n        while (i--) {\n            dragi = drag[i];\n            dragi.el._drag = {};\n            eve(\"snap.drag.end.\" + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);\n            eve.off(\"snap.drag.*.\" + dragi.el.id);\n        }\n        drag = [];\n    };\n    /*\\\n     * Element.click\n     [ method ]\n     **\n     * Adds a click event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unclick\n     [ method ]\n     **\n     * Removes a click event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.dblclick\n     [ method ]\n     **\n     * Adds a double click event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.undblclick\n     [ method ]\n     **\n     * Removes a double click event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mousedown\n     [ method ]\n     **\n     * Adds a mousedown event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmousedown\n     [ method ]\n     **\n     * Removes a mousedown event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mousemove\n     [ method ]\n     **\n     * Adds a mousemove event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmousemove\n     [ method ]\n     **\n     * Removes a mousemove event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseout\n     [ method ]\n     **\n     * Adds a mouseout event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseout\n     [ method ]\n     **\n     * Removes a mouseout event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseover\n     [ method ]\n     **\n     * Adds a mouseover event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseover\n     [ method ]\n     **\n     * Removes a mouseover event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseup\n     [ method ]\n     **\n     * Adds a mouseup event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseup\n     [ method ]\n     **\n     * Removes a mouseup event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchstart\n     [ method ]\n     **\n     * Adds a touchstart event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchstart\n     [ method ]\n     **\n     * Removes a touchstart event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchmove\n     [ method ]\n     **\n     * Adds a touchmove event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchmove\n     [ method ]\n     **\n     * Removes a touchmove event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchend\n     [ method ]\n     **\n     * Adds a touchend event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchend\n     [ method ]\n     **\n     * Removes a touchend event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchcancel\n     [ method ]\n     **\n     * Adds a touchcancel event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchcancel\n     [ method ]\n     **\n     * Removes a touchcancel event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    for (var i = events.length; i--;) {\n        (function (eventName) {\n            Snap[eventName] = elproto[eventName] = function (fn, scope) {\n                if (Snap.is(fn, \"function\")) {\n                    this.events = this.events || [];\n                    this.events.push({\n                        name: eventName,\n                        f: fn,\n                        unbind: addEvent(this.node || document, eventName, fn, scope || this)\n                    });\n                } else {\n                    for (var i = 0, ii = this.events.length; i < ii; i++) if (this.events[i].name == eventName) {\n                        try {\n                            this.events[i].f.call(this);\n                        } catch (e) {}\n                    }\n                }\n                return this;\n            };\n            Snap[\"un\" + eventName] =\n            elproto[\"un\" + eventName] = function (fn) {\n                var events = this.events || [],\n                    l = events.length;\n                while (l--) if (events[l].name == eventName &&\n                               (events[l].f == fn || !fn)) {\n                    events[l].unbind();\n                    events.splice(l, 1);\n                    !events.length && delete this.events;\n                    return this;\n                }\n                return this;\n            };\n        })(events[i]);\n    }\n    /*\\\n     * Element.hover\n     [ method ]\n     **\n     * Adds hover event handlers to the element\n     - f_in (function) handler for hover in\n     - f_out (function) handler for hover out\n     - icontext (object) #optional context for hover in handler\n     - ocontext (object) #optional context for hover out handler\n     = (object) @Element\n    \\*/\n    elproto.hover = function (f_in, f_out, scope_in, scope_out) {\n        return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);\n    };\n    /*\\\n     * Element.unhover\n     [ method ]\n     **\n     * Removes hover event handlers from the element\n     - f_in (function) handler for hover in\n     - f_out (function) handler for hover out\n     = (object) @Element\n    \\*/\n    elproto.unhover = function (f_in, f_out) {\n        return this.unmouseover(f_in).unmouseout(f_out);\n    };\n    var draggable = [];\n    // SIERRA unclear what _context_ refers to for starting, ending, moving the drag gesture.\n    // SIERRA Element.drag(): _x position of the mouse_: Where are the x/y values offset from?\n    // SIERRA Element.drag(): much of this member's doc appears to be duplicated for some reason.\n    // SIERRA Unclear about this sentence: _Additionally following drag events will be triggered: drag.start.<id> on start, drag.end.<id> on end and drag.move.<id> on every move._ Is there a global _drag_ object to which you can assign handlers keyed by an element's ID?\n    /*\\\n     * Element.drag\n     [ method ]\n     **\n     * Adds event handlers for an element's drag gesture\n     **\n     - onmove (function) handler for moving\n     - onstart (function) handler for drag start\n     - onend (function) handler for drag end\n     - mcontext (object) #optional context for moving handler\n     - scontext (object) #optional context for drag start handler\n     - econtext (object) #optional context for drag end handler\n     * Additionaly following `drag` events are triggered: `drag.start.<id>` on start, \n     * `drag.end.<id>` on end and `drag.move.<id>` on every move. When element is dragged over another element \n     * `drag.over.<id>` fires as well.\n     *\n     * Start event and start handler are called in specified context or in context of the element with following parameters:\n     o x (number) x position of the mouse\n     o y (number) y position of the mouse\n     o event (object) DOM event object\n     * Move event and move handler are called in specified context or in context of the element with following parameters:\n     o dx (number) shift by x from the start point\n     o dy (number) shift by y from the start point\n     o x (number) x position of the mouse\n     o y (number) y position of the mouse\n     o event (object) DOM event object\n     * End event and end handler are called in specified context or in context of the element with following parameters:\n     o event (object) DOM event object\n     = (object) @Element\n    \\*/\n    elproto.drag = function (onmove, onstart, onend, move_scope, start_scope, end_scope) {\n        var el = this;\n        if (!arguments.length) {\n            var origTransform;\n            return el.drag(function (dx, dy) {\n                this.attr({\n                    transform: origTransform + (origTransform ? \"T\" : \"t\") + [dx, dy]\n                });\n            }, function () {\n                origTransform = this.transform().local;\n            });\n        }\n        function start(e, x, y) {\n            (e.originalEvent || e).preventDefault();\n            el._drag.x = x;\n            el._drag.y = y;\n            el._drag.id = e.identifier;\n            !drag.length && Snap.mousemove(dragMove).mouseup(dragUp);\n            drag.push({el: el, move_scope: move_scope, start_scope: start_scope, end_scope: end_scope});\n            onstart && eve.on(\"snap.drag.start.\" + el.id, onstart);\n            onmove && eve.on(\"snap.drag.move.\" + el.id, onmove);\n            onend && eve.on(\"snap.drag.end.\" + el.id, onend);\n            eve(\"snap.drag.start.\" + el.id, start_scope || move_scope || el, x, y, e);\n        }\n        function init(e, x, y) {\n            eve(\"snap.draginit.\" + el.id, el, e, x, y);\n        }\n        eve.on(\"snap.draginit.\" + el.id, start);\n        el._drag = {};\n        draggable.push({el: el, start: start, init: init});\n        el.mousedown(init);\n        return el;\n    };\n    /*\n     * Element.onDragOver\n     [ method ]\n     **\n     * Shortcut to assign event handler for `drag.over.<id>` event, where `id` is the element's `id` (see @Element.id)\n     - f (function) handler for event, first argument would be the element you are dragging over\n    \\*/\n    // elproto.onDragOver = function (f) {\n    //     f ? eve.on(\"snap.drag.over.\" + this.id, f) : eve.unbind(\"snap.drag.over.\" + this.id);\n    // };\n    /*\\\n     * Element.undrag\n     [ method ]\n     **\n     * Removes all drag event handlers from the given element\n    \\*/\n    elproto.undrag = function () {\n        var i = draggable.length;\n        while (i--) if (draggable[i].el == this) {\n            this.unmousedown(draggable[i].init);\n            draggable.splice(i, 1);\n            eve.unbind(\"snap.drag.*.\" + this.id);\n            eve.unbind(\"snap.draginit.\" + this.id);\n        }\n        !draggable.length && Snap.unmousemove(dragMove).unmouseup(dragUp);\n        return this;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n        pproto = Paper.prototype,\n        rgurl = /^\\s*url\\((.+)\\)/,\n        Str = String,\n        $ = Snap._.$;\n    Snap.filter = {};\n    /*\\\n     * Paper.filter\n     [ method ]\n     **\n     * Creates a `<filter>` element\n     **\n     - filstr (string) SVG fragment of filter provided as a string\n     = (object) @Element\n     * Note: It is recommended to use filters embedded into the page inside an empty SVG element.\n     > Usage\n     | var f = paper.filter('<feGaussianBlur stdDeviation=\"2\"/>'),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    pproto.filter = function (filstr) {\n        var paper = this;\n        if (paper.type != \"svg\") {\n            paper = paper.paper;\n        }\n        var f = Snap.parse(Str(filstr)),\n            id = Snap._.id(),\n            width = paper.node.offsetWidth,\n            height = paper.node.offsetHeight,\n            filter = $(\"filter\");\n        $(filter, {\n            id: id,\n            filterUnits: \"userSpaceOnUse\"\n        });\n        filter.appendChild(f.node);\n        paper.defs.appendChild(filter);\n        return new Element(filter);\n    };\n\n    eve.on(\"snap.util.getattr.filter\", function () {\n        eve.stop();\n        var p = $(this.node, \"filter\");\n        if (p) {\n            var match = Str(p).match(rgurl);\n            return match && Snap.select(match[1]);\n        }\n    });\n    eve.on(\"snap.util.attr.filter\", function (value) {\n        if (value instanceof Element && value.type == \"filter\") {\n            eve.stop();\n            var id = value.node.id;\n            if (!id) {\n                $(value.node, {id: value.id});\n                id = value.id;\n            }\n            $(this.node, {\n                filter: Snap.url(id)\n            });\n        }\n        if (!value || value == \"none\") {\n            eve.stop();\n            this.node.removeAttribute(\"filter\");\n        }\n    });\n    /*\\\n     * Snap.filter.blur\n     [ method ]\n     **\n     * Returns an SVG markup string for the blur filter\n     **\n     - x (number) amount of horizontal blur, in pixels\n     - y (number) #optional amount of vertical blur, in pixels\n     = (string) filter representation\n     > Usage\n     | var f = paper.filter(Snap.filter.blur(5, 10)),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    Snap.filter.blur = function (x, y) {\n        if (x == null) {\n            x = 2;\n        }\n        var def = y == null ? x : [x, y];\n        return Snap.format('\\<feGaussianBlur stdDeviation=\"{def}\"/>', {\n            def: def\n        });\n    };\n    Snap.filter.blur.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.shadow\n     [ method ]\n     **\n     * Returns an SVG markup string for the shadow filter\n     **\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - blur (number) #optional amount of blur\n     - color (string) #optional color of the shadow\n     - opacity (number) #optional `0..1` opacity of the shadow\n     * or\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - color (string) #optional color of the shadow\n     - opacity (number) #optional `0..1` opacity of the shadow\n     * which makes blur default to `4`. Or\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - opacity (number) #optional `0..1` opacity of the shadow\n     = (string) filter representation\n     > Usage\n     | var f = paper.filter(Snap.filter.shadow(0, 2, .3)),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    Snap.filter.shadow = function (dx, dy, blur, color, opacity) {\n        if (opacity == null) {\n            if (color == null) {\n                opacity = blur;\n                blur = 4;\n                color = \"#000\";\n            } else {\n                opacity = color;\n                color = blur;\n                blur = 4;\n            }\n        }\n        if (blur == null) {\n            blur = 4;\n        }\n        if (opacity == null) {\n            opacity = 1;\n        }\n        if (dx == null) {\n            dx = 0;\n            dy = 2;\n        }\n        if (dy == null) {\n            dy = dx;\n        }\n        color = Snap.color(color);\n        return Snap.format('<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"{blur}\"/><feOffset dx=\"{dx}\" dy=\"{dy}\" result=\"offsetblur\"/><feFlood flood-color=\"{color}\"/><feComposite in2=\"offsetblur\" operator=\"in\"/><feComponentTransfer><feFuncA type=\"linear\" slope=\"{opacity}\"/></feComponentTransfer><feMerge><feMergeNode/><feMergeNode in=\"SourceGraphic\"/></feMerge>', {\n            color: color,\n            dx: dx,\n            dy: dy,\n            blur: blur,\n            opacity: opacity\n        });\n    };\n    Snap.filter.shadow.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.grayscale\n     [ method ]\n     **\n     * Returns an SVG markup string for the grayscale filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.grayscale = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {b} {h} 0 0 0 0 0 1 0\"/>', {\n            a: 0.2126 + 0.7874 * (1 - amount),\n            b: 0.7152 - 0.7152 * (1 - amount),\n            c: 0.0722 - 0.0722 * (1 - amount),\n            d: 0.2126 - 0.2126 * (1 - amount),\n            e: 0.7152 + 0.2848 * (1 - amount),\n            f: 0.0722 - 0.0722 * (1 - amount),\n            g: 0.2126 - 0.2126 * (1 - amount),\n            h: 0.0722 + 0.9278 * (1 - amount)\n        });\n    };\n    Snap.filter.grayscale.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.sepia\n     [ method ]\n     **\n     * Returns an SVG markup string for the sepia filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.sepia = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {h} {i} 0 0 0 0 0 1 0\"/>', {\n            a: 0.393 + 0.607 * (1 - amount),\n            b: 0.769 - 0.769 * (1 - amount),\n            c: 0.189 - 0.189 * (1 - amount),\n            d: 0.349 - 0.349 * (1 - amount),\n            e: 0.686 + 0.314 * (1 - amount),\n            f: 0.168 - 0.168 * (1 - amount),\n            g: 0.272 - 0.272 * (1 - amount),\n            h: 0.534 - 0.534 * (1 - amount),\n            i: 0.131 + 0.869 * (1 - amount)\n        });\n    };\n    Snap.filter.sepia.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.saturate\n     [ method ]\n     **\n     * Returns an SVG markup string for the saturate filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.saturate = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"saturate\" values=\"{amount}\"/>', {\n            amount: 1 - amount\n        });\n    };\n    Snap.filter.saturate.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.hueRotate\n     [ method ]\n     **\n     * Returns an SVG markup string for the hue-rotate filter\n     **\n     - angle (number) angle of rotation\n     = (string) filter representation\n    \\*/\n    Snap.filter.hueRotate = function (angle) {\n        angle = angle || 0;\n        return Snap.format('<feColorMatrix type=\"hueRotate\" values=\"{angle}\"/>', {\n            angle: angle\n        });\n    };\n    Snap.filter.hueRotate.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.invert\n     [ method ]\n     **\n     * Returns an SVG markup string for the invert filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.invert = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n//        <feColorMatrix type=\"matrix\" values=\"-1 0 0 0 1  0 -1 0 0 1  0 0 -1 0 1  0 0 0 1 0\" color-interpolation-filters=\"sRGB\"/>\n        return Snap.format('<feComponentTransfer><feFuncR type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncG type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncB type=\"table\" tableValues=\"{amount} {amount2}\"/></feComponentTransfer>', {\n            amount: amount,\n            amount2: 1 - amount\n        });\n    };\n    Snap.filter.invert.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.brightness\n     [ method ]\n     **\n     * Returns an SVG markup string for the brightness filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.brightness = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\"/><feFuncG type=\"linear\" slope=\"{amount}\"/><feFuncB type=\"linear\" slope=\"{amount}\"/></feComponentTransfer>', {\n            amount: amount\n        });\n    };\n    Snap.filter.brightness.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.contrast\n     [ method ]\n     **\n     * Returns an SVG markup string for the contrast filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.contrast = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncG type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncB type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/></feComponentTransfer>', {\n            amount: amount,\n            amount2: .5 - amount / 2\n        });\n    };\n    Snap.filter.contrast.toString = function () {\n        return this();\n    };\n});\n\n// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var box = Snap._.box,\n        is = Snap.is,\n        firstLetter = /^[^a-z]*([tbmlrc])/i,\n        toString = function () {\n            return \"T\" + this.dx + \",\" + this.dy;\n        };\n    /*\\\n     * Element.getAlign\n     [ method ]\n     **\n     * Returns shift needed to align the element relatively to given element.\n     * If no elements specified, parent `<svg>` container will be used.\n     - el (object) @optional alignment element\n     - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n     = (object|string) Object in format `{dx: , dy: }` also has a string representation as a transformation string\n     > Usage\n     | el.transform(el.getAlign(el2, \"top\"));\n     * or\n     | var dy = el.getAlign(el2, \"top\").dy;\n    \\*/\n    Element.prototype.getAlign = function (el, way) {\n        if (way == null && is(el, \"string\")) {\n            way = el;\n            el = null;\n        }\n        el = el || this.paper;\n        var bx = el.getBBox ? el.getBBox() : box(el),\n            bb = this.getBBox(),\n            out = {};\n        way = way && way.match(firstLetter);\n        way = way ? way[1].toLowerCase() : \"c\";\n        switch (way) {\n            case \"t\":\n                out.dx = 0;\n                out.dy = bx.y - bb.y;\n            break;\n            case \"b\":\n                out.dx = 0;\n                out.dy = bx.y2 - bb.y2;\n            break;\n            case \"m\":\n                out.dx = 0;\n                out.dy = bx.cy - bb.cy;\n            break;\n            case \"l\":\n                out.dx = bx.x - bb.x;\n                out.dy = 0;\n            break;\n            case \"r\":\n                out.dx = bx.x2 - bb.x2;\n                out.dy = 0;\n            break;\n            default:\n                out.dx = bx.cx - bb.cx;\n                out.dy = 0;\n            break;\n        }\n        out.toString = toString;\n        return out;\n    };\n    /*\\\n     * Element.align\n     [ method ]\n     **\n     * Aligns the element relatively to given one via transformation.\n     * If no elements specified, parent `<svg>` container will be used.\n     - el (object) @optional alignment element\n     - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n     = (object) this element\n     > Usage\n     | el.align(el2, \"top\");\n     * or\n     | el.align(\"middle\");\n    \\*/\n    Element.prototype.align = function (el, way) {\n        return this.transform(\"...\" + this.getAlign(el, way));\n    };\n});\n\n// Copyright (c) 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    // Colours are from https://www.materialui.co\n    var red         = \"#ffebee#ffcdd2#ef9a9a#e57373#ef5350#f44336#e53935#d32f2f#c62828#b71c1c#ff8a80#ff5252#ff1744#d50000\",\n        pink        = \"#FCE4EC#F8BBD0#F48FB1#F06292#EC407A#E91E63#D81B60#C2185B#AD1457#880E4F#FF80AB#FF4081#F50057#C51162\",\n        purple      = \"#F3E5F5#E1BEE7#CE93D8#BA68C8#AB47BC#9C27B0#8E24AA#7B1FA2#6A1B9A#4A148C#EA80FC#E040FB#D500F9#AA00FF\",\n        deeppurple  = \"#EDE7F6#D1C4E9#B39DDB#9575CD#7E57C2#673AB7#5E35B1#512DA8#4527A0#311B92#B388FF#7C4DFF#651FFF#6200EA\",\n        indigo      = \"#E8EAF6#C5CAE9#9FA8DA#7986CB#5C6BC0#3F51B5#3949AB#303F9F#283593#1A237E#8C9EFF#536DFE#3D5AFE#304FFE\",\n        blue        = \"#E3F2FD#BBDEFB#90CAF9#64B5F6#64B5F6#2196F3#1E88E5#1976D2#1565C0#0D47A1#82B1FF#448AFF#2979FF#2962FF\",\n        lightblue   = \"#E1F5FE#B3E5FC#81D4FA#4FC3F7#29B6F6#03A9F4#039BE5#0288D1#0277BD#01579B#80D8FF#40C4FF#00B0FF#0091EA\",\n        cyan        = \"#E0F7FA#B2EBF2#80DEEA#4DD0E1#26C6DA#00BCD4#00ACC1#0097A7#00838F#006064#84FFFF#18FFFF#00E5FF#00B8D4\",\n        teal        = \"#E0F2F1#B2DFDB#80CBC4#4DB6AC#26A69A#009688#00897B#00796B#00695C#004D40#A7FFEB#64FFDA#1DE9B6#00BFA5\",\n        green       = \"#E8F5E9#C8E6C9#A5D6A7#81C784#66BB6A#4CAF50#43A047#388E3C#2E7D32#1B5E20#B9F6CA#69F0AE#00E676#00C853\",\n        lightgreen  = \"#F1F8E9#DCEDC8#C5E1A5#AED581#9CCC65#8BC34A#7CB342#689F38#558B2F#33691E#CCFF90#B2FF59#76FF03#64DD17\",\n        lime        = \"#F9FBE7#F0F4C3#E6EE9C#DCE775#D4E157#CDDC39#C0CA33#AFB42B#9E9D24#827717#F4FF81#EEFF41#C6FF00#AEEA00\",\n        yellow      = \"#FFFDE7#FFF9C4#FFF59D#FFF176#FFEE58#FFEB3B#FDD835#FBC02D#F9A825#F57F17#FFFF8D#FFFF00#FFEA00#FFD600\",\n        amber       = \"#FFF8E1#FFECB3#FFE082#FFD54F#FFCA28#FFC107#FFB300#FFA000#FF8F00#FF6F00#FFE57F#FFD740#FFC400#FFAB00\",\n        orange      = \"#FFF3E0#FFE0B2#FFCC80#FFB74D#FFA726#FF9800#FB8C00#F57C00#EF6C00#E65100#FFD180#FFAB40#FF9100#FF6D00\",\n        deeporange  = \"#FBE9E7#FFCCBC#FFAB91#FF8A65#FF7043#FF5722#F4511E#E64A19#D84315#BF360C#FF9E80#FF6E40#FF3D00#DD2C00\",\n        brown       = \"#EFEBE9#D7CCC8#BCAAA4#A1887F#8D6E63#795548#6D4C41#5D4037#4E342E#3E2723\",\n        grey        = \"#FAFAFA#F5F5F5#EEEEEE#E0E0E0#BDBDBD#9E9E9E#757575#616161#424242#212121\",\n        bluegrey    = \"#ECEFF1#CFD8DC#B0BEC5#90A4AE#78909C#607D8B#546E7A#455A64#37474F#263238\";\n    /*\\\n     * Snap.mui\n     [ property ]\n     **\n     * Contain Material UI colours.\n     | Snap().rect(0, 0, 10, 10).attr({fill: Snap.mui.deeppurple, stroke: Snap.mui.amber[600]});\n     # For colour reference: <a href=\"https://www.materialui.co\">https://www.materialui.co</a>.\n    \\*/\n    Snap.mui = {};\n    /*\\\n     * Snap.flat\n     [ property ]\n     **\n     * Contain Flat UI colours.\n     | Snap().rect(0, 0, 10, 10).attr({fill: Snap.flat.carrot, stroke: Snap.flat.wetasphalt});\n     # For colour reference: <a href=\"https://www.materialui.co\">https://www.materialui.co</a>.\n    \\*/\n    Snap.flat = {};\n    function saveColor(colors) {\n        colors = colors.split(/(?=#)/);\n        var color = new String(colors[5]);\n        color[50] = colors[0];\n        color[100] = colors[1];\n        color[200] = colors[2];\n        color[300] = colors[3];\n        color[400] = colors[4];\n        color[500] = colors[5];\n        color[600] = colors[6];\n        color[700] = colors[7];\n        color[800] = colors[8];\n        color[900] = colors[9];\n        if (colors[10]) {\n            color.A100 = colors[10];\n            color.A200 = colors[11];\n            color.A400 = colors[12];\n            color.A700 = colors[13];\n        }\n        return color;\n    }\n    Snap.mui.red = saveColor(red);\n    Snap.mui.pink = saveColor(pink);\n    Snap.mui.purple = saveColor(purple);\n    Snap.mui.deeppurple = saveColor(deeppurple);\n    Snap.mui.indigo = saveColor(indigo);\n    Snap.mui.blue = saveColor(blue);\n    Snap.mui.lightblue = saveColor(lightblue);\n    Snap.mui.cyan = saveColor(cyan);\n    Snap.mui.teal = saveColor(teal);\n    Snap.mui.green = saveColor(green);\n    Snap.mui.lightgreen = saveColor(lightgreen);\n    Snap.mui.lime = saveColor(lime);\n    Snap.mui.yellow = saveColor(yellow);\n    Snap.mui.amber = saveColor(amber);\n    Snap.mui.orange = saveColor(orange);\n    Snap.mui.deeporange = saveColor(deeporange);\n    Snap.mui.brown = saveColor(brown);\n    Snap.mui.grey = saveColor(grey);\n    Snap.mui.bluegrey = saveColor(bluegrey);\n    Snap.flat.turquoise = \"#1abc9c\";\n    Snap.flat.greensea = \"#16a085\";\n    Snap.flat.sunflower = \"#f1c40f\";\n    Snap.flat.orange = \"#f39c12\";\n    Snap.flat.emerland = \"#2ecc71\";\n    Snap.flat.nephritis = \"#27ae60\";\n    Snap.flat.carrot = \"#e67e22\";\n    Snap.flat.pumpkin = \"#d35400\";\n    Snap.flat.peterriver = \"#3498db\";\n    Snap.flat.belizehole = \"#2980b9\";\n    Snap.flat.alizarin = \"#e74c3c\";\n    Snap.flat.pomegranate = \"#c0392b\";\n    Snap.flat.amethyst = \"#9b59b6\";\n    Snap.flat.wisteria = \"#8e44ad\";\n    Snap.flat.clouds = \"#ecf0f1\";\n    Snap.flat.silver = \"#bdc3c7\";\n    Snap.flat.wetasphalt = \"#34495e\";\n    Snap.flat.midnightblue = \"#2c3e50\";\n    Snap.flat.concrete = \"#95a5a6\";\n    Snap.flat.asbestos = \"#7f8c8d\";\n    /*\\\n     * Snap.importMUIColors\n     [ method ]\n     **\n     * Imports Material UI colours into global object.\n     | Snap.importMUIColors();\n     | Snap().rect(0, 0, 10, 10).attr({fill: deeppurple, stroke: amber[600]});\n     # For colour reference: <a href=\"https://www.materialui.co\">https://www.materialui.co</a>.\n    \\*/\n    Snap.importMUIColors = function () {\n        for (var color in Snap.mui) {\n            if (Snap.mui.hasOwnProperty(color)) {\n                window[color] = Snap.mui[color];\n            }\n        }\n    };\n});\n\nreturn Snap;\n}));\n}.call(window));\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_11__;\n\n/***/ }),\n/* 12 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"VueOffCanvas\"},[_c('div',{staticClass:\"overlay\",class:{'overlay--show': _vm.isOpen},on:{\"click\":_vm.toggleOffCanvas}}),_vm._v(\" \"),_c('div',{staticClass:\"container\"},[_c('div',{staticClass:\"menu-wrap\"},[_vm._m(0),_vm._v(\" \"),_c('button',{staticClass:\"close-button\",on:{\"click\":_vm.toggleOffCanvas}},[_vm._v(\"\\n                Close Menu\\n        \")]),_vm._v(\" \"),_c('div',{staticClass:\"morph-shape\",attrs:{\"id\":\"morph-shape\"}},[_c('svg',{attrs:{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"100%\",\"height\":\"100%\",\"viewBox\":\"0 0 100 800\",\"preserveAspectRatio\":\"none\"}},[_c('path',{attrs:{\"d\":\"M-1,0h101c0,0-97.833,153.603-97.833,396.167C2.167,627.579,100,800,100,800H-1V0z\"}})])])]),_vm._v(\" \"),_c('button',{staticClass:\"menu-button\",on:{\"click\":_vm.toggleOffCanvas}},[_vm._v(\"\\n              Hamburger Menu\\n      \")]),_vm._v(\" \"),_c('div',{staticClass:\"content-wrap\"},[_c('div',{staticClass:\"content\"},[_c('header',{staticClass:\"codrops-header\"},[_vm._m(1),_vm._v(\" \"),_c('nav',{staticClass:\"codrops-demos\"},[_c('a',{staticClass:\"current-demo\",on:{\"click\":_vm.toggleOffCanvas}},[_vm._v(\"OPEN Off-Canvas\")])]),_vm._v(\" \"),_vm._m(2),_vm._v(\" \"),_vm._m(3)])])])])])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('nav',{staticClass:\"menu\"},[_c('div',{staticClass:\"icon-list\"},[_c('a',{attrs:{\"href\":\"#\"}},[_c('i',{staticClass:\"fa fa-fw fa-star-o\"}),_c('span',[_vm._v(\"Favorites\")])]),_vm._v(\" \"),_c('a',{attrs:{\"href\":\"#\"}},[_c('i',{staticClass:\"fa fa-fw fa-bell-o\"}),_c('span',[_vm._v(\"Alerts\")])]),_vm._v(\" \"),_c('a',{attrs:{\"href\":\"#\"}},[_c('i',{staticClass:\"fa fa-fw fa-envelope-o\"}),_c('span',[_vm._v(\"Messages\")])]),_vm._v(\" \"),_c('a',{attrs:{\"href\":\"#\"}},[_c('i',{staticClass:\"fa fa-fw fa-comment-o\"}),_c('span',[_vm._v(\"Comments\")])]),_vm._v(\" \"),_c('a',{attrs:{\"href\":\"#\"}},[_c('i',{staticClass:\"fa fa-fw fa-bar-chart-o\"}),_c('span',[_vm._v(\"Analytics\")])]),_vm._v(\" \"),_c('a',{attrs:{\"href\":\"#\"}},[_c('i',{staticClass:\"fa fa-fw fa-newspaper-o\"}),_c('span',[_vm._v(\"Reading List\")])])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h1',[_vm._v(\"\\n              Off-Canvas Menu Effects\\n              \"),_c('span',[_vm._v(\"Showing (off-canvas) menus stylishly\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"codrops-links\"},[_c('a',{attrs:{\"href\":\"http://tympanus.net/codrops/?p=20100\"}},[_c('span',[_c('i',{staticClass:\"fa fa-link\"}),_vm._v(\" See Codrops Article\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"codrops-links\"},[_c('a',{attrs:{\"href\":\"https://github.com/mazipan/vue-offcanvas-menu\"}},[_c('span',[_c('i',{staticClass:\"fa fa-github\"}),_vm._v(\" See Github\")])])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__[\"a\"] = (esExports);\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// vueoffcanvas.dist.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 2042dd2d08436a2b514a","<template>\n  <div class=\"VueOffCanvas\">\n\n    <div class=\"overlay\"\n        :class=\"{'overlay--show': isOpen}\"\n        @click=\"toggleOffCanvas\">\n    </div>\n\n    <div class=\"container\">\n\t\t\t<div class=\"menu-wrap\">\n\n\t\t\t\t<nav class=\"menu\">\n\t\t\t\t\t<div class=\"icon-list\">\n\t\t\t\t\t\t<a href=\"#\"><i class=\"fa fa-fw fa-star-o\"></i><span>Favorites</span></a>\n\t\t\t\t\t\t<a href=\"#\"><i class=\"fa fa-fw fa-bell-o\"></i><span>Alerts</span></a>\n\t\t\t\t\t\t<a href=\"#\"><i class=\"fa fa-fw fa-envelope-o\"></i><span>Messages</span></a>\n\t\t\t\t\t\t<a href=\"#\"><i class=\"fa fa-fw fa-comment-o\"></i><span>Comments</span></a>\n\t\t\t\t\t\t<a href=\"#\"><i class=\"fa fa-fw fa-bar-chart-o\"></i><span>Analytics</span></a>\n\t\t\t\t\t\t<a href=\"#\"><i class=\"fa fa-fw fa-newspaper-o\"></i><span>Reading List</span></a>\n\t\t\t\t\t</div>\n\t\t\t\t</nav>\n\n\t\t\t\t<button class=\"close-button\"\n                @click=\"toggleOffCanvas\">\n                Close Menu\n        </button>\n\n\t\t\t\t<div class=\"morph-shape\"\n            id=\"morph-shape\">\n\n\t\t\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"100%\"\n              height=\"100%\"\n              viewBox=\"0 0 100 800\"\n              preserveAspectRatio=\"none\">\n\t\t\t\t\t\t<path d=\"M-1,0h101c0,0-97.833,153.603-97.833,396.167C2.167,627.579,100,800,100,800H-1V0z\"/>\n\t\t\t\t\t</svg>\n\n\t\t\t\t</div>\n\n\t\t\t</div>\n\t\t\t<button class=\"menu-button\"\n              @click=\"toggleOffCanvas\">\n              Hamburger Menu\n      </button>\n\t\t\t<div class=\"content-wrap\">\n\t\t\t\t<div class=\"content\">\n\n\t\t\t\t\t<header class=\"codrops-header\">\n\t\t\t\t\t\t<h1>\n              Off-Canvas Menu Effects\n              <span>Showing (off-canvas) menus stylishly</span>\n            </h1>\n\n            <nav class=\"codrops-demos\">\n\t\t\t\t\t\t\t<a class=\"current-demo\" @click=\"toggleOffCanvas\">OPEN Off-Canvas</a>\n\t\t\t\t\t\t</nav>\n\n            <div class=\"codrops-links\">\n\t\t\t\t\t\t\t<a href=\"http://tympanus.net/codrops/?p=20100\"><span><i class=\"fa fa-link\"></i> See Codrops Article</span></a>\n\t\t\t\t\t\t</div>\n            <div class=\"codrops-links\">\n\t\t\t\t\t\t\t<a href=\"https://github.com/mazipan/vue-offcanvas-menu\"><span><i class=\"fa fa-github\"></i> See Github</span></a>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</header>\n\n\t\t\t\t</div>\n\t\t\t</div><!-- /content-wrap -->\n\t\t</div><!-- /container -->\n\n  </div>\n</template>\n\n<script>\nimport Snap from 'snapsvg'\nimport { VueOffCanvasEventBus } from './event-bus.js'\n\nexport default {\n  name: 'VueOffCanvas',\n  data () {\n    return {\n      isOpen: false,\n      isAnimating: false,\n      morphEl: null,\n      s: null,\n      path: null,\n      initialPath: 'M-1,0h101c0,0-97.833,153.603-97.833,396.167C2.167,627.579,100,800,100,800H-1V0z',\n      pathOpen: 'M-1,0h101c0,0,0-1,0,395c0,404,0,405,0,405H-1V0z'\n    }\n  },\n  created () {\n    // listen eventBus\n    VueOffCanvasEventBus.$on('open', this.openOffCanvas)\n    VueOffCanvasEventBus.$on('close', this.closeOffCanvas)\n    VueOffCanvasEventBus.$on('toggle', this.toggleOffCanvas)\n  },\n  beforeDestroy () {\n    VueOffCanvasEventBus.$off('open')\n    VueOffCanvasEventBus.$off('close')\n    VueOffCanvasEventBus.$off('toggle')\n  },\n  mounted () {\n    this.morphEl = document.getElementById('morph-shape')\n    this.s = Snap(this.morphEl.querySelector('svg'))\n    this.path = this.s.select('path')\n  },\n  methods: {\n    startAnimate() {\n      if(this.isAnimating) return false\n      this.isAnimating = true\n    },\n    toggleOffCanvas() {\n      this.startAnimate()\n\n      if (this.isOpen) {\n        this.closeOffCanvas()\n      } else {\n        this.openOffCanvas()\n      }\n    },\n    openOffCanvas() {\n      this.startAnimate()\n      this.isOpen = true\n\n      document.body.classList.add('show-menu')\n      this.path.animate({'path': this.pathOpen}, 400, mina.easeinout, () => {\n        this.isAnimating = false;\n      })\n    },\n    closeOffCanvas() {\n      this.startAnimate()\n      this.isOpen = false\n\n      document.body.classList.remove('show-menu')\n      setTimeout(() => {\n        this.path.attr('d', this.initialPath)\n        this.isAnimating = false\n      }, 300)\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n@import './elastic.scss';\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/VueOffCanvas.vue","import Vue from 'vue';\nexport const VueOffCanvasEventBus = new Vue();\n\n\n\n// WEBPACK FOOTER //\n// ./src/event-bus.js","import VueOffCanvas from './VueOffCanvas.vue'\nimport { VueOffCanvasEventBus } from './event-bus.js'\n\nconst plugin = {\n  install: Vue => {\n    Vue.component(VueOffCanvas.name, VueOffCanvas)\n    Vue.prototype.$VueOffCanvas = {\n      open() {\n        VueOffCanvasEventBus.$emit('open')\n      },\n      close() {\n        VueOffCanvasEventBus.$emit('close')\n      },\n      toggle() {\n        VueOffCanvasEventBus.$emit('toggle')\n      }\n    }\n  }\n}\n\nVueOffCanvas.install = plugin.install\n\nexport default VueOffCanvas\n\n\n\n// WEBPACK FOOTER //\n// ./src/plugin.js","function injectStyle (ssrContext) {\n  require(\"!!vue-style-loader!css-loader!../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-207b2120\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!sass-loader!postcss-loader!../node_modules/vue-loader/lib/selector?type=styles&index=0!./VueOffCanvas.vue\")\n}\nvar normalizeComponent = require(\"!../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../node_modules/vue-loader/lib/selector?type=script&index=0!./VueOffCanvas.vue\"\nimport __vue_script__ from \"!!babel-loader!../node_modules/vue-loader/lib/selector?type=script&index=0!./VueOffCanvas.vue\"\n/* template */\nimport __vue_template__ from \"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-207b2120\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../node_modules/vue-loader/lib/selector?type=template&index=0!./VueOffCanvas.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/VueOffCanvas.vue\n// module id = 3\n// module chunks = 0","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../node_modules/css-loader/index.js!../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-207b2120\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../node_modules/sass-loader/lib/loader.js!../node_modules/postcss-loader/lib/index.js!../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./VueOffCanvas.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../node_modules/vue-style-loader/lib/addStylesClient.js\")(\"92cc895a\", content, true);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-style-loader!./node_modules/css-loader!./node_modules/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-207b2120\",\"scoped\":false,\"hasInlineConfig\":false}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/lib!./node_modules/vue-loader/lib/selector.js?type=styles&index=0!./src/VueOffCanvas.vue\n// module id = 4\n// module chunks = 0","exports = module.exports = require(\"../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".container,.content-wrap,body,html{overflow:hidden;width:100%;height:100%}.container{background:#373a47}.menu-wrap a{color:#b8b7ad}.menu-wrap a:focus,.menu-wrap a:hover{color:#c94e50}.content-wrap{overflow-y:scroll;-webkit-overflow-scrolling:touch;-webkit-transition:-webkit-transform .3s;transition:-webkit-transform .3s;transition:transform .3s;transition:transform .3s,-webkit-transform .3s}.content{position:relative;background:#b4bad2}.overlay{position:absolute;top:0;left:0;z-index:10;width:100%;height:100%;background:rgba(0,0,0,.3);content:\\\"\\\";opacity:0;-webkit-transition:opacity .3s,-webkit-transform 0s .3s;transition:opacity .3s,-webkit-transform 0s .3s;transition:opacity .3s,transform 0s .3s;transition:opacity .3s,transform 0s .3s,-webkit-transform 0s .3s;-webkit-transform:translate3d(100%,0,0);transform:translate3d(100%,0,0)}.overlay--show{opacity:1;-webkit-transition:opacity .3s;transition:opacity .3s;-webkit-transform:translateZ(0);transform:translateZ(0)}.menu-button{position:fixed;z-index:1000;margin:1em;padding:0;width:2.5em;height:2.25em;border:none;text-indent:2.5em;font-size:1.5em;color:transparent;background:transparent}.menu-button:before{position:absolute;top:.5em;right:.5em;bottom:.5em;left:.5em;background:-webkit-gradient(linear,left top,left bottom,color-stop(20%,#373a47),color-stop(20%,transparent),color-stop(40%,transparent),color-stop(40%,#373a47),color-stop(60%,#373a47),color-stop(60%,transparent),color-stop(80%,transparent),color-stop(80%,#373a47));background:linear-gradient(#373a47 20%,transparent 0,transparent 40%,#373a47 0,#373a47 60%,transparent 0,transparent 80%,#373a47 0);content:\\\"\\\"}.menu-button:hover{opacity:.6}.close-button{width:16px;height:16px;position:absolute;right:1em;top:1em;overflow:hidden;text-indent:16px;border:none;z-index:1001;background:transparent;color:transparent}.close-button:after,.close-button:before{content:\\\"\\\";position:absolute;width:2px;height:100%;top:0;left:50%;background:#95a5a6}.close-button:before{-webkit-transform:rotate(45deg);transform:rotate(45deg)}.close-button:after{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}.menu-wrap{position:absolute;z-index:1001;width:300px;height:100%;font-size:1.15em;-webkit-transform:translate3d(-300px,0,0);transform:translate3d(-300px,0,0);-webkit-transition:-webkit-transform .3s;transition:-webkit-transform .3s;transition:transform .3s;transition:transform .3s,-webkit-transform .3s}.menu{background:#373a47;width:calc(100% - 120px);height:100%;padding:2em 1em}.icon-list{width:280px}.icon-list a{display:block;padding:.8em}.icon-list a i{opacity:.5}.icon-list a span{margin-left:10px;text-transform:uppercase;font-weight:700;letter-spacing:1px;font-size:.75em}.morph-shape{position:absolute;width:120px;height:100%;top:0;right:0;fill:#373a47;z-index:1000}.show-menu .menu-wrap{-webkit-transform:translateZ(0);transform:translateZ(0)}.show-menu .content-wrap{-webkit-transition-delay:.1s;transition-delay:.1s;-webkit-transform:translate3d(100px,0,0);transform:translate3d(100px,0,0)}\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader!./node_modules/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-207b2120\",\"scoped\":false,\"hasInlineConfig\":false}!./node_modules/sass-loader/lib/loader.js!./node_modules/postcss-loader/lib!./node_modules/vue-loader/lib/selector.js?type=styles&index=0!./src/VueOffCanvas.vue\n// module id = 5\n// module chunks = 0","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader/lib/css-base.js\n// module id = 6\n// module chunks = 0","/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n  Modified by Evan You @yyx990803\n*/\n\nvar hasDocument = typeof document !== 'undefined'\n\nif (typeof DEBUG !== 'undefined' && DEBUG) {\n  if (!hasDocument) {\n    throw new Error(\n    'vue-style-loader cannot be used in a non-browser environment. ' +\n    \"Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\"\n  ) }\n}\n\nvar listToStyles = require('./listToStyles')\n\n/*\ntype StyleObject = {\n  id: number;\n  parts: Array<StyleObjectPart>\n}\n\ntype StyleObjectPart = {\n  css: string;\n  media: string;\n  sourceMap: ?string\n}\n*/\n\nvar stylesInDom = {/*\n  [id: number]: {\n    id: number,\n    refs: number,\n    parts: Array<(obj?: StyleObjectPart) => void>\n  }\n*/}\n\nvar head = hasDocument && (document.head || document.getElementsByTagName('head')[0])\nvar singletonElement = null\nvar singletonCounter = 0\nvar isProduction = false\nvar noop = function () {}\n\n// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n// tags it will allow on a page\nvar isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase())\n\nmodule.exports = function (parentId, list, _isProduction) {\n  isProduction = _isProduction\n\n  var styles = listToStyles(parentId, list)\n  addStylesToDom(styles)\n\n  return function update (newList) {\n    var mayRemove = []\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i]\n      var domStyle = stylesInDom[item.id]\n      domStyle.refs--\n      mayRemove.push(domStyle)\n    }\n    if (newList) {\n      styles = listToStyles(parentId, newList)\n      addStylesToDom(styles)\n    } else {\n      styles = []\n    }\n    for (var i = 0; i < mayRemove.length; i++) {\n      var domStyle = mayRemove[i]\n      if (domStyle.refs === 0) {\n        for (var j = 0; j < domStyle.parts.length; j++) {\n          domStyle.parts[j]()\n        }\n        delete stylesInDom[domStyle.id]\n      }\n    }\n  }\n}\n\nfunction addStylesToDom (styles /* Array<StyleObject> */) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i]\n    var domStyle = stylesInDom[item.id]\n    if (domStyle) {\n      domStyle.refs++\n      for (var j = 0; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j])\n      }\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j]))\n      }\n      if (domStyle.parts.length > item.parts.length) {\n        domStyle.parts.length = item.parts.length\n      }\n    } else {\n      var parts = []\n      for (var j = 0; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j]))\n      }\n      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }\n    }\n  }\n}\n\nfunction createStyleElement () {\n  var styleElement = document.createElement('style')\n  styleElement.type = 'text/css'\n  head.appendChild(styleElement)\n  return styleElement\n}\n\nfunction addStyle (obj /* StyleObjectPart */) {\n  var update, remove\n  var styleElement = document.querySelector('style[data-vue-ssr-id~=\"' + obj.id + '\"]')\n\n  if (styleElement) {\n    if (isProduction) {\n      // has SSR styles and in production mode.\n      // simply do nothing.\n      return noop\n    } else {\n      // has SSR styles but in dev mode.\n      // for some reason Chrome can't handle source map in server-rendered\n      // style tags - source maps in <style> only works if the style tag is\n      // created and inserted dynamically. So we remove the server rendered\n      // styles and inject new ones.\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  if (isOldIE) {\n    // use singleton mode for IE9.\n    var styleIndex = singletonCounter++\n    styleElement = singletonElement || (singletonElement = createStyleElement())\n    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)\n    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)\n  } else {\n    // use multi-style-tag mode in all other cases\n    styleElement = createStyleElement()\n    update = applyToTag.bind(null, styleElement)\n    remove = function () {\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  update(obj)\n\n  return function updateStyle (newObj /* StyleObjectPart */) {\n    if (newObj) {\n      if (newObj.css === obj.css &&\n          newObj.media === obj.media &&\n          newObj.sourceMap === obj.sourceMap) {\n        return\n      }\n      update(obj = newObj)\n    } else {\n      remove()\n    }\n  }\n}\n\nvar replaceText = (function () {\n  var textStore = []\n\n  return function (index, replacement) {\n    textStore[index] = replacement\n    return textStore.filter(Boolean).join('\\n')\n  }\n})()\n\nfunction applyToSingletonTag (styleElement, index, remove, obj) {\n  var css = remove ? '' : obj.css\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = replaceText(index, css)\n  } else {\n    var cssNode = document.createTextNode(css)\n    var childNodes = styleElement.childNodes\n    if (childNodes[index]) styleElement.removeChild(childNodes[index])\n    if (childNodes.length) {\n      styleElement.insertBefore(cssNode, childNodes[index])\n    } else {\n      styleElement.appendChild(cssNode)\n    }\n  }\n}\n\nfunction applyToTag (styleElement, obj) {\n  var css = obj.css\n  var media = obj.media\n  var sourceMap = obj.sourceMap\n\n  if (media) {\n    styleElement.setAttribute('media', media)\n  }\n\n  if (sourceMap) {\n    // https://developer.chrome.com/devtools/docs/javascript-debugging\n    // this makes source maps inside style tags work properly in Chrome\n    css += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */'\n    // http://stackoverflow.com/a/26603875\n    css += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'\n  }\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild)\n    }\n    styleElement.appendChild(document.createTextNode(css))\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-style-loader/lib/addStylesClient.js\n// module id = 7\n// module chunks = 0","/**\n * Translates the list format produced by css-loader into something\n * easier to manipulate.\n */\nmodule.exports = function listToStyles (parentId, list) {\n  var styles = []\n  var newStyles = {}\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i]\n    var id = item[0]\n    var css = item[1]\n    var media = item[2]\n    var sourceMap = item[3]\n    var part = {\n      id: parentId + ':' + i,\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    }\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = { id: id, parts: [part] })\n    } else {\n      newStyles[id].parts.push(part)\n    }\n  }\n  return styles\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-style-loader/lib/listToStyles.js\n// module id = 8\n// module chunks = 0","/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file.\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nmodule.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier /* server only */\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = injectStyles\n  }\n\n  if (hook) {\n    var functional = options.functional\n    var existing = functional\n      ? options.render\n      : options.beforeCreate\n\n    if (!functional) {\n      // inject component registration as beforeCreate hook\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    } else {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return existing(h, context)\n      }\n    }\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/component-normalizer.js\n// module id = 9\n// module chunks = 0","/*** IMPORTS FROM imports-loader ***/\n(function() {\nvar fix = module.exports=0;\n\n// Snap.svg 0.5.0\n//\n// Copyright (c) 2013 – 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// build: 2017-02-06\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// ┌────────────────────────────────────────────────────────────┐ \\\\\n// │ Eve 0.5.0 - JavaScript Events Library                      │ \\\\\n// ├────────────────────────────────────────────────────────────┤ \\\\\n// │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\\\\n// └────────────────────────────────────────────────────────────┘ \\\\\n\n(function (glob) {\n    var version = \"0.5.0\",\n        has = \"hasOwnProperty\",\n        separator = /[\\.\\/]/,\n        comaseparator = /\\s*,\\s*/,\n        wildcard = \"*\",\n        fun = function () {},\n        numsort = function (a, b) {\n            return a - b;\n        },\n        current_event,\n        stop,\n        events = {n: {}},\n        firstDefined = function () {\n            for (var i = 0, ii = this.length; i < ii; i++) {\n                if (typeof this[i] != \"undefined\") {\n                    return this[i];\n                }\n            }\n        },\n        lastDefined = function () {\n            var i = this.length;\n            while (--i) {\n                if (typeof this[i] != \"undefined\") {\n                    return this[i];\n                }\n            }\n        },\n        objtos = Object.prototype.toString,\n        Str = String,\n        isArray = Array.isArray || function (ar) {\n            return ar instanceof Array || objtos.call(ar) == \"[object Array]\";\n        };\n    /*\\\n     * eve\n     [ method ]\n\n     * Fires event with given `name`, given scope and other parameters.\n\n     > Arguments\n\n     - name (string) name of the *event*, dot (`.`) or slash (`/`) separated\n     - scope (object) context for the event handlers\n     - varargs (...) the rest of arguments will be sent to event handlers\n\n     = (object) array of returned values from the listeners. Array has two methods `.firstDefined()` and `.lastDefined()` to get first or last not `undefined` value.\n    \\*/\n        eve = function (name, scope) {\n            var e = events,\n                oldstop = stop,\n                args = Array.prototype.slice.call(arguments, 2),\n                listeners = eve.listeners(name),\n                z = 0,\n                f = false,\n                l,\n                indexed = [],\n                queue = {},\n                out = [],\n                ce = current_event,\n                errors = [];\n            out.firstDefined = firstDefined;\n            out.lastDefined = lastDefined;\n            current_event = name;\n            stop = 0;\n            for (var i = 0, ii = listeners.length; i < ii; i++) if (\"zIndex\" in listeners[i]) {\n                indexed.push(listeners[i].zIndex);\n                if (listeners[i].zIndex < 0) {\n                    queue[listeners[i].zIndex] = listeners[i];\n                }\n            }\n            indexed.sort(numsort);\n            while (indexed[z] < 0) {\n                l = queue[indexed[z++]];\n                out.push(l.apply(scope, args));\n                if (stop) {\n                    stop = oldstop;\n                    return out;\n                }\n            }\n            for (i = 0; i < ii; i++) {\n                l = listeners[i];\n                if (\"zIndex\" in l) {\n                    if (l.zIndex == indexed[z]) {\n                        out.push(l.apply(scope, args));\n                        if (stop) {\n                            break;\n                        }\n                        do {\n                            z++;\n                            l = queue[indexed[z]];\n                            l && out.push(l.apply(scope, args));\n                            if (stop) {\n                                break;\n                            }\n                        } while (l)\n                    } else {\n                        queue[l.zIndex] = l;\n                    }\n                } else {\n                    out.push(l.apply(scope, args));\n                    if (stop) {\n                        break;\n                    }\n                }\n            }\n            stop = oldstop;\n            current_event = ce;\n            return out;\n        };\n        // Undocumented. Debug only.\n        eve._events = events;\n    /*\\\n     * eve.listeners\n     [ method ]\n\n     * Internal method which gives you array of all event handlers that will be triggered by the given `name`.\n\n     > Arguments\n\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated\n\n     = (array) array of event handlers\n    \\*/\n    eve.listeners = function (name) {\n        var names = isArray(name) ? name : name.split(separator),\n            e = events,\n            item,\n            items,\n            k,\n            i,\n            ii,\n            j,\n            jj,\n            nes,\n            es = [e],\n            out = [];\n        for (i = 0, ii = names.length; i < ii; i++) {\n            nes = [];\n            for (j = 0, jj = es.length; j < jj; j++) {\n                e = es[j].n;\n                items = [e[names[i]], e[wildcard]];\n                k = 2;\n                while (k--) {\n                    item = items[k];\n                    if (item) {\n                        nes.push(item);\n                        out = out.concat(item.f || []);\n                    }\n                }\n            }\n            es = nes;\n        }\n        return out;\n    };\n    /*\\\n     * eve.separator\n     [ method ]\n\n     * If for some reasons you don’t like default separators (`.` or `/`) you can specify yours\n     * here. Be aware that if you pass a string longer than one character it will be treated as\n     * a list of characters.\n\n     - separator (string) new separator. Empty string resets to default: `.` or `/`.\n    \\*/\n    eve.separator = function (sep) {\n        if (sep) {\n            sep = Str(sep).replace(/(?=[\\.\\^\\]\\[\\-])/g, \"\\\\\");\n            sep = \"[\" + sep + \"]\";\n            separator = new RegExp(sep);\n        } else {\n            separator = /[\\.\\/]/;\n        }\n    };\n    /*\\\n     * eve.on\n     [ method ]\n     **\n     * Binds given event handler with a given name. You can use wildcards “`*`” for the names:\n     | eve.on(\"*.under.*\", f);\n     | eve(\"mouse.under.floor\"); // triggers f\n     * Use @eve to trigger the listener.\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n     **\n     - name (array) if you don’t want to use separators, you can use array of strings\n     - f (function) event handler function\n     **\n     = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment. \n     > Example:\n     | eve.on(\"mouse\", eatIt)(2);\n     | eve.on(\"mouse\", scream);\n     | eve.on(\"mouse\", catchIt)(1);\n     * This will ensure that `catchIt` function will be called before `eatIt`.\n     *\n     * If you want to put your handler before non-indexed handlers, specify a negative value.\n     * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.\n    \\*/\n    eve.on = function (name, f) {\n        if (typeof f != \"function\") {\n            return function () {};\n        }\n        var names = isArray(name) ? (isArray(name[0]) ? name : [name]) : Str(name).split(comaseparator);\n        for (var i = 0, ii = names.length; i < ii; i++) {\n            (function (name) {\n                var names = isArray(name) ? name : Str(name).split(separator),\n                    e = events,\n                    exist;\n                for (var i = 0, ii = names.length; i < ii; i++) {\n                    e = e.n;\n                    e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = {n: {}});\n                }\n                e.f = e.f || [];\n                for (i = 0, ii = e.f.length; i < ii; i++) if (e.f[i] == f) {\n                    exist = true;\n                    break;\n                }\n                !exist && e.f.push(f);\n            }(names[i]));\n        }\n        return function (zIndex) {\n            if (+zIndex == +zIndex) {\n                f.zIndex = +zIndex;\n            }\n        };\n    };\n    /*\\\n     * eve.f\n     [ method ]\n     **\n     * Returns function that will fire given event with optional arguments.\n     * Arguments that will be passed to the result function will be also\n     * concated to the list of final arguments.\n     | el.onclick = eve.f(\"click\", 1, 2);\n     | eve.on(\"click\", function (a, b, c) {\n     |     console.log(a, b, c); // 1, 2, [event object]\n     | });\n     > Arguments\n     - event (string) event name\n     - varargs (…) and any other arguments\n     = (function) possible event handler function\n    \\*/\n    eve.f = function (event) {\n        var attrs = [].slice.call(arguments, 1);\n        return function () {\n            eve.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));\n        };\n    };\n    /*\\\n     * eve.stop\n     [ method ]\n     **\n     * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.\n    \\*/\n    eve.stop = function () {\n        stop = 1;\n    };\n    /*\\\n     * eve.nt\n     [ method ]\n     **\n     * Could be used inside event handler to figure out actual name of the event.\n     **\n     > Arguments\n     **\n     - subname (string) #optional subname of the event\n     **\n     = (string) name of the event, if `subname` is not specified\n     * or\n     = (boolean) `true`, if current event’s name contains `subname`\n    \\*/\n    eve.nt = function (subname) {\n        var cur = isArray(current_event) ? current_event.join(\".\") : current_event;\n        if (subname) {\n            return new RegExp(\"(?:\\\\.|\\\\/|^)\" + subname + \"(?:\\\\.|\\\\/|$)\").test(cur);\n        }\n        return cur;\n    };\n    /*\\\n     * eve.nts\n     [ method ]\n     **\n     * Could be used inside event handler to figure out actual name of the event.\n     **\n     **\n     = (array) names of the event\n    \\*/\n    eve.nts = function () {\n        return isArray(current_event) ? current_event : current_event.split(separator);\n    };\n    /*\\\n     * eve.off\n     [ method ]\n     **\n     * Removes given function from the list of event listeners assigned to given name.\n     * If no arguments specified all the events will be cleared.\n     **\n     > Arguments\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n    \\*/\n    /*\\\n     * eve.unbind\n     [ method ]\n     **\n     * See @eve.off\n    \\*/\n    eve.off = eve.unbind = function (name, f) {\n        if (!name) {\n            eve._events = events = {n: {}};\n            return;\n        }\n        var names = isArray(name) ? (isArray(name[0]) ? name : [name]) : Str(name).split(comaseparator);\n        if (names.length > 1) {\n            for (var i = 0, ii = names.length; i < ii; i++) {\n                eve.off(names[i], f);\n            }\n            return;\n        }\n        names = isArray(name) ? name : Str(name).split(separator);\n        var e,\n            key,\n            splice,\n            i, ii, j, jj,\n            cur = [events],\n            inodes = [];\n        for (i = 0, ii = names.length; i < ii; i++) {\n            for (j = 0; j < cur.length; j += splice.length - 2) {\n                splice = [j, 1];\n                e = cur[j].n;\n                if (names[i] != wildcard) {\n                    if (e[names[i]]) {\n                        splice.push(e[names[i]]);\n                        inodes.unshift({\n                            n: e,\n                            name: names[i]\n                        });\n                    }\n                } else {\n                    for (key in e) if (e[has](key)) {\n                        splice.push(e[key]);\n                        inodes.unshift({\n                            n: e,\n                            name: key\n                        });\n                    }\n                }\n                cur.splice.apply(cur, splice);\n            }\n        }\n        for (i = 0, ii = cur.length; i < ii; i++) {\n            e = cur[i];\n            while (e.n) {\n                if (f) {\n                    if (e.f) {\n                        for (j = 0, jj = e.f.length; j < jj; j++) if (e.f[j] == f) {\n                            e.f.splice(j, 1);\n                            break;\n                        }\n                        !e.f.length && delete e.f;\n                    }\n                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n                        var funcs = e.n[key].f;\n                        for (j = 0, jj = funcs.length; j < jj; j++) if (funcs[j] == f) {\n                            funcs.splice(j, 1);\n                            break;\n                        }\n                        !funcs.length && delete e.n[key].f;\n                    }\n                } else {\n                    delete e.f;\n                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n                        delete e.n[key].f;\n                    }\n                }\n                e = e.n;\n            }\n        }\n        // prune inner nodes in path\n        prune: for (i = 0, ii = inodes.length; i < ii; i++) {\n            e = inodes[i];\n            for (key in e.n[e.name].f) {\n                // not empty (has listeners)\n                continue prune;\n            }\n            for (key in e.n[e.name].n) {\n                // not empty (has children)\n                continue prune;\n            }\n            // is empty\n            delete e.n[e.name];\n        }\n    };\n    /*\\\n     * eve.once\n     [ method ]\n     **\n     * Binds given event handler with a given name to only run once then unbind itself.\n     | eve.once(\"login\", f);\n     | eve(\"login\"); // triggers f\n     | eve(\"login\"); // no listeners\n     * Use @eve to trigger the listener.\n     **\n     > Arguments\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n     **\n     = (function) same return function as @eve.on\n    \\*/\n    eve.once = function (name, f) {\n        var f2 = function () {\n            eve.off(name, f2);\n            return f.apply(this, arguments);\n        };\n        return eve.on(name, f2);\n    };\n    /*\\\n     * eve.version\n     [ property (string) ]\n     **\n     * Current version of the library.\n    \\*/\n    eve.version = version;\n    eve.toString = function () {\n        return \"You are running Eve \" + version;\n    };\n    (typeof module != \"undefined\" && module.exports) ? (module.exports = eve) : (typeof define === \"function\" && define.amd ? (define(\"eve\", [], function() { return eve; })) : (glob.eve = eve));\n})(this);\n\n(function (glob, factory) {\n    // AMD support\n    if (typeof define == \"function\" && define.amd) {\n        // Define as an anonymous module\n        define([\"eve\"], function (eve) {\n            return factory(glob, eve);\n        });\n    } else if (typeof exports != \"undefined\") {\n        // Next for Node.js or CommonJS\n        var eve = require(\"eve\");\n        module.exports = factory(glob, eve);\n    } else {\n        // Browser globals (glob is window)\n        // Snap adds itself to window\n        factory(glob, glob.eve);\n    }\n}(window || this, function (window, eve) {\n\n// Copyright (c) 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar mina = (function (eve) {\n    var animations = {},\n    requestAnimFrame = window.requestAnimationFrame       ||\n                       window.webkitRequestAnimationFrame ||\n                       window.mozRequestAnimationFrame    ||\n                       window.oRequestAnimationFrame      ||\n                       window.msRequestAnimationFrame     ||\n                       function (callback) {\n                           setTimeout(callback, 16, new Date().getTime());\n                           return true;\n                       },\n    requestID,\n    isArray = Array.isArray || function (a) {\n        return a instanceof Array ||\n            Object.prototype.toString.call(a) == \"[object Array]\";\n    },\n    idgen = 0,\n    idprefix = \"M\" + (+new Date).toString(36),\n    ID = function () {\n        return idprefix + (idgen++).toString(36);\n    },\n    diff = function (a, b, A, B) {\n        if (isArray(a)) {\n            res = [];\n            for (var i = 0, ii = a.length; i < ii; i++) {\n                res[i] = diff(a[i], b, A[i], B);\n            }\n            return res;\n        }\n        var dif = (A - a) / (B - b);\n        return function (bb) {\n            return a + dif * (bb - b);\n        };\n    },\n    timer = Date.now || function () {\n        return +new Date;\n    },\n    sta = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.s;\n        }\n        var ds = a.s - val;\n        a.b += a.dur * ds;\n        a.B += a.dur * ds;\n        a.s = val;\n    },\n    speed = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.spd;\n        }\n        a.spd = val;\n    },\n    duration = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.dur;\n        }\n        a.s = a.s * val / a.dur;\n        a.dur = val;\n    },\n    stopit = function () {\n        var a = this;\n        delete animations[a.id];\n        a.update();\n        eve(\"mina.stop.\" + a.id, a);\n    },\n    pause = function () {\n        var a = this;\n        if (a.pdif) {\n            return;\n        }\n        delete animations[a.id];\n        a.update();\n        a.pdif = a.get() - a.b;\n    },\n    resume = function () {\n        var a = this;\n        if (!a.pdif) {\n            return;\n        }\n        a.b = a.get() - a.pdif;\n        delete a.pdif;\n        animations[a.id] = a;\n        frame();\n    },\n    update = function () {\n        var a = this,\n            res;\n        if (isArray(a.start)) {\n            res = [];\n            for (var j = 0, jj = a.start.length; j < jj; j++) {\n                res[j] = +a.start[j] +\n                    (a.end[j] - a.start[j]) * a.easing(a.s);\n            }\n        } else {\n            res = +a.start + (a.end - a.start) * a.easing(a.s);\n        }\n        a.set(res);\n    },\n    frame = function (timeStamp) {\n        // Manual invokation?\n        if (!timeStamp) {\n            // Frame loop stopped?\n            if (!requestID) {\n                // Start frame loop...\n                requestID = requestAnimFrame(frame);\n            }\n            return;\n        }\n        var len = 0;\n        for (var i in animations) if (animations.hasOwnProperty(i)) {\n            var a = animations[i],\n                b = a.get(),\n                res;\n            len++;\n            a.s = (b - a.b) / (a.dur / a.spd);\n            if (a.s >= 1) {\n                delete animations[i];\n                a.s = 1;\n                len--;\n                (function (a) {\n                    setTimeout(function () {\n                        eve(\"mina.finish.\" + a.id, a);\n                    });\n                }(a));\n            }\n            a.update();\n        }\n        requestID = len ? requestAnimFrame(frame) : false;\n    },\n    /*\\\n     * mina\n     [ method ]\n     **\n     * Generic animation of numbers\n     **\n     - a (number) start _slave_ number\n     - A (number) end _slave_ number\n     - b (number) start _master_ number (start time in general case)\n     - B (number) end _master_ number (end time in general case)\n     - get (function) getter of _master_ number (see @mina.time)\n     - set (function) setter of _slave_ number\n     - easing (function) #optional easing function, default is @mina.linear\n     = (object) animation descriptor\n     o {\n     o         id (string) animation id,\n     o         start (number) start _slave_ number,\n     o         end (number) end _slave_ number,\n     o         b (number) start _master_ number,\n     o         s (number) animation status (0..1),\n     o         dur (number) animation duration,\n     o         spd (number) animation speed,\n     o         get (function) getter of _master_ number (see @mina.time),\n     o         set (function) setter of _slave_ number,\n     o         easing (function) easing function, default is @mina.linear,\n     o         status (function) status getter/setter,\n     o         speed (function) speed getter/setter,\n     o         duration (function) duration getter/setter,\n     o         stop (function) animation stopper\n     o         pause (function) pauses the animation\n     o         resume (function) resumes the animation\n     o         update (function) calles setter with the right value of the animation\n     o }\n    \\*/\n    mina = function (a, A, b, B, get, set, easing) {\n        var anim = {\n            id: ID(),\n            start: a,\n            end: A,\n            b: b,\n            s: 0,\n            dur: B - b,\n            spd: 1,\n            get: get,\n            set: set,\n            easing: easing || mina.linear,\n            status: sta,\n            speed: speed,\n            duration: duration,\n            stop: stopit,\n            pause: pause,\n            resume: resume,\n            update: update\n        };\n        animations[anim.id] = anim;\n        var len = 0, i;\n        for (i in animations) if (animations.hasOwnProperty(i)) {\n            len++;\n            if (len == 2) {\n                break;\n            }\n        }\n        len == 1 && frame();\n        return anim;\n    };\n    /*\\\n     * mina.time\n     [ method ]\n     **\n     * Returns the current time. Equivalent to:\n     | function () {\n     |     return (new Date).getTime();\n     | }\n    \\*/\n    mina.time = timer;\n    /*\\\n     * mina.getById\n     [ method ]\n     **\n     * Returns an animation by its id\n     - id (string) animation's id\n     = (object) See @mina\n    \\*/\n    mina.getById = function (id) {\n        return animations[id] || null;\n    };\n\n    /*\\\n     * mina.linear\n     [ method ]\n     **\n     * Default linear easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.linear = function (n) {\n        return n;\n    };\n    /*\\\n     * mina.easeout\n     [ method ]\n     **\n     * Easeout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easeout = function (n) {\n        return Math.pow(n, 1.7);\n    };\n    /*\\\n     * mina.easein\n     [ method ]\n     **\n     * Easein easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easein = function (n) {\n        return Math.pow(n, .48);\n    };\n    /*\\\n     * mina.easeinout\n     [ method ]\n     **\n     * Easeinout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easeinout = function (n) {\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        var q = .48 - n / 1.04,\n            Q = Math.sqrt(.1734 + q * q),\n            x = Q - q,\n            X = Math.pow(Math.abs(x), 1 / 3) * (x < 0 ? -1 : 1),\n            y = -Q - q,\n            Y = Math.pow(Math.abs(y), 1 / 3) * (y < 0 ? -1 : 1),\n            t = X + Y + .5;\n        return (1 - t) * 3 * t * t + t * t * t;\n    };\n    /*\\\n     * mina.backin\n     [ method ]\n     **\n     * Backin easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.backin = function (n) {\n        if (n == 1) {\n            return 1;\n        }\n        var s = 1.70158;\n        return n * n * ((s + 1) * n - s);\n    };\n    /*\\\n     * mina.backout\n     [ method ]\n     **\n     * Backout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.backout = function (n) {\n        if (n == 0) {\n            return 0;\n        }\n        n = n - 1;\n        var s = 1.70158;\n        return n * n * ((s + 1) * n + s) + 1;\n    };\n    /*\\\n     * mina.elastic\n     [ method ]\n     **\n     * Elastic easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.elastic = function (n) {\n        if (n == !!n) {\n            return n;\n        }\n        return Math.pow(2, -10 * n) * Math.sin((n - .075) *\n            (2 * Math.PI) / .3) + 1;\n    };\n    /*\\\n     * mina.bounce\n     [ method ]\n     **\n     * Bounce easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.bounce = function (n) {\n        var s = 7.5625,\n            p = 2.75,\n            l;\n        if (n < 1 / p) {\n            l = s * n * n;\n        } else {\n            if (n < 2 / p) {\n                n -= 1.5 / p;\n                l = s * n * n + .75;\n            } else {\n                if (n < 2.5 / p) {\n                    n -= 2.25 / p;\n                    l = s * n * n + .9375;\n                } else {\n                    n -= 2.625 / p;\n                    l = s * n * n + .984375;\n                }\n            }\n        }\n        return l;\n    };\n    window.mina = mina;\n    return mina;\n})(typeof eve == \"undefined\" ? function () {} : eve);\n\n// Copyright (c) 2013 - 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar Snap = (function(root) {\nSnap.version = \"0.5.1\";\n/*\\\n * Snap\n [ method ]\n **\n * Creates a drawing surface or wraps existing SVG element.\n **\n - width (number|string) width of surface\n - height (number|string) height of surface\n * or\n - DOM (SVGElement) element to be wrapped into Snap structure\n * or\n - array (array) array of elements (will return set of elements)\n * or\n - query (string) CSS query selector\n = (object) @Element\n\\*/\nfunction Snap(w, h) {\n    if (w) {\n        if (w.nodeType) {\n            return wrap(w);\n        }\n        if (is(w, \"array\") && Snap.set) {\n            return Snap.set.apply(Snap, w);\n        }\n        if (w instanceof Element) {\n            return w;\n        }\n        if (h == null) {\n            // try {\n                w = glob.doc.querySelector(String(w));\n                return wrap(w);\n            // } catch (e) {\n                // return null;\n            // }\n        }\n    }\n    w = w == null ? \"100%\" : w;\n    h = h == null ? \"100%\" : h;\n    return new Paper(w, h);\n}\nSnap.toString = function () {\n    return \"Snap v\" + this.version;\n};\nSnap._ = {};\nvar glob = {\n    win: root.window,\n    doc: root.window.document\n};\nSnap._.glob = glob;\nvar has = \"hasOwnProperty\",\n    Str = String,\n    toFloat = parseFloat,\n    toInt = parseInt,\n    math = Math,\n    mmax = math.max,\n    mmin = math.min,\n    abs = math.abs,\n    pow = math.pow,\n    PI = math.PI,\n    round = math.round,\n    E = \"\",\n    S = \" \",\n    objectToString = Object.prototype.toString,\n    ISURL = /^url\\(['\"]?([^\\)]+?)['\"]?\\)$/i,\n    colourRegExp = /^\\s*((#[a-f\\d]{6})|(#[a-f\\d]{3})|rgba?\\(\\s*([\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?(?:\\s*,\\s*[\\d\\.]+%?)?)\\s*\\)|hsba?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\)|hsla?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\))\\s*$/i,\n    bezierrg = /^(?:cubic-)?bezier\\(([^,]+),([^,]+),([^,]+),([^\\)]+)\\)/,\n    separator = Snap._.separator = /[,\\s]+/,\n    whitespace = /[\\s]/g,\n    commaSpaces = /[\\s]*,[\\s]*/,\n    hsrg = {hs: 1, rg: 1},\n    pathCommand = /([a-z])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n    tCommand = /([rstm])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n    pathValues = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[\\s]*,?[\\s]*/ig,\n    idgen = 0,\n    idprefix = \"S\" + (+new Date).toString(36),\n    ID = function (el) {\n        return (el && el.type ? el.type : E) + idprefix + (idgen++).toString(36);\n    },\n    xlink = \"http://www.w3.org/1999/xlink\",\n    xmlns = \"http://www.w3.org/2000/svg\",\n    hub = {},\n    /*\\\n     * Snap.url\n     [ method ]\n     **\n     * Wraps path into `\"url('<path>')\"`.\n     - value (string) path\n     = (string) wrapped path\n    \\*/\n    URL = Snap.url = function (url) {\n        return \"url('#\" + url + \"')\";\n    };\n\nfunction $(el, attr) {\n    if (attr) {\n        if (el == \"#text\") {\n            el = glob.doc.createTextNode(attr.text || attr[\"#text\"] || \"\");\n        }\n        if (el == \"#comment\") {\n            el = glob.doc.createComment(attr.text || attr[\"#text\"] || \"\");\n        }\n        if (typeof el == \"string\") {\n            el = $(el);\n        }\n        if (typeof attr == \"string\") {\n            if (el.nodeType == 1) {\n                if (attr.substring(0, 6) == \"xlink:\") {\n                    return el.getAttributeNS(xlink, attr.substring(6));\n                }\n                if (attr.substring(0, 4) == \"xml:\") {\n                    return el.getAttributeNS(xmlns, attr.substring(4));\n                }\n                return el.getAttribute(attr);\n            } else if (attr == \"text\") {\n                return el.nodeValue;\n            } else {\n                return null;\n            }\n        }\n        if (el.nodeType == 1) {\n            for (var key in attr) if (attr[has](key)) {\n                var val = Str(attr[key]);\n                if (val) {\n                    if (key.substring(0, 6) == \"xlink:\") {\n                        el.setAttributeNS(xlink, key.substring(6), val);\n                    } else if (key.substring(0, 4) == \"xml:\") {\n                        el.setAttributeNS(xmlns, key.substring(4), val);\n                    } else {\n                        el.setAttribute(key, val);\n                    }\n                } else {\n                    el.removeAttribute(key);\n                }\n            }\n        } else if (\"text\" in attr) {\n            el.nodeValue = attr.text;\n        }\n    } else {\n        el = glob.doc.createElementNS(xmlns, el);\n    }\n    return el;\n}\nSnap._.$ = $;\nSnap._.id = ID;\nfunction getAttrs(el) {\n    var attrs = el.attributes,\n        name,\n        out = {};\n    for (var i = 0; i < attrs.length; i++) {\n        if (attrs[i].namespaceURI == xlink) {\n            name = \"xlink:\";\n        } else {\n            name = \"\";\n        }\n        name += attrs[i].name;\n        out[name] = attrs[i].textContent;\n    }\n    return out;\n}\nfunction is(o, type) {\n    type = Str.prototype.toLowerCase.call(type);\n    if (type == \"finite\") {\n        return isFinite(o);\n    }\n    if (type == \"array\" &&\n        (o instanceof Array || Array.isArray && Array.isArray(o))) {\n        return true;\n    }\n    return  type == \"null\" && o === null ||\n            type == typeof o && o !== null ||\n            type == \"object\" && o === Object(o) ||\n            objectToString.call(o).slice(8, -1).toLowerCase() == type;\n}\n/*\\\n * Snap.format\n [ method ]\n **\n * Replaces construction of type `{<name>}` to the corresponding argument\n **\n - token (string) string to format\n - json (object) object which properties are used as a replacement\n = (string) formatted string\n > Usage\n | // this draws a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n | paper.path(Snap.format(\"M{x},{y}h{dim.width}v{dim.height}h{dim['negative width']}z\", {\n |     x: 10,\n |     y: 20,\n |     dim: {\n |         width: 40,\n |         height: 50,\n |         \"negative width\": -40\n |     }\n | }));\n\\*/\nSnap.format = (function () {\n    var tokenRegex = /\\{([^\\}]+)\\}/g,\n        objNotationRegex = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[('|\")(.+?)\\2\\])(\\(\\))?/g, // matches .xxxxx or [\"xxxxx\"] to run over object properties\n        replacer = function (all, key, obj) {\n            var res = obj;\n            key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {\n                name = name || quotedName;\n                if (res) {\n                    if (name in res) {\n                        res = res[name];\n                    }\n                    typeof res == \"function\" && isFunc && (res = res());\n                }\n            });\n            res = (res == null || res == obj ? all : res) + \"\";\n            return res;\n        };\n    return function (str, obj) {\n        return Str(str).replace(tokenRegex, function (all, key) {\n            return replacer(all, key, obj);\n        });\n    };\n})();\nfunction clone(obj) {\n    if (typeof obj == \"function\" || Object(obj) !== obj) {\n        return obj;\n    }\n    var res = new obj.constructor;\n    for (var key in obj) if (obj[has](key)) {\n        res[key] = clone(obj[key]);\n    }\n    return res;\n}\nSnap._.clone = clone;\nfunction repush(array, item) {\n    for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {\n        return array.push(array.splice(i, 1)[0]);\n    }\n}\nfunction cacher(f, scope, postprocessor) {\n    function newf() {\n        var arg = Array.prototype.slice.call(arguments, 0),\n            args = arg.join(\"\\u2400\"),\n            cache = newf.cache = newf.cache || {},\n            count = newf.count = newf.count || [];\n        if (cache[has](args)) {\n            repush(count, args);\n            return postprocessor ? postprocessor(cache[args]) : cache[args];\n        }\n        count.length >= 1e3 && delete cache[count.shift()];\n        count.push(args);\n        cache[args] = f.apply(scope, arg);\n        return postprocessor ? postprocessor(cache[args]) : cache[args];\n    }\n    return newf;\n}\nSnap._.cacher = cacher;\nfunction angle(x1, y1, x2, y2, x3, y3) {\n    if (x3 == null) {\n        var x = x1 - x2,\n            y = y1 - y2;\n        if (!x && !y) {\n            return 0;\n        }\n        return (180 + math.atan2(-y, -x) * 180 / PI + 360) % 360;\n    } else {\n        return angle(x1, y1, x3, y3) - angle(x2, y2, x3, y3);\n    }\n}\nfunction rad(deg) {\n    return deg % 360 * PI / 180;\n}\nfunction deg(rad) {\n    return rad * 180 / PI % 360;\n}\nfunction x_y() {\n    return this.x + S + this.y;\n}\nfunction x_y_w_h() {\n    return this.x + S + this.y + S + this.width + \" \\xd7 \" + this.height;\n}\n\n/*\\\n * Snap.rad\n [ method ]\n **\n * Transform angle to radians\n - deg (number) angle in degrees\n = (number) angle in radians\n\\*/\nSnap.rad = rad;\n/*\\\n * Snap.deg\n [ method ]\n **\n * Transform angle to degrees\n - rad (number) angle in radians\n = (number) angle in degrees\n\\*/\nSnap.deg = deg;\n/*\\\n * Snap.sin\n [ method ]\n **\n * Equivalent to `Math.sin()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) sin\n\\*/\nSnap.sin = function (angle) {\n    return math.sin(Snap.rad(angle));\n};\n/*\\\n * Snap.tan\n [ method ]\n **\n * Equivalent to `Math.tan()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) tan\n\\*/\nSnap.tan = function (angle) {\n    return math.tan(Snap.rad(angle));\n};\n/*\\\n * Snap.cos\n [ method ]\n **\n * Equivalent to `Math.cos()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) cos\n\\*/\nSnap.cos = function (angle) {\n    return math.cos(Snap.rad(angle));\n};\n/*\\\n * Snap.asin\n [ method ]\n **\n * Equivalent to `Math.asin()` only works with degrees, not radians.\n - num (number) value\n = (number) asin in degrees\n\\*/\nSnap.asin = function (num) {\n    return Snap.deg(math.asin(num));\n};\n/*\\\n * Snap.acos\n [ method ]\n **\n * Equivalent to `Math.acos()` only works with degrees, not radians.\n - num (number) value\n = (number) acos in degrees\n\\*/\nSnap.acos = function (num) {\n    return Snap.deg(math.acos(num));\n};\n/*\\\n * Snap.atan\n [ method ]\n **\n * Equivalent to `Math.atan()` only works with degrees, not radians.\n - num (number) value\n = (number) atan in degrees\n\\*/\nSnap.atan = function (num) {\n    return Snap.deg(math.atan(num));\n};\n/*\\\n * Snap.atan2\n [ method ]\n **\n * Equivalent to `Math.atan2()` only works with degrees, not radians.\n - num (number) value\n = (number) atan2 in degrees\n\\*/\nSnap.atan2 = function (num) {\n    return Snap.deg(math.atan2(num));\n};\n/*\\\n * Snap.angle\n [ method ]\n **\n * Returns an angle between two or three points\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n - x3 (number) #optional x coord of third point\n - y3 (number) #optional y coord of third point\n = (number) angle in degrees\n\\*/\nSnap.angle = angle;\n/*\\\n * Snap.len\n [ method ]\n **\n * Returns distance between two points\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n = (number) distance\n\\*/\nSnap.len = function (x1, y1, x2, y2) {\n    return Math.sqrt(Snap.len2(x1, y1, x2, y2));\n};\n/*\\\n * Snap.len2\n [ method ]\n **\n * Returns squared distance between two points\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n = (number) distance\n\\*/\nSnap.len2 = function (x1, y1, x2, y2) {\n    return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n};\n/*\\\n * Snap.closestPoint\n [ method ]\n **\n * Returns closest point to a given one on a given path.\n - path (Element) path element\n - x (number) x coord of a point\n - y (number) y coord of a point\n = (object) in format\n {\n    x (number) x coord of the point on the path\n    y (number) y coord of the point on the path\n    length (number) length of the path to the point\n    distance (number) distance from the given point to the path\n }\n\\*/\n// Copied from http://bl.ocks.org/mbostock/8027637\nSnap.closestPoint = function (path, x, y) {\n    function distance2(p) {\n        var dx = p.x - x,\n            dy = p.y - y;\n        return dx * dx + dy * dy;\n    }\n    var pathNode = path.node,\n        pathLength = pathNode.getTotalLength(),\n        precision = pathLength / pathNode.pathSegList.numberOfItems * .125,\n        best,\n        bestLength,\n        bestDistance = Infinity;\n\n    // linear scan for coarse approximation\n    for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {\n        if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {\n            best = scan;\n            bestLength = scanLength;\n            bestDistance = scanDistance;\n        }\n    }\n\n    // binary search for precise estimate\n    precision *= .5;\n    while (precision > .5) {\n        var before,\n            after,\n            beforeLength,\n            afterLength,\n            beforeDistance,\n            afterDistance;\n        if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {\n            best = before;\n            bestLength = beforeLength;\n            bestDistance = beforeDistance;\n        } else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {\n            best = after;\n            bestLength = afterLength;\n            bestDistance = afterDistance;\n        } else {\n            precision *= .5;\n        }\n    }\n\n    best = {\n        x: best.x,\n        y: best.y,\n        length: bestLength,\n        distance: Math.sqrt(bestDistance)\n    };\n    return best;\n}\n/*\\\n * Snap.is\n [ method ]\n **\n * Handy replacement for the `typeof` operator\n - o (…) any object or primitive\n - type (string) name of the type, e.g., `string`, `function`, `number`, etc.\n = (boolean) `true` if given value is of given type\n\\*/\nSnap.is = is;\n/*\\\n * Snap.snapTo\n [ method ]\n **\n * Snaps given value to given grid\n - values (array|number) given array of values or step of the grid\n - value (number) value to adjust\n - tolerance (number) #optional maximum distance to the target value that would trigger the snap. Default is `10`.\n = (number) adjusted value\n\\*/\nSnap.snapTo = function (values, value, tolerance) {\n    tolerance = is(tolerance, \"finite\") ? tolerance : 10;\n    if (is(values, \"array\")) {\n        var i = values.length;\n        while (i--) if (abs(values[i] - value) <= tolerance) {\n            return values[i];\n        }\n    } else {\n        values = +values;\n        var rem = value % values;\n        if (rem < tolerance) {\n            return value - rem;\n        }\n        if (rem > values - tolerance) {\n            return value - rem + values;\n        }\n    }\n    return value;\n};\n// Colour\n/*\\\n * Snap.getRGB\n [ method ]\n **\n * Parses color string as RGB object\n - color (string) color string in one of the following formats:\n # <ul>\n #     <li>Color name (<code>red</code>, <code>green</code>, <code>cornflowerblue</code>, etc)</li>\n #     <li>#••• — shortened HTML color: (<code>#000</code>, <code>#fc0</code>, etc.)</li>\n #     <li>#•••••• — full length HTML color: (<code>#000000</code>, <code>#bd2300</code>)</li>\n #     <li>rgb(•••, •••, •••) — red, green and blue channels values: (<code>rgb(200,&nbsp;100,&nbsp;0)</code>)</li>\n #     <li>rgba(•••, •••, •••, •••) — also with opacity</li>\n #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>)</li>\n #     <li>rgba(•••%, •••%, •••%, •••%) — also with opacity</li>\n #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>)</li>\n #     <li>hsba(•••, •••, •••, •••) — also with opacity</li>\n #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n #     <li>hsba(•••%, •••%, •••%, •••%) — also with opacity</li>\n #     <li>hsl(•••, •••, •••) — hue, saturation and luminosity values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;0.5)</code>)</li>\n #     <li>hsla(•••, •••, •••, •••) — also with opacity</li>\n #     <li>hsl(•••%, •••%, •••%) — same as above, but in %</li>\n #     <li>hsla(•••%, •••%, •••%, •••%) — also with opacity</li>\n # </ul>\n * Note that `%` can be used any time: `rgb(20%, 255, 50%)`.\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••,\n o     error (boolean) true if string can't be parsed\n o }\n\\*/\nSnap.getRGB = cacher(function (colour) {\n    if (!colour || !!((colour = Str(colour)).indexOf(\"-\") + 1)) {\n        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n    }\n    if (colour == \"none\") {\n        return {r: -1, g: -1, b: -1, hex: \"none\", toString: rgbtoString};\n    }\n    !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == \"#\") && (colour = toHex(colour));\n    if (!colour) {\n        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n    }\n    var res,\n        red,\n        green,\n        blue,\n        opacity,\n        t,\n        values,\n        rgb = colour.match(colourRegExp);\n    if (rgb) {\n        if (rgb[2]) {\n            blue = toInt(rgb[2].substring(5), 16);\n            green = toInt(rgb[2].substring(3, 5), 16);\n            red = toInt(rgb[2].substring(1, 3), 16);\n        }\n        if (rgb[3]) {\n            blue = toInt((t = rgb[3].charAt(3)) + t, 16);\n            green = toInt((t = rgb[3].charAt(2)) + t, 16);\n            red = toInt((t = rgb[3].charAt(1)) + t, 16);\n        }\n        if (rgb[4]) {\n            values = rgb[4].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red *= 2.55);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green *= 2.55);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue *= 2.55);\n            rgb[1].toLowerCase().slice(0, 4) == \"rgba\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n        }\n        if (rgb[5]) {\n            values = rgb[5].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red /= 100);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green /= 100);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue /= 100);\n            (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n            rgb[1].toLowerCase().slice(0, 4) == \"hsba\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n            return Snap.hsb2rgb(red, green, blue, opacity);\n        }\n        if (rgb[6]) {\n            values = rgb[6].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red /= 100);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green /= 100);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue /= 100);\n            (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n            rgb[1].toLowerCase().slice(0, 4) == \"hsla\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n            return Snap.hsl2rgb(red, green, blue, opacity);\n        }\n        red = mmin(math.round(red), 255);\n        green = mmin(math.round(green), 255);\n        blue = mmin(math.round(blue), 255);\n        opacity = mmin(mmax(opacity, 0), 1);\n        rgb = {r: red, g: green, b: blue, toString: rgbtoString};\n        rgb.hex = \"#\" + (16777216 | blue | green << 8 | red << 16).toString(16).slice(1);\n        rgb.opacity = is(opacity, \"finite\") ? opacity : 1;\n        return rgb;\n    }\n    return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n}, Snap);\n/*\\\n * Snap.hsb\n [ method ]\n **\n * Converts HSB values to a hex representation of the color\n - h (number) hue\n - s (number) saturation\n - b (number) value or brightness\n = (string) hex representation of the color\n\\*/\nSnap.hsb = cacher(function (h, s, b) {\n    return Snap.hsb2rgb(h, s, b).hex;\n});\n/*\\\n * Snap.hsl\n [ method ]\n **\n * Converts HSL values to a hex representation of the color\n - h (number) hue\n - s (number) saturation\n - l (number) luminosity\n = (string) hex representation of the color\n\\*/\nSnap.hsl = cacher(function (h, s, l) {\n    return Snap.hsl2rgb(h, s, l).hex;\n});\n/*\\\n * Snap.rgb\n [ method ]\n **\n * Converts RGB values to a hex representation of the color\n - r (number) red\n - g (number) green\n - b (number) blue\n = (string) hex representation of the color\n\\*/\nSnap.rgb = cacher(function (r, g, b, o) {\n    if (is(o, \"finite\")) {\n        var round = math.round;\n        return \"rgba(\" + [round(r), round(g), round(b), +o.toFixed(2)] + \")\";\n    }\n    return \"#\" + (16777216 | b | g << 8 | r << 16).toString(16).slice(1);\n});\nvar toHex = function (color) {\n    var i = glob.doc.getElementsByTagName(\"head\")[0] || glob.doc.getElementsByTagName(\"svg\")[0],\n        red = \"rgb(255, 0, 0)\";\n    toHex = cacher(function (color) {\n        if (color.toLowerCase() == \"red\") {\n            return red;\n        }\n        i.style.color = red;\n        i.style.color = color;\n        var out = glob.doc.defaultView.getComputedStyle(i, E).getPropertyValue(\"color\");\n        return out == red ? null : out;\n    });\n    return toHex(color);\n},\nhsbtoString = function () {\n    return \"hsb(\" + [this.h, this.s, this.b] + \")\";\n},\nhsltoString = function () {\n    return \"hsl(\" + [this.h, this.s, this.l] + \")\";\n},\nrgbtoString = function () {\n    return this.opacity == 1 || this.opacity == null ?\n            this.hex :\n            \"rgba(\" + [this.r, this.g, this.b, this.opacity] + \")\";\n},\nprepareRGB = function (r, g, b) {\n    if (g == null && is(r, \"object\") && \"r\" in r && \"g\" in r && \"b\" in r) {\n        b = r.b;\n        g = r.g;\n        r = r.r;\n    }\n    if (g == null && is(r, string)) {\n        var clr = Snap.getRGB(r);\n        r = clr.r;\n        g = clr.g;\n        b = clr.b;\n    }\n    if (r > 1 || g > 1 || b > 1) {\n        r /= 255;\n        g /= 255;\n        b /= 255;\n    }\n\n    return [r, g, b];\n},\npackageRGB = function (r, g, b, o) {\n    r = math.round(r * 255);\n    g = math.round(g * 255);\n    b = math.round(b * 255);\n    var rgb = {\n        r: r,\n        g: g,\n        b: b,\n        opacity: is(o, \"finite\") ? o : 1,\n        hex: Snap.rgb(r, g, b),\n        toString: rgbtoString\n    };\n    is(o, \"finite\") && (rgb.opacity = o);\n    return rgb;\n};\n/*\\\n * Snap.color\n [ method ]\n **\n * Parses the color string and returns an object featuring the color's component values\n - clr (string) color string in one of the supported formats (see @Snap.getRGB)\n = (object) Combined RGB/HSB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••,\n o     error (boolean) `true` if string can't be parsed,\n o     h (number) hue,\n o     s (number) saturation,\n o     v (number) value (brightness),\n o     l (number) lightness\n o }\n\\*/\nSnap.color = function (clr) {\n    var rgb;\n    if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"b\" in clr) {\n        rgb = Snap.hsb2rgb(clr);\n        clr.r = rgb.r;\n        clr.g = rgb.g;\n        clr.b = rgb.b;\n        clr.opacity = 1;\n        clr.hex = rgb.hex;\n    } else if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"l\" in clr) {\n        rgb = Snap.hsl2rgb(clr);\n        clr.r = rgb.r;\n        clr.g = rgb.g;\n        clr.b = rgb.b;\n        clr.opacity = 1;\n        clr.hex = rgb.hex;\n    } else {\n        if (is(clr, \"string\")) {\n            clr = Snap.getRGB(clr);\n        }\n        if (is(clr, \"object\") && \"r\" in clr && \"g\" in clr && \"b\" in clr && !(\"error\" in clr)) {\n            rgb = Snap.rgb2hsl(clr);\n            clr.h = rgb.h;\n            clr.s = rgb.s;\n            clr.l = rgb.l;\n            rgb = Snap.rgb2hsb(clr);\n            clr.v = rgb.b;\n        } else {\n            clr = {hex: \"none\"};\n            clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;\n            clr.error = 1;\n        }\n    }\n    clr.toString = rgbtoString;\n    return clr;\n};\n/*\\\n * Snap.hsb2rgb\n [ method ]\n **\n * Converts HSB values to an RGB object\n - h (number) hue\n - s (number) saturation\n - v (number) value or brightness\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••\n o }\n\\*/\nSnap.hsb2rgb = function (h, s, v, o) {\n    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"b\" in h) {\n        v = h.b;\n        s = h.s;\n        o = h.o;\n        h = h.h;\n    }\n    h *= 360;\n    var R, G, B, X, C;\n    h = h % 360 / 60;\n    C = v * s;\n    X = C * (1 - abs(h % 2 - 1));\n    R = G = B = v - C;\n\n    h = ~~h;\n    R += [C, X, 0, 0, X, C][h];\n    G += [X, C, C, X, 0, 0][h];\n    B += [0, 0, X, C, C, X][h];\n    return packageRGB(R, G, B, o);\n};\n/*\\\n * Snap.hsl2rgb\n [ method ]\n **\n * Converts HSL values to an RGB object\n - h (number) hue\n - s (number) saturation\n - l (number) luminosity\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••\n o }\n\\*/\nSnap.hsl2rgb = function (h, s, l, o) {\n    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"l\" in h) {\n        l = h.l;\n        s = h.s;\n        h = h.h;\n    }\n    if (h > 1 || s > 1 || l > 1) {\n        h /= 360;\n        s /= 100;\n        l /= 100;\n    }\n    h *= 360;\n    var R, G, B, X, C;\n    h = h % 360 / 60;\n    C = 2 * s * (l < .5 ? l : 1 - l);\n    X = C * (1 - abs(h % 2 - 1));\n    R = G = B = l - C / 2;\n\n    h = ~~h;\n    R += [C, X, 0, 0, X, C][h];\n    G += [X, C, C, X, 0, 0][h];\n    B += [0, 0, X, C, C, X][h];\n    return packageRGB(R, G, B, o);\n};\n/*\\\n * Snap.rgb2hsb\n [ method ]\n **\n * Converts RGB values to an HSB object\n - r (number) red\n - g (number) green\n - b (number) blue\n = (object) HSB object in the following format:\n o {\n o     h (number) hue,\n o     s (number) saturation,\n o     b (number) brightness\n o }\n\\*/\nSnap.rgb2hsb = function (r, g, b) {\n    b = prepareRGB(r, g, b);\n    r = b[0];\n    g = b[1];\n    b = b[2];\n\n    var H, S, V, C;\n    V = mmax(r, g, b);\n    C = V - mmin(r, g, b);\n    H = C == 0 ? null :\n        V == r ? (g - b) / C :\n        V == g ? (b - r) / C + 2 :\n                 (r - g) / C + 4;\n    H = (H + 360) % 6 * 60 / 360;\n    S = C == 0 ? 0 : C / V;\n    return {h: H, s: S, b: V, toString: hsbtoString};\n};\n/*\\\n * Snap.rgb2hsl\n [ method ]\n **\n * Converts RGB values to an HSL object\n - r (number) red\n - g (number) green\n - b (number) blue\n = (object) HSL object in the following format:\n o {\n o     h (number) hue,\n o     s (number) saturation,\n o     l (number) luminosity\n o }\n\\*/\nSnap.rgb2hsl = function (r, g, b) {\n    b = prepareRGB(r, g, b);\n    r = b[0];\n    g = b[1];\n    b = b[2];\n\n    var H, S, L, M, m, C;\n    M = mmax(r, g, b);\n    m = mmin(r, g, b);\n    C = M - m;\n    H = C == 0 ? null :\n        M == r ? (g - b) / C :\n        M == g ? (b - r) / C + 2 :\n                 (r - g) / C + 4;\n    H = (H + 360) % 6 * 60 / 360;\n    L = (M + m) / 2;\n    S = C == 0 ? 0 :\n         L < .5 ? C / (2 * L) :\n                  C / (2 - 2 * L);\n    return {h: H, s: S, l: L, toString: hsltoString};\n};\n\n// Transformations\n/*\\\n * Snap.parsePathString\n [ method ]\n **\n * Utility method\n **\n * Parses given path string into an array of arrays of path segments\n - pathString (string|array) path string or array of segments (in the last case it is returned straight away)\n = (array) array of segments\n\\*/\nSnap.parsePathString = function (pathString) {\n    if (!pathString) {\n        return null;\n    }\n    var pth = Snap.path(pathString);\n    if (pth.arr) {\n        return Snap.path.clone(pth.arr);\n    }\n\n    var paramCounts = {a: 7, c: 6, o: 2, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, u: 3, z: 0},\n        data = [];\n    if (is(pathString, \"array\") && is(pathString[0], \"array\")) { // rough assumption\n        data = Snap.path.clone(pathString);\n    }\n    if (!data.length) {\n        Str(pathString).replace(pathCommand, function (a, b, c) {\n            var params = [],\n                name = b.toLowerCase();\n            c.replace(pathValues, function (a, b) {\n                b && params.push(+b);\n            });\n            if (name == \"m\" && params.length > 2) {\n                data.push([b].concat(params.splice(0, 2)));\n                name = \"l\";\n                b = b == \"m\" ? \"l\" : \"L\";\n            }\n            if (name == \"o\" && params.length == 1) {\n                data.push([b, params[0]]);\n            }\n            if (name == \"r\") {\n                data.push([b].concat(params));\n            } else while (params.length >= paramCounts[name]) {\n                data.push([b].concat(params.splice(0, paramCounts[name])));\n                if (!paramCounts[name]) {\n                    break;\n                }\n            }\n        });\n    }\n    data.toString = Snap.path.toString;\n    pth.arr = Snap.path.clone(data);\n    return data;\n};\n/*\\\n * Snap.parseTransformString\n [ method ]\n **\n * Utility method\n **\n * Parses given transform string into an array of transformations\n - TString (string|array) transform string or array of transformations (in the last case it is returned straight away)\n = (array) array of transformations\n\\*/\nvar parseTransformString = Snap.parseTransformString = function (TString) {\n    if (!TString) {\n        return null;\n    }\n    var paramCounts = {r: 3, s: 4, t: 2, m: 6},\n        data = [];\n    if (is(TString, \"array\") && is(TString[0], \"array\")) { // rough assumption\n        data = Snap.path.clone(TString);\n    }\n    if (!data.length) {\n        Str(TString).replace(tCommand, function (a, b, c) {\n            var params = [],\n                name = b.toLowerCase();\n            c.replace(pathValues, function (a, b) {\n                b && params.push(+b);\n            });\n            data.push([b].concat(params));\n        });\n    }\n    data.toString = Snap.path.toString;\n    return data;\n};\nfunction svgTransform2string(tstr) {\n    var res = [];\n    tstr = tstr.replace(/(?:^|\\s)(\\w+)\\(([^)]+)\\)/g, function (all, name, params) {\n        params = params.split(/\\s*,\\s*|\\s+/);\n        if (name == \"rotate\" && params.length == 1) {\n            params.push(0, 0);\n        }\n        if (name == \"scale\") {\n            if (params.length > 2) {\n                params = params.slice(0, 2);\n            } else if (params.length == 2) {\n                params.push(0, 0);\n            }\n            if (params.length == 1) {\n                params.push(params[0], 0, 0);\n            }\n        }\n        if (name == \"skewX\") {\n            res.push([\"m\", 1, 0, math.tan(rad(params[0])), 1, 0, 0]);\n        } else if (name == \"skewY\") {\n            res.push([\"m\", 1, math.tan(rad(params[0])), 0, 1, 0, 0]);\n        } else {\n            res.push([name.charAt(0)].concat(params));\n        }\n        return all;\n    });\n    return res;\n}\nSnap._.svgTransform2string = svgTransform2string;\nSnap._.rgTransform = /^[a-z][\\s]*-?\\.?\\d/i;\nfunction transform2matrix(tstr, bbox) {\n    var tdata = parseTransformString(tstr),\n        m = new Snap.Matrix;\n    if (tdata) {\n        for (var i = 0, ii = tdata.length; i < ii; i++) {\n            var t = tdata[i],\n                tlen = t.length,\n                command = Str(t[0]).toLowerCase(),\n                absolute = t[0] != command,\n                inver = absolute ? m.invert() : 0,\n                x1,\n                y1,\n                x2,\n                y2,\n                bb;\n            if (command == \"t\" && tlen == 2){\n                m.translate(t[1], 0);\n            } else if (command == \"t\" && tlen == 3) {\n                if (absolute) {\n                    x1 = inver.x(0, 0);\n                    y1 = inver.y(0, 0);\n                    x2 = inver.x(t[1], t[2]);\n                    y2 = inver.y(t[1], t[2]);\n                    m.translate(x2 - x1, y2 - y1);\n                } else {\n                    m.translate(t[1], t[2]);\n                }\n            } else if (command == \"r\") {\n                if (tlen == 2) {\n                    bb = bb || bbox;\n                    m.rotate(t[1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n                } else if (tlen == 4) {\n                    if (absolute) {\n                        x2 = inver.x(t[2], t[3]);\n                        y2 = inver.y(t[2], t[3]);\n                        m.rotate(t[1], x2, y2);\n                    } else {\n                        m.rotate(t[1], t[2], t[3]);\n                    }\n                }\n            } else if (command == \"s\") {\n                if (tlen == 2 || tlen == 3) {\n                    bb = bb || bbox;\n                    m.scale(t[1], t[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n                } else if (tlen == 4) {\n                    if (absolute) {\n                        x2 = inver.x(t[2], t[3]);\n                        y2 = inver.y(t[2], t[3]);\n                        m.scale(t[1], t[1], x2, y2);\n                    } else {\n                        m.scale(t[1], t[1], t[2], t[3]);\n                    }\n                } else if (tlen == 5) {\n                    if (absolute) {\n                        x2 = inver.x(t[3], t[4]);\n                        y2 = inver.y(t[3], t[4]);\n                        m.scale(t[1], t[2], x2, y2);\n                    } else {\n                        m.scale(t[1], t[2], t[3], t[4]);\n                    }\n                }\n            } else if (command == \"m\" && tlen == 7) {\n                m.add(t[1], t[2], t[3], t[4], t[5], t[6]);\n            }\n        }\n    }\n    return m;\n}\nSnap._.transform2matrix = transform2matrix;\nSnap._unit2px = unit2px;\nvar contains = glob.doc.contains || glob.doc.compareDocumentPosition ?\n    function (a, b) {\n        var adown = a.nodeType == 9 ? a.documentElement : a,\n            bup = b && b.parentNode;\n            return a == bup || !!(bup && bup.nodeType == 1 && (\n                adown.contains ?\n                    adown.contains(bup) :\n                    a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16\n            ));\n    } :\n    function (a, b) {\n        if (b) {\n            while (b) {\n                b = b.parentNode;\n                if (b == a) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\nfunction getSomeDefs(el) {\n    var p = el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) ||\n            el.node.parentNode && wrap(el.node.parentNode) ||\n            Snap.select(\"svg\") ||\n            Snap(0, 0),\n        pdefs = p.select(\"defs\"),\n        defs  = pdefs == null ? false : pdefs.node;\n    if (!defs) {\n        defs = make(\"defs\", p.node).node;\n    }\n    return defs;\n}\nfunction getSomeSVG(el) {\n    return el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) || Snap.select(\"svg\");\n}\nSnap._.getSomeDefs = getSomeDefs;\nSnap._.getSomeSVG = getSomeSVG;\nfunction unit2px(el, name, value) {\n    var svg = getSomeSVG(el).node,\n        out = {},\n        mgr = svg.querySelector(\".svg---mgr\");\n    if (!mgr) {\n        mgr = $(\"rect\");\n        $(mgr, {x: -9e9, y: -9e9, width: 10, height: 10, \"class\": \"svg---mgr\", fill: \"none\"});\n        svg.appendChild(mgr);\n    }\n    function getW(val) {\n        if (val == null) {\n            return E;\n        }\n        if (val == +val) {\n            return val;\n        }\n        $(mgr, {width: val});\n        try {\n            return mgr.getBBox().width;\n        } catch (e) {\n            return 0;\n        }\n    }\n    function getH(val) {\n        if (val == null) {\n            return E;\n        }\n        if (val == +val) {\n            return val;\n        }\n        $(mgr, {height: val});\n        try {\n            return mgr.getBBox().height;\n        } catch (e) {\n            return 0;\n        }\n    }\n    function set(nam, f) {\n        if (name == null) {\n            out[nam] = f(el.attr(nam) || 0);\n        } else if (nam == name) {\n            out = f(value == null ? el.attr(nam) || 0 : value);\n        }\n    }\n    switch (el.type) {\n        case \"rect\":\n            set(\"rx\", getW);\n            set(\"ry\", getH);\n        case \"image\":\n            set(\"width\", getW);\n            set(\"height\", getH);\n        case \"text\":\n            set(\"x\", getW);\n            set(\"y\", getH);\n        break;\n        case \"circle\":\n            set(\"cx\", getW);\n            set(\"cy\", getH);\n            set(\"r\", getW);\n        break;\n        case \"ellipse\":\n            set(\"cx\", getW);\n            set(\"cy\", getH);\n            set(\"rx\", getW);\n            set(\"ry\", getH);\n        break;\n        case \"line\":\n            set(\"x1\", getW);\n            set(\"x2\", getW);\n            set(\"y1\", getH);\n            set(\"y2\", getH);\n        break;\n        case \"marker\":\n            set(\"refX\", getW);\n            set(\"markerWidth\", getW);\n            set(\"refY\", getH);\n            set(\"markerHeight\", getH);\n        break;\n        case \"radialGradient\":\n            set(\"fx\", getW);\n            set(\"fy\", getH);\n        break;\n        case \"tspan\":\n            set(\"dx\", getW);\n            set(\"dy\", getH);\n        break;\n        default:\n            set(name, getW);\n    }\n    svg.removeChild(mgr);\n    return out;\n}\n/*\\\n * Snap.select\n [ method ]\n **\n * Wraps a DOM element specified by CSS selector as @Element\n - query (string) CSS selector of the element\n = (Element) the current element\n\\*/\nSnap.select = function (query) {\n    query = Str(query).replace(/([^\\\\]):/g, \"$1\\\\:\");\n    return wrap(glob.doc.querySelector(query));\n};\n/*\\\n * Snap.selectAll\n [ method ]\n **\n * Wraps DOM elements specified by CSS selector as set or array of @Element\n - query (string) CSS selector of the element\n = (Element) the current element\n\\*/\nSnap.selectAll = function (query) {\n    var nodelist = glob.doc.querySelectorAll(query),\n        set = (Snap.set || Array)();\n    for (var i = 0; i < nodelist.length; i++) {\n        set.push(wrap(nodelist[i]));\n    }\n    return set;\n};\n\nfunction add2group(list) {\n    if (!is(list, \"array\")) {\n        list = Array.prototype.slice.call(arguments, 0);\n    }\n    var i = 0,\n        j = 0,\n        node = this.node;\n    while (this[i]) delete this[i++];\n    for (i = 0; i < list.length; i++) {\n        if (list[i].type == \"set\") {\n            list[i].forEach(function (el) {\n                node.appendChild(el.node);\n            });\n        } else {\n            node.appendChild(list[i].node);\n        }\n    }\n    var children = node.childNodes;\n    for (i = 0; i < children.length; i++) {\n        this[j++] = wrap(children[i]);\n    }\n    return this;\n}\n// Hub garbage collector every 10s\nsetInterval(function () {\n    for (var key in hub) if (hub[has](key)) {\n        var el = hub[key],\n            node = el.node;\n        if (el.type != \"svg\" && !node.ownerSVGElement || el.type == \"svg\" && (!node.parentNode || \"ownerSVGElement\" in node.parentNode && !node.ownerSVGElement)) {\n            delete hub[key];\n        }\n    }\n}, 1e4);\nfunction Element(el) {\n    if (el.snap in hub) {\n        return hub[el.snap];\n    }\n    var svg;\n    try {\n        svg = el.ownerSVGElement;\n    } catch(e) {}\n    /*\\\n     * Element.node\n     [ property (object) ]\n     **\n     * Gives you a reference to the DOM object, so you can assign event handlers or just mess around.\n     > Usage\n     | // draw a circle at coordinate 10,10 with radius of 10\n     | var c = paper.circle(10, 10, 10);\n     | c.node.onclick = function () {\n     |     c.attr(\"fill\", \"red\");\n     | };\n    \\*/\n    this.node = el;\n    if (svg) {\n        this.paper = new Paper(svg);\n    }\n    /*\\\n     * Element.type\n     [ property (string) ]\n     **\n     * SVG tag name of the given element.\n    \\*/\n    this.type = el.tagName || el.nodeName;\n    var id = this.id = ID(this);\n    this.anims = {};\n    this._ = {\n        transform: []\n    };\n    el.snap = id;\n    hub[id] = this;\n    if (this.type == \"g\") {\n        this.add = add2group;\n    }\n    if (this.type in {g: 1, mask: 1, pattern: 1, symbol: 1}) {\n        for (var method in Paper.prototype) if (Paper.prototype[has](method)) {\n            this[method] = Paper.prototype[method];\n        }\n    }\n}\n   /*\\\n     * Element.attr\n     [ method ]\n     **\n     * Gets or sets given attributes of the element.\n     **\n     - params (object) contains key-value pairs of attributes you want to set\n     * or\n     - param (string) name of the attribute\n     = (Element) the current element\n     * or\n     = (string) value of attribute\n     > Usage\n     | el.attr({\n     |     fill: \"#fc0\",\n     |     stroke: \"#000\",\n     |     strokeWidth: 2, // CamelCase...\n     |     \"fill-opacity\": 0.5, // or dash-separated names\n     |     width: \"*=2\" // prefixed values\n     | });\n     | console.log(el.attr(\"fill\")); // #fc0\n     * Prefixed values in format `\"+=10\"` supported. All four operations\n     * (`+`, `-`, `*` and `/`) could be used. Optionally you can use units for `+`\n     * and `-`: `\"+=2em\"`.\n    \\*/\n    Element.prototype.attr = function (params, value) {\n        var el = this,\n            node = el.node;\n        if (!params) {\n            if (node.nodeType != 1) {\n                return {\n                    text: node.nodeValue\n                };\n            }\n            var attr = node.attributes,\n                out = {};\n            for (var i = 0, ii = attr.length; i < ii; i++) {\n                out[attr[i].nodeName] = attr[i].nodeValue;\n            }\n            return out;\n        }\n        if (is(params, \"string\")) {\n            if (arguments.length > 1) {\n                var json = {};\n                json[params] = value;\n                params = json;\n            } else {\n                return eve(\"snap.util.getattr.\" + params, el).firstDefined();\n            }\n        }\n        for (var att in params) {\n            if (params[has](att)) {\n                eve(\"snap.util.attr.\" + att, el, params[att]);\n            }\n        }\n        return el;\n    };\n/*\\\n * Snap.parse\n [ method ]\n **\n * Parses SVG fragment and converts it into a @Fragment\n **\n - svg (string) SVG string\n = (Fragment) the @Fragment\n\\*/\nSnap.parse = function (svg) {\n    var f = glob.doc.createDocumentFragment(),\n        full = true,\n        div = glob.doc.createElement(\"div\");\n    svg = Str(svg);\n    if (!svg.match(/^\\s*<\\s*svg(?:\\s|>)/)) {\n        svg = \"<svg>\" + svg + \"</svg>\";\n        full = false;\n    }\n    div.innerHTML = svg;\n    svg = div.getElementsByTagName(\"svg\")[0];\n    if (svg) {\n        if (full) {\n            f = svg;\n        } else {\n            while (svg.firstChild) {\n                f.appendChild(svg.firstChild);\n            }\n        }\n    }\n    return new Fragment(f);\n};\nfunction Fragment(frag) {\n    this.node = frag;\n}\n/*\\\n * Snap.fragment\n [ method ]\n **\n * Creates a DOM fragment from a given list of elements or strings\n **\n - varargs (…) SVG string\n = (Fragment) the @Fragment\n\\*/\nSnap.fragment = function () {\n    var args = Array.prototype.slice.call(arguments, 0),\n        f = glob.doc.createDocumentFragment();\n    for (var i = 0, ii = args.length; i < ii; i++) {\n        var item = args[i];\n        if (item.node && item.node.nodeType) {\n            f.appendChild(item.node);\n        }\n        if (item.nodeType) {\n            f.appendChild(item);\n        }\n        if (typeof item == \"string\") {\n            f.appendChild(Snap.parse(item).node);\n        }\n    }\n    return new Fragment(f);\n};\n\nfunction make(name, parent) {\n    var res = $(name);\n    parent.appendChild(res);\n    var el = wrap(res);\n    return el;\n}\nfunction Paper(w, h) {\n    var res,\n        desc,\n        defs,\n        proto = Paper.prototype;\n    if (w && w.tagName && w.tagName.toLowerCase() == \"svg\") {\n        if (w.snap in hub) {\n            return hub[w.snap];\n        }\n        var doc = w.ownerDocument;\n        res = new Element(w);\n        desc = w.getElementsByTagName(\"desc\")[0];\n        defs = w.getElementsByTagName(\"defs\")[0];\n        if (!desc) {\n            desc = $(\"desc\");\n            desc.appendChild(doc.createTextNode(\"Created with Snap\"));\n            res.node.appendChild(desc);\n        }\n        if (!defs) {\n            defs = $(\"defs\");\n            res.node.appendChild(defs);\n        }\n        res.defs = defs;\n        for (var key in proto) if (proto[has](key)) {\n            res[key] = proto[key];\n        }\n        res.paper = res.root = res;\n    } else {\n        res = make(\"svg\", glob.doc.body);\n        $(res.node, {\n            height: h,\n            version: 1.1,\n            width: w,\n            xmlns: xmlns\n        });\n    }\n    return res;\n}\nfunction wrap(dom) {\n    if (!dom) {\n        return dom;\n    }\n    if (dom instanceof Element || dom instanceof Fragment) {\n        return dom;\n    }\n    if (dom.tagName && dom.tagName.toLowerCase() == \"svg\") {\n        return new Paper(dom);\n    }\n    if (dom.tagName && dom.tagName.toLowerCase() == \"object\" && dom.type == \"image/svg+xml\") {\n        return new Paper(dom.contentDocument.getElementsByTagName(\"svg\")[0]);\n    }\n    return new Element(dom);\n}\n\nSnap._.make = make;\nSnap._.wrap = wrap;\n/*\\\n * Paper.el\n [ method ]\n **\n * Creates an element on paper with a given name and no attributes\n **\n - name (string) tag name\n - attr (object) attributes\n = (Element) the current element\n > Usage\n | var c = paper.circle(10, 10, 10); // is the same as...\n | var c = paper.el(\"circle\").attr({\n |     cx: 10,\n |     cy: 10,\n |     r: 10\n | });\n | // and the same as\n | var c = paper.el(\"circle\", {\n |     cx: 10,\n |     cy: 10,\n |     r: 10\n | });\n\\*/\nPaper.prototype.el = function (name, attr) {\n    var el = make(name, this.node);\n    attr && el.attr(attr);\n    return el;\n};\n/*\\\n * Element.children\n [ method ]\n **\n * Returns array of all the children of the element.\n = (array) array of Elements\n\\*/\nElement.prototype.children = function () {\n    var out = [],\n        ch = this.node.childNodes;\n    for (var i = 0, ii = ch.length; i < ii; i++) {\n        out[i] = Snap(ch[i]);\n    }\n    return out;\n};\nfunction jsonFiller(root, o) {\n    for (var i = 0, ii = root.length; i < ii; i++) {\n        var item = {\n                type: root[i].type,\n                attr: root[i].attr()\n            },\n            children = root[i].children();\n        o.push(item);\n        if (children.length) {\n            jsonFiller(children, item.childNodes = []);\n        }\n    }\n}\n/*\\\n * Element.toJSON\n [ method ]\n **\n * Returns object representation of the given element and all its children.\n = (object) in format\n o {\n o     type (string) this.type,\n o     attr (object) attributes map,\n o     childNodes (array) optional array of children in the same format\n o }\n\\*/\nElement.prototype.toJSON = function () {\n    var out = [];\n    jsonFiller([this], out);\n    return out[0];\n};\n// default\neve.on(\"snap.util.getattr\", function () {\n    var att = eve.nt();\n    att = att.substring(att.lastIndexOf(\".\") + 1);\n    var css = att.replace(/[A-Z]/g, function (letter) {\n        return \"-\" + letter.toLowerCase();\n    });\n    if (cssAttr[has](css)) {\n        return this.node.ownerDocument.defaultView.getComputedStyle(this.node, null).getPropertyValue(css);\n    } else {\n        return $(this.node, att);\n    }\n});\nvar cssAttr = {\n    \"alignment-baseline\": 0,\n    \"baseline-shift\": 0,\n    \"clip\": 0,\n    \"clip-path\": 0,\n    \"clip-rule\": 0,\n    \"color\": 0,\n    \"color-interpolation\": 0,\n    \"color-interpolation-filters\": 0,\n    \"color-profile\": 0,\n    \"color-rendering\": 0,\n    \"cursor\": 0,\n    \"direction\": 0,\n    \"display\": 0,\n    \"dominant-baseline\": 0,\n    \"enable-background\": 0,\n    \"fill\": 0,\n    \"fill-opacity\": 0,\n    \"fill-rule\": 0,\n    \"filter\": 0,\n    \"flood-color\": 0,\n    \"flood-opacity\": 0,\n    \"font\": 0,\n    \"font-family\": 0,\n    \"font-size\": 0,\n    \"font-size-adjust\": 0,\n    \"font-stretch\": 0,\n    \"font-style\": 0,\n    \"font-variant\": 0,\n    \"font-weight\": 0,\n    \"glyph-orientation-horizontal\": 0,\n    \"glyph-orientation-vertical\": 0,\n    \"image-rendering\": 0,\n    \"kerning\": 0,\n    \"letter-spacing\": 0,\n    \"lighting-color\": 0,\n    \"marker\": 0,\n    \"marker-end\": 0,\n    \"marker-mid\": 0,\n    \"marker-start\": 0,\n    \"mask\": 0,\n    \"opacity\": 0,\n    \"overflow\": 0,\n    \"pointer-events\": 0,\n    \"shape-rendering\": 0,\n    \"stop-color\": 0,\n    \"stop-opacity\": 0,\n    \"stroke\": 0,\n    \"stroke-dasharray\": 0,\n    \"stroke-dashoffset\": 0,\n    \"stroke-linecap\": 0,\n    \"stroke-linejoin\": 0,\n    \"stroke-miterlimit\": 0,\n    \"stroke-opacity\": 0,\n    \"stroke-width\": 0,\n    \"text-anchor\": 0,\n    \"text-decoration\": 0,\n    \"text-rendering\": 0,\n    \"unicode-bidi\": 0,\n    \"visibility\": 0,\n    \"word-spacing\": 0,\n    \"writing-mode\": 0\n};\n\neve.on(\"snap.util.attr\", function (value) {\n    var att = eve.nt(),\n        attr = {};\n    att = att.substring(att.lastIndexOf(\".\") + 1);\n    attr[att] = value;\n    var style = att.replace(/-(\\w)/gi, function (all, letter) {\n            return letter.toUpperCase();\n        }),\n        css = att.replace(/[A-Z]/g, function (letter) {\n            return \"-\" + letter.toLowerCase();\n        });\n    if (cssAttr[has](css)) {\n        this.node.style[style] = value == null ? E : value;\n    } else {\n        $(this.node, attr);\n    }\n});\n(function (proto) {}(Paper.prototype));\n\n// simple ajax\n/*\\\n * Snap.ajax\n [ method ]\n **\n * Simple implementation of Ajax\n **\n - url (string) URL\n - postData (object|string) data for post request\n - callback (function) callback\n - scope (object) #optional scope of callback\n * or\n - url (string) URL\n - callback (function) callback\n - scope (object) #optional scope of callback\n = (XMLHttpRequest) the XMLHttpRequest object, just in case\n\\*/\nSnap.ajax = function (url, postData, callback, scope){\n    var req = new XMLHttpRequest,\n        id = ID();\n    if (req) {\n        if (is(postData, \"function\")) {\n            scope = callback;\n            callback = postData;\n            postData = null;\n        } else if (is(postData, \"object\")) {\n            var pd = [];\n            for (var key in postData) if (postData.hasOwnProperty(key)) {\n                pd.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(postData[key]));\n            }\n            postData = pd.join(\"&\");\n        }\n        req.open(postData ? \"POST\" : \"GET\", url, true);\n        if (postData) {\n            req.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n            req.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n        }\n        if (callback) {\n            eve.once(\"snap.ajax.\" + id + \".0\", callback);\n            eve.once(\"snap.ajax.\" + id + \".200\", callback);\n            eve.once(\"snap.ajax.\" + id + \".304\", callback);\n        }\n        req.onreadystatechange = function() {\n            if (req.readyState != 4) return;\n            eve(\"snap.ajax.\" + id + \".\" + req.status, scope, req);\n        };\n        if (req.readyState == 4) {\n            return req;\n        }\n        req.send(postData);\n        return req;\n    }\n};\n/*\\\n * Snap.load\n [ method ]\n **\n * Loads external SVG file as a @Fragment (see @Snap.ajax for more advanced AJAX)\n **\n - url (string) URL\n - callback (function) callback\n - scope (object) #optional scope of callback\n\\*/\nSnap.load = function (url, callback, scope) {\n    Snap.ajax(url, function (req) {\n        var f = Snap.parse(req.responseText);\n        scope ? callback.call(scope, f) : callback(f);\n    });\n};\nvar getOffset = function (elem) {\n    var box = elem.getBoundingClientRect(),\n        doc = elem.ownerDocument,\n        body = doc.body,\n        docElem = doc.documentElement,\n        clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0,\n        top  = box.top  + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop ) - clientTop,\n        left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;\n    return {\n        y: top,\n        x: left\n    };\n};\n/*\\\n * Snap.getElementByPoint\n [ method ]\n **\n * Returns you topmost element under given point.\n **\n = (object) Snap element object\n - x (number) x coordinate from the top left corner of the window\n - y (number) y coordinate from the top left corner of the window\n > Usage\n | Snap.getElementByPoint(mouseX, mouseY).attr({stroke: \"#f00\"});\n\\*/\nSnap.getElementByPoint = function (x, y) {\n    var paper = this,\n        svg = paper.canvas,\n        target = glob.doc.elementFromPoint(x, y);\n    if (glob.win.opera && target.tagName == \"svg\") {\n        var so = getOffset(target),\n            sr = target.createSVGRect();\n        sr.x = x - so.x;\n        sr.y = y - so.y;\n        sr.width = sr.height = 1;\n        var hits = target.getIntersectionList(sr, null);\n        if (hits.length) {\n            target = hits[hits.length - 1];\n        }\n    }\n    if (!target) {\n        return null;\n    }\n    return wrap(target);\n};\n/*\\\n * Snap.plugin\n [ method ]\n **\n * Let you write plugins. You pass in a function with five arguments, like this:\n | Snap.plugin(function (Snap, Element, Paper, global, Fragment) {\n |     Snap.newmethod = function () {};\n |     Element.prototype.newmethod = function () {};\n |     Paper.prototype.newmethod = function () {};\n | });\n * Inside the function you have access to all main objects (and their\n * prototypes). This allow you to extend anything you want.\n **\n - f (function) your plugin body\n\\*/\nSnap.plugin = function (f) {\n    f(Snap, Element, Paper, glob, Fragment);\n};\nglob.win.Snap = Snap;\nreturn Snap;\n}(window || this));\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        Str = String,\n        unit2px = Snap._unit2px,\n        $ = Snap._.$,\n        make = Snap._.make,\n        getSomeDefs = Snap._.getSomeDefs,\n        has = \"hasOwnProperty\",\n        wrap = Snap._.wrap;\n    /*\\\n     * Element.getBBox\n     [ method ]\n     **\n     * Returns the bounding box descriptor for the given element\n     **\n     = (object) bounding box descriptor:\n     o {\n     o     cx: (number) x of the center,\n     o     cy: (number) x of the center,\n     o     h: (number) height,\n     o     height: (number) height,\n     o     path: (string) path command for the box,\n     o     r0: (number) radius of a circle that fully encloses the box,\n     o     r1: (number) radius of the smallest circle that can be enclosed,\n     o     r2: (number) radius of the largest circle that can be enclosed,\n     o     vb: (string) box as a viewbox command,\n     o     w: (number) width,\n     o     width: (number) width,\n     o     x2: (number) x of the right side,\n     o     x: (number) x of the left side,\n     o     y2: (number) y of the bottom edge,\n     o     y: (number) y of the top edge\n     o }\n    \\*/\n    elproto.getBBox = function (isWithoutTransform) {\n        if (this.type == \"tspan\") {\n            return Snap._.box(this.node.getClientRects().item(0));\n        }\n        if (!Snap.Matrix || !Snap.path) {\n            return this.node.getBBox();\n        }\n        var el = this,\n            m = new Snap.Matrix;\n        if (el.removed) {\n            return Snap._.box();\n        }\n        while (el.type == \"use\") {\n            if (!isWithoutTransform) {\n                m = m.add(el.transform().localMatrix.translate(el.attr(\"x\") || 0, el.attr(\"y\") || 0));\n            }\n            if (el.original) {\n                el = el.original;\n            } else {\n                var href = el.attr(\"xlink:href\");\n                el = el.original = el.node.ownerDocument.getElementById(href.substring(href.indexOf(\"#\") + 1));\n            }\n        }\n        var _ = el._,\n            pathfinder = Snap.path.get[el.type] || Snap.path.get.deflt;\n        try {\n            if (isWithoutTransform) {\n                _.bboxwt = pathfinder ? Snap.path.getBBox(el.realPath = pathfinder(el)) : Snap._.box(el.node.getBBox());\n                return Snap._.box(_.bboxwt);\n            } else {\n                el.realPath = pathfinder(el);\n                el.matrix = el.transform().localMatrix;\n                _.bbox = Snap.path.getBBox(Snap.path.map(el.realPath, m.add(el.matrix)));\n                return Snap._.box(_.bbox);\n            }\n        } catch (e) {\n            // Firefox doesn’t give you bbox of hidden element\n            return Snap._.box();\n        }\n    };\n    var propString = function () {\n        return this.string;\n    };\n    function extractTransform(el, tstr) {\n        if (tstr == null) {\n            var doReturn = true;\n            if (el.type == \"linearGradient\" || el.type == \"radialGradient\") {\n                tstr = el.node.getAttribute(\"gradientTransform\");\n            } else if (el.type == \"pattern\") {\n                tstr = el.node.getAttribute(\"patternTransform\");\n            } else {\n                tstr = el.node.getAttribute(\"transform\");\n            }\n            if (!tstr) {\n                return new Snap.Matrix;\n            }\n            tstr = Snap._.svgTransform2string(tstr);\n        } else {\n            if (!Snap._.rgTransform.test(tstr)) {\n                tstr = Snap._.svgTransform2string(tstr);\n            } else {\n                tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, el._.transform || \"\");\n            }\n            if (is(tstr, \"array\")) {\n                tstr = Snap.path ? Snap.path.toString.call(tstr) : Str(tstr);\n            }\n            el._.transform = tstr;\n        }\n        var m = Snap._.transform2matrix(tstr, el.getBBox(1));\n        if (doReturn) {\n            return m;\n        } else {\n            el.matrix = m;\n        }\n    }\n    /*\\\n     * Element.transform\n     [ method ]\n     **\n     * Gets or sets transformation of the element\n     **\n     - tstr (string) transform string in Snap or SVG format\n     = (Element) the current element\n     * or\n     = (object) transformation descriptor:\n     o {\n     o     string (string) transform string,\n     o     globalMatrix (Matrix) matrix of all transformations applied to element or its parents,\n     o     localMatrix (Matrix) matrix of transformations applied only to the element,\n     o     diffMatrix (Matrix) matrix of difference between global and local transformations,\n     o     global (string) global transformation as string,\n     o     local (string) local transformation as string,\n     o     toString (function) returns `string` property\n     o }\n    \\*/\n    elproto.transform = function (tstr) {\n        var _ = this._;\n        if (tstr == null) {\n            var papa = this,\n                global = new Snap.Matrix(this.node.getCTM()),\n                local = extractTransform(this),\n                ms = [local],\n                m = new Snap.Matrix,\n                i,\n                localString = local.toTransformString(),\n                string = Str(local) == Str(this.matrix) ?\n                            Str(_.transform) : localString;\n            while (papa.type != \"svg\" && (papa = papa.parent())) {\n                ms.push(extractTransform(papa));\n            }\n            i = ms.length;\n            while (i--) {\n                m.add(ms[i]);\n            }\n            return {\n                string: string,\n                globalMatrix: global,\n                totalMatrix: m,\n                localMatrix: local,\n                diffMatrix: global.clone().add(local.invert()),\n                global: global.toTransformString(),\n                total: m.toTransformString(),\n                local: localString,\n                toString: propString\n            };\n        }\n        if (tstr instanceof Snap.Matrix) {\n            this.matrix = tstr;\n            this._.transform = tstr.toTransformString();\n        } else {\n            extractTransform(this, tstr);\n        }\n\n        if (this.node) {\n            if (this.type == \"linearGradient\" || this.type == \"radialGradient\") {\n                $(this.node, {gradientTransform: this.matrix});\n            } else if (this.type == \"pattern\") {\n                $(this.node, {patternTransform: this.matrix});\n            } else {\n                $(this.node, {transform: this.matrix});\n            }\n        }\n\n        return this;\n    };\n    /*\\\n     * Element.parent\n     [ method ]\n     **\n     * Returns the element's parent\n     **\n     = (Element) the parent element\n    \\*/\n    elproto.parent = function () {\n        return wrap(this.node.parentNode);\n    };\n    /*\\\n     * Element.append\n     [ method ]\n     **\n     * Appends the given element to current one\n     **\n     - el (Element|Set) element to append\n     = (Element) the parent element\n    \\*/\n    /*\\\n     * Element.add\n     [ method ]\n     **\n     * See @Element.append\n    \\*/\n    elproto.append = elproto.add = function (el) {\n        if (el) {\n            if (el.type == \"set\") {\n                var it = this;\n                el.forEach(function (el) {\n                    it.add(el);\n                });\n                return this;\n            }\n            el = wrap(el);\n            this.node.appendChild(el.node);\n            el.paper = this.paper;\n        }\n        return this;\n    };\n    /*\\\n     * Element.appendTo\n     [ method ]\n     **\n     * Appends the current element to the given one\n     **\n     - el (Element) parent element to append to\n     = (Element) the child element\n    \\*/\n    elproto.appendTo = function (el) {\n        if (el) {\n            el = wrap(el);\n            el.append(this);\n        }\n        return this;\n    };\n    /*\\\n     * Element.prepend\n     [ method ]\n     **\n     * Prepends the given element to the current one\n     **\n     - el (Element) element to prepend\n     = (Element) the parent element\n    \\*/\n    elproto.prepend = function (el) {\n        if (el) {\n            if (el.type == \"set\") {\n                var it = this,\n                    first;\n                el.forEach(function (el) {\n                    if (first) {\n                        first.after(el);\n                    } else {\n                        it.prepend(el);\n                    }\n                    first = el;\n                });\n                return this;\n            }\n            el = wrap(el);\n            var parent = el.parent();\n            this.node.insertBefore(el.node, this.node.firstChild);\n            this.add && this.add();\n            el.paper = this.paper;\n            this.parent() && this.parent().add();\n            parent && parent.add();\n        }\n        return this;\n    };\n    /*\\\n     * Element.prependTo\n     [ method ]\n     **\n     * Prepends the current element to the given one\n     **\n     - el (Element) parent element to prepend to\n     = (Element) the child element\n    \\*/\n    elproto.prependTo = function (el) {\n        el = wrap(el);\n        el.prepend(this);\n        return this;\n    };\n    /*\\\n     * Element.before\n     [ method ]\n     **\n     * Inserts given element before the current one\n     **\n     - el (Element) element to insert\n     = (Element) the parent element\n    \\*/\n    elproto.before = function (el) {\n        if (el.type == \"set\") {\n            var it = this;\n            el.forEach(function (el) {\n                var parent = el.parent();\n                it.node.parentNode.insertBefore(el.node, it.node);\n                parent && parent.add();\n            });\n            this.parent().add();\n            return this;\n        }\n        el = wrap(el);\n        var parent = el.parent();\n        this.node.parentNode.insertBefore(el.node, this.node);\n        this.parent() && this.parent().add();\n        parent && parent.add();\n        el.paper = this.paper;\n        return this;\n    };\n    /*\\\n     * Element.after\n     [ method ]\n     **\n     * Inserts given element after the current one\n     **\n     - el (Element) element to insert\n     = (Element) the parent element\n    \\*/\n    elproto.after = function (el) {\n        el = wrap(el);\n        var parent = el.parent();\n        if (this.node.nextSibling) {\n            this.node.parentNode.insertBefore(el.node, this.node.nextSibling);\n        } else {\n            this.node.parentNode.appendChild(el.node);\n        }\n        this.parent() && this.parent().add();\n        parent && parent.add();\n        el.paper = this.paper;\n        return this;\n    };\n    /*\\\n     * Element.insertBefore\n     [ method ]\n     **\n     * Inserts the element after the given one\n     **\n     - el (Element) element next to whom insert to\n     = (Element) the parent element\n    \\*/\n    elproto.insertBefore = function (el) {\n        el = wrap(el);\n        var parent = this.parent();\n        el.node.parentNode.insertBefore(this.node, el.node);\n        this.paper = el.paper;\n        parent && parent.add();\n        el.parent() && el.parent().add();\n        return this;\n    };\n    /*\\\n     * Element.insertAfter\n     [ method ]\n     **\n     * Inserts the element after the given one\n     **\n     - el (Element) element next to whom insert to\n     = (Element) the parent element\n    \\*/\n    elproto.insertAfter = function (el) {\n        el = wrap(el);\n        var parent = this.parent();\n        el.node.parentNode.insertBefore(this.node, el.node.nextSibling);\n        this.paper = el.paper;\n        parent && parent.add();\n        el.parent() && el.parent().add();\n        return this;\n    };\n    /*\\\n     * Element.remove\n     [ method ]\n     **\n     * Removes element from the DOM\n     = (Element) the detached element\n    \\*/\n    elproto.remove = function () {\n        var parent = this.parent();\n        this.node.parentNode && this.node.parentNode.removeChild(this.node);\n        delete this.paper;\n        this.removed = true;\n        parent && parent.add();\n        return this;\n    };\n    /*\\\n     * Element.select\n     [ method ]\n     **\n     * Gathers the nested @Element matching the given set of CSS selectors\n     **\n     - query (string) CSS selector\n     = (Element) result of query selection\n    \\*/\n    elproto.select = function (query) {\n        return wrap(this.node.querySelector(query));\n    };\n    /*\\\n     * Element.selectAll\n     [ method ]\n     **\n     * Gathers nested @Element objects matching the given set of CSS selectors\n     **\n     - query (string) CSS selector\n     = (Set|array) result of query selection\n    \\*/\n    elproto.selectAll = function (query) {\n        var nodelist = this.node.querySelectorAll(query),\n            set = (Snap.set || Array)();\n        for (var i = 0; i < nodelist.length; i++) {\n            set.push(wrap(nodelist[i]));\n        }\n        return set;\n    };\n    /*\\\n     * Element.asPX\n     [ method ]\n     **\n     * Returns given attribute of the element as a `px` value (not %, em, etc.)\n     **\n     - attr (string) attribute name\n     - value (string) #optional attribute value\n     = (Element) result of query selection\n    \\*/\n    elproto.asPX = function (attr, value) {\n        if (value == null) {\n            value = this.attr(attr);\n        }\n        return +unit2px(this, attr, value);\n    };\n    // SIERRA Element.use(): I suggest adding a note about how to access the original element the returned <use> instantiates. It's a part of SVG with which ordinary web developers may be least familiar.\n    /*\\\n     * Element.use\n     [ method ]\n     **\n     * Creates a `<use>` element linked to the current element\n     **\n     = (Element) the `<use>` element\n    \\*/\n    elproto.use = function () {\n        var use,\n            id = this.node.id;\n        if (!id) {\n            id = this.id;\n            $(this.node, {\n                id: id\n            });\n        }\n        if (this.type == \"linearGradient\" || this.type == \"radialGradient\" ||\n            this.type == \"pattern\") {\n            use = make(this.type, this.node.parentNode);\n        } else {\n            use = make(\"use\", this.node.parentNode);\n        }\n        $(use.node, {\n            \"xlink:href\": \"#\" + id\n        });\n        use.original = this;\n        return use;\n    };\n    function fixids(el) {\n        var els = el.selectAll(\"*\"),\n            it,\n            url = /^\\s*url\\((\"|'|)(.*)\\1\\)\\s*$/,\n            ids = [],\n            uses = {};\n        function urltest(it, name) {\n            var val = $(it.node, name);\n            val = val && val.match(url);\n            val = val && val[2];\n            if (val && val.charAt() == \"#\") {\n                val = val.substring(1);\n            } else {\n                return;\n            }\n            if (val) {\n                uses[val] = (uses[val] || []).concat(function (id) {\n                    var attr = {};\n                    attr[name] = Snap.url(id);\n                    $(it.node, attr);\n                });\n            }\n        }\n        function linktest(it) {\n            var val = $(it.node, \"xlink:href\");\n            if (val && val.charAt() == \"#\") {\n                val = val.substring(1);\n            } else {\n                return;\n            }\n            if (val) {\n                uses[val] = (uses[val] || []).concat(function (id) {\n                    it.attr(\"xlink:href\", \"#\" + id);\n                });\n            }\n        }\n        for (var i = 0, ii = els.length; i < ii; i++) {\n            it = els[i];\n            urltest(it, \"fill\");\n            urltest(it, \"stroke\");\n            urltest(it, \"filter\");\n            urltest(it, \"mask\");\n            urltest(it, \"clip-path\");\n            linktest(it);\n            var oldid = $(it.node, \"id\");\n            if (oldid) {\n                $(it.node, {id: it.id});\n                ids.push({\n                    old: oldid,\n                    id: it.id\n                });\n            }\n        }\n        for (i = 0, ii = ids.length; i < ii; i++) {\n            var fs = uses[ids[i].old];\n            if (fs) {\n                for (var j = 0, jj = fs.length; j < jj; j++) {\n                    fs[j](ids[i].id);\n                }\n            }\n        }\n    }\n    /*\\\n     * Element.clone\n     [ method ]\n     **\n     * Creates a clone of the element and inserts it after the element\n     **\n     = (Element) the clone\n    \\*/\n    elproto.clone = function () {\n        var clone = wrap(this.node.cloneNode(true));\n        if ($(clone.node, \"id\")) {\n            $(clone.node, {id: clone.id});\n        }\n        fixids(clone);\n        clone.insertAfter(this);\n        return clone;\n    };\n    /*\\\n     * Element.toDefs\n     [ method ]\n     **\n     * Moves element to the shared `<defs>` area\n     **\n     = (Element) the element\n    \\*/\n    elproto.toDefs = function () {\n        var defs = getSomeDefs(this);\n        defs.appendChild(this.node);\n        return this;\n    };\n    /*\\\n     * Element.toPattern\n     [ method ]\n     **\n     * Creates a `<pattern>` element from the current element\n     **\n     * To create a pattern you have to specify the pattern rect:\n     - x (string|number)\n     - y (string|number)\n     - width (string|number)\n     - height (string|number)\n     = (Element) the `<pattern>` element\n     * You can use pattern later on as an argument for `fill` attribute:\n     | var p = paper.path(\"M10-5-10,15M15,0,0,15M0-5-20,15\").attr({\n     |         fill: \"none\",\n     |         stroke: \"#bada55\",\n     |         strokeWidth: 5\n     |     }).pattern(0, 0, 10, 10),\n     |     c = paper.circle(200, 200, 100);\n     | c.attr({\n     |     fill: p\n     | });\n    \\*/\n    elproto.pattern = elproto.toPattern = function (x, y, width, height) {\n        var p = make(\"pattern\", getSomeDefs(this));\n        if (x == null) {\n            x = this.getBBox();\n        }\n        if (is(x, \"object\") && \"x\" in x) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            x = x.x;\n        }\n        $(p.node, {\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n            patternUnits: \"userSpaceOnUse\",\n            id: p.id,\n            viewBox: [x, y, width, height].join(\" \")\n        });\n        p.node.appendChild(this.node);\n        return p;\n    };\n// SIERRA Element.marker(): clarify what a reference point is. E.g., helps you offset the object from its edge such as when centering it over a path.\n// SIERRA Element.marker(): I suggest the method should accept default reference point values.  Perhaps centered with (refX = width/2) and (refY = height/2)? Also, couldn't it assume the element's current _width_ and _height_? And please specify what _x_ and _y_ mean: offsets? If so, from where?  Couldn't they also be assigned default values?\n    /*\\\n     * Element.marker\n     [ method ]\n     **\n     * Creates a `<marker>` element from the current element\n     **\n     * To create a marker you have to specify the bounding rect and reference point:\n     - x (number)\n     - y (number)\n     - width (number)\n     - height (number)\n     - refX (number)\n     - refY (number)\n     = (Element) the `<marker>` element\n     * You can specify the marker later as an argument for `marker-start`, `marker-end`, `marker-mid`, and `marker` attributes. The `marker` attribute places the marker at every point along the path, and `marker-mid` places them at every point except the start and end.\n    \\*/\n    // TODO add usage for markers\n    elproto.marker = function (x, y, width, height, refX, refY) {\n        var p = make(\"marker\", getSomeDefs(this));\n        if (x == null) {\n            x = this.getBBox();\n        }\n        if (is(x, \"object\") && \"x\" in x) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            refX = x.refX || x.cx;\n            refY = x.refY || x.cy;\n            x = x.x;\n        }\n        $(p.node, {\n            viewBox: [x, y, width, height].join(\" \"),\n            markerWidth: width,\n            markerHeight: height,\n            orient: \"auto\",\n            refX: refX || 0,\n            refY: refY || 0,\n            id: p.id\n        });\n        p.node.appendChild(this.node);\n        return p;\n    };\n    var eldata = {};\n    /*\\\n     * Element.data\n     [ method ]\n     **\n     * Adds or retrieves given value associated with given key. (Don’t confuse\n     * with `data-` attributes)\n     *\n     * See also @Element.removeData\n     - key (string) key to store data\n     - value (any) #optional value to store\n     = (object) @Element\n     * or, if value is not specified:\n     = (any) value\n     > Usage\n     | for (var i = 0, i < 5, i++) {\n     |     paper.circle(10 + 15 * i, 10, 10)\n     |          .attr({fill: \"#000\"})\n     |          .data(\"i\", i)\n     |          .click(function () {\n     |             alert(this.data(\"i\"));\n     |          });\n     | }\n    \\*/\n    elproto.data = function (key, value) {\n        var data = eldata[this.id] = eldata[this.id] || {};\n        if (arguments.length == 0){\n            eve(\"snap.data.get.\" + this.id, this, data, null);\n            return data;\n        }\n        if (arguments.length == 1) {\n            if (Snap.is(key, \"object\")) {\n                for (var i in key) if (key[has](i)) {\n                    this.data(i, key[i]);\n                }\n                return this;\n            }\n            eve(\"snap.data.get.\" + this.id, this, data[key], key);\n            return data[key];\n        }\n        data[key] = value;\n        eve(\"snap.data.set.\" + this.id, this, value, key);\n        return this;\n    };\n    /*\\\n     * Element.removeData\n     [ method ]\n     **\n     * Removes value associated with an element by given key.\n     * If key is not provided, removes all the data of the element.\n     - key (string) #optional key\n     = (object) @Element\n    \\*/\n    elproto.removeData = function (key) {\n        if (key == null) {\n            eldata[this.id] = {};\n        } else {\n            eldata[this.id] && delete eldata[this.id][key];\n        }\n        return this;\n    };\n    /*\\\n     * Element.outerSVG\n     [ method ]\n     **\n     * Returns SVG code for the element, equivalent to HTML's `outerHTML`.\n     *\n     * See also @Element.innerSVG\n     = (string) SVG code for the element\n    \\*/\n    /*\\\n     * Element.toString\n     [ method ]\n     **\n     * See @Element.outerSVG\n    \\*/\n    elproto.outerSVG = elproto.toString = toString(1);\n    /*\\\n     * Element.innerSVG\n     [ method ]\n     **\n     * Returns SVG code for the element's contents, equivalent to HTML's `innerHTML`\n     = (string) SVG code for the element\n    \\*/\n    elproto.innerSVG = toString();\n    function toString(type) {\n        return function () {\n            var res = type ? \"<\" + this.type : \"\",\n                attr = this.node.attributes,\n                chld = this.node.childNodes;\n            if (type) {\n                for (var i = 0, ii = attr.length; i < ii; i++) {\n                    res += \" \" + attr[i].name + '=\"' +\n                            attr[i].value.replace(/\"/g, '\\\\\"') + '\"';\n                }\n            }\n            if (chld.length) {\n                type && (res += \">\");\n                for (i = 0, ii = chld.length; i < ii; i++) {\n                    if (chld[i].nodeType == 3) {\n                        res += chld[i].nodeValue;\n                    } else if (chld[i].nodeType == 1) {\n                        res += wrap(chld[i]).toString();\n                    }\n                }\n                type && (res += \"</\" + this.type + \">\");\n            } else {\n                type && (res += \"/>\");\n            }\n            return res;\n        };\n    }\n    elproto.toDataURL = function () {\n        if (window && window.btoa) {\n            var bb = this.getBBox(),\n                svg = Snap.format('<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"{width}\" height=\"{height}\" viewBox=\"{x} {y} {width} {height}\">{contents}</svg>', {\n                x: +bb.x.toFixed(3),\n                y: +bb.y.toFixed(3),\n                width: +bb.width.toFixed(3),\n                height: +bb.height.toFixed(3),\n                contents: this.outerSVG()\n            });\n            return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(svg)));\n        }\n    };\n    /*\\\n     * Fragment.select\n     [ method ]\n     **\n     * See @Element.select\n    \\*/\n    Fragment.prototype.select = elproto.select;\n    /*\\\n     * Fragment.selectAll\n     [ method ]\n     **\n     * See @Element.selectAll\n    \\*/\n    Fragment.prototype.selectAll = elproto.selectAll;\n});\n\n// Copyright (c) 2016 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        Str = String,\n        has = \"hasOwnProperty\";\n    function slice(from, to, f) {\n        return function (arr) {\n            var res = arr.slice(from, to);\n            if (res.length == 1) {\n                res = res[0];\n            }\n            return f ? f(res) : res;\n        };\n    }\n    var Animation = function (attr, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        this.attr = attr;\n        this.dur = ms;\n        easing && (this.easing = easing);\n        callback && (this.callback = callback);\n    };\n    Snap._.Animation = Animation;\n    /*\\\n     * Snap.animation\n     [ method ]\n     **\n     * Creates an animation object\n     **\n     - attr (object) attributes of final destination\n     - duration (number) duration of the animation, in milliseconds\n     - easing (function) #optional one of easing functions of @mina or custom one\n     - callback (function) #optional callback function that fires when animation ends\n     = (object) animation object\n    \\*/\n    Snap.animation = function (attr, ms, easing, callback) {\n        return new Animation(attr, ms, easing, callback);\n    };\n    /*\\\n     * Element.inAnim\n     [ method ]\n     **\n     * Returns a set of animations that may be able to manipulate the current element\n     **\n     = (object) in format:\n     o {\n     o     anim (object) animation object,\n     o     mina (object) @mina object,\n     o     curStatus (number) 0..1 — status of the animation: 0 — just started, 1 — just finished,\n     o     status (function) gets or sets the status of the animation,\n     o     stop (function) stops the animation\n     o }\n    \\*/\n    elproto.inAnim = function () {\n        var el = this,\n            res = [];\n        for (var id in el.anims) if (el.anims[has](id)) {\n            (function (a) {\n                res.push({\n                    anim: new Animation(a._attrs, a.dur, a.easing, a._callback),\n                    mina: a,\n                    curStatus: a.status(),\n                    status: function (val) {\n                        return a.status(val);\n                    },\n                    stop: function () {\n                        a.stop();\n                    }\n                });\n            }(el.anims[id]));\n        }\n        return res;\n    };\n    /*\\\n     * Snap.animate\n     [ method ]\n     **\n     * Runs generic animation of one number into another with a caring function\n     **\n     - from (number|array) number or array of numbers\n     - to (number|array) number or array of numbers\n     - setter (function) caring function that accepts one number argument\n     - duration (number) duration, in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function to execute when animation ends\n     = (object) animation object in @mina format\n     o {\n     o     id (string) animation id, consider it read-only,\n     o     duration (function) gets or sets the duration of the animation,\n     o     easing (function) easing,\n     o     speed (function) gets or sets the speed of the animation,\n     o     status (function) gets or sets the status of the animation,\n     o     stop (function) stops the animation\n     o }\n     | var rect = Snap().rect(0, 0, 10, 10);\n     | Snap.animate(0, 10, function (val) {\n     |     rect.attr({\n     |         x: val\n     |     });\n     | }, 1000);\n     | // in given context is equivalent to\n     | rect.animate({x: 10}, 1000);\n    \\*/\n    Snap.animate = function (from, to, setter, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        var now = mina.time(),\n            anim = mina(from, to, now, now + ms, mina.time, setter, easing);\n        callback && eve.once(\"mina.finish.\" + anim.id, callback);\n        return anim;\n    };\n    /*\\\n     * Element.stop\n     [ method ]\n     **\n     * Stops all the animations for the current element\n     **\n     = (Element) the current element\n    \\*/\n    elproto.stop = function () {\n        var anims = this.inAnim();\n        for (var i = 0, ii = anims.length; i < ii; i++) {\n            anims[i].stop();\n        }\n        return this;\n    };\n    /*\\\n     * Element.animate\n     [ method ]\n     **\n     * Animates the given attributes of the element\n     **\n     - attrs (object) key-value pairs of destination attributes\n     - duration (number) duration of the animation in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function that executes when the animation ends\n     = (Element) the current element\n    \\*/\n    elproto.animate = function (attrs, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        if (attrs instanceof Animation) {\n            callback = attrs.callback;\n            easing = attrs.easing;\n            ms = attrs.dur;\n            attrs = attrs.attr;\n        }\n        var fkeys = [], tkeys = [], keys = {}, from, to, f, eq,\n            el = this;\n        for (var key in attrs) if (attrs[has](key)) {\n            if (el.equal) {\n                eq = el.equal(key, Str(attrs[key]));\n                from = eq.from;\n                to = eq.to;\n                f = eq.f;\n            } else {\n                from = +el.attr(key);\n                to = +attrs[key];\n            }\n            var len = is(from, \"array\") ? from.length : 1;\n            keys[key] = slice(fkeys.length, fkeys.length + len, f);\n            fkeys = fkeys.concat(from);\n            tkeys = tkeys.concat(to);\n        }\n        var now = mina.time(),\n            anim = mina(fkeys, tkeys, now, now + ms, mina.time, function (val) {\n                var attr = {};\n                for (var key in keys) if (keys[has](key)) {\n                    attr[key] = keys[key](val);\n                }\n                el.attr(attr);\n            }, easing);\n        el.anims[anim.id] = anim;\n        anim._attrs = attrs;\n        anim._callback = callback;\n        eve(\"snap.animcreated.\" + el.id, anim);\n        eve.once(\"mina.finish.\" + anim.id, function () {\n            eve.off(\"mina.*.\" + anim.id);\n            delete el.anims[anim.id];\n            callback && callback.call(el);\n        });\n        eve.once(\"mina.stop.\" + anim.id, function () {\n            eve.off(\"mina.*.\" + anim.id);\n            delete el.anims[anim.id];\n        });\n        return el;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var objectToString = Object.prototype.toString,\n        Str = String,\n        math = Math,\n        E = \"\";\n    function Matrix(a, b, c, d, e, f) {\n        if (b == null && objectToString.call(a) == \"[object SVGMatrix]\") {\n            this.a = a.a;\n            this.b = a.b;\n            this.c = a.c;\n            this.d = a.d;\n            this.e = a.e;\n            this.f = a.f;\n            return;\n        }\n        if (a != null) {\n            this.a = +a;\n            this.b = +b;\n            this.c = +c;\n            this.d = +d;\n            this.e = +e;\n            this.f = +f;\n        } else {\n            this.a = 1;\n            this.b = 0;\n            this.c = 0;\n            this.d = 1;\n            this.e = 0;\n            this.f = 0;\n        }\n    }\n    (function (matrixproto) {\n        /*\\\n         * Matrix.add\n         [ method ]\n         **\n         * Adds the given matrix to existing one\n         - a (number)\n         - b (number)\n         - c (number)\n         - d (number)\n         - e (number)\n         - f (number)\n         * or\n         - matrix (object) @Matrix\n        \\*/\n        matrixproto.add = function (a, b, c, d, e, f) {\n            if (a && a instanceof Matrix) {\n                return this.add(a.a, a.b, a.c, a.d, a.e, a.f);\n            }\n            var aNew = a * this.a + b * this.c,\n                bNew = a * this.b + b * this.d;\n            this.e += e * this.a + f * this.c;\n            this.f += e * this.b + f * this.d;\n            this.c = c * this.a + d * this.c;\n            this.d = c * this.b + d * this.d;\n\n            this.a = aNew;\n            this.b = bNew;\n            return this;\n        };\n        /*\\\n         * Matrix.multLeft\n         [ method ]\n         **\n         * Multiplies a passed affine transform to the left: M * this.\n         - a (number)\n         - b (number)\n         - c (number)\n         - d (number)\n         - e (number)\n         - f (number)\n         * or\n         - matrix (object) @Matrix\n        \\*/\n        Matrix.prototype.multLeft = function (a, b, c, d, e, f) {\n            if (a && a instanceof Matrix) {\n                return this.multLeft(a.a, a.b, a.c, a.d, a.e, a.f);\n            }\n            var aNew = a * this.a + c * this.b,\n                cNew = a * this.c + c * this.d,\n                eNew = a * this.e + c * this.f + e;\n            this.b = b * this.a + d * this.b;\n            this.d = b * this.c + d * this.d;\n            this.f = b * this.e + d * this.f + f;\n\n            this.a = aNew;\n            this.c = cNew;\n            this.e = eNew;\n            return this;\n        };\n        /*\\\n         * Matrix.invert\n         [ method ]\n         **\n         * Returns an inverted version of the matrix\n         = (object) @Matrix\n        \\*/\n        matrixproto.invert = function () {\n            var me = this,\n                x = me.a * me.d - me.b * me.c;\n            return new Matrix(me.d / x, -me.b / x, -me.c / x, me.a / x, (me.c * me.f - me.d * me.e) / x, (me.b * me.e - me.a * me.f) / x);\n        };\n        /*\\\n         * Matrix.clone\n         [ method ]\n         **\n         * Returns a copy of the matrix\n         = (object) @Matrix\n        \\*/\n        matrixproto.clone = function () {\n            return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n        };\n        /*\\\n         * Matrix.translate\n         [ method ]\n         **\n         * Translate the matrix\n         - x (number) horizontal offset distance\n         - y (number) vertical offset distance\n        \\*/\n        matrixproto.translate = function (x, y) {\n            this.e += x * this.a + y * this.c;\n            this.f += x * this.b + y * this.d;\n            return this;\n        };\n        /*\\\n         * Matrix.scale\n         [ method ]\n         **\n         * Scales the matrix\n         - x (number) amount to be scaled, with `1` resulting in no change\n         - y (number) #optional amount to scale along the vertical axis. (Otherwise `x` applies to both axes.)\n         - cx (number) #optional horizontal origin point from which to scale\n         - cy (number) #optional vertical origin point from which to scale\n         * Default cx, cy is the middle point of the element.\n        \\*/\n        matrixproto.scale = function (x, y, cx, cy) {\n            y == null && (y = x);\n            (cx || cy) && this.translate(cx, cy);\n            this.a *= x;\n            this.b *= x;\n            this.c *= y;\n            this.d *= y;\n            (cx || cy) && this.translate(-cx, -cy);\n            return this;\n        };\n        /*\\\n         * Matrix.rotate\n         [ method ]\n         **\n         * Rotates the matrix\n         - a (number) angle of rotation, in degrees\n         - x (number) horizontal origin point from which to rotate\n         - y (number) vertical origin point from which to rotate\n        \\*/\n        matrixproto.rotate = function (a, x, y) {\n            a = Snap.rad(a);\n            x = x || 0;\n            y = y || 0;\n            var cos = +math.cos(a).toFixed(9),\n                sin = +math.sin(a).toFixed(9);\n            this.add(cos, sin, -sin, cos, x, y);\n            return this.add(1, 0, 0, 1, -x, -y);\n        };\n        /*\\\n         * Matrix.skewX\n         [ method ]\n         **\n         * Skews the matrix along the x-axis\n         - x (number) Angle to skew along the x-axis (in degrees).\n        \\*/\n        matrixproto.skewX = function (x) {\n            return this.skew(x, 0);\n        };\n        /*\\\n         * Matrix.skewY\n         [ method ]\n         **\n         * Skews the matrix along the y-axis\n         - y (number) Angle to skew along the y-axis (in degrees).\n        \\*/\n        matrixproto.skewY = function (y) {\n            return this.skew(0, y);\n        };\n        /*\\\n         * Matrix.skew\n         [ method ]\n         **\n         * Skews the matrix\n         - y (number) Angle to skew along the y-axis (in degrees).\n         - x (number) Angle to skew along the x-axis (in degrees).\n        \\*/\n        matrixproto.skew = function (x, y) {\n            x = x || 0;\n            y = y || 0;\n            x = Snap.rad(x);\n            y = Snap.rad(y);\n            var c = math.tan(x).toFixed(9);\n            var b = math.tan(y).toFixed(9);\n            return this.add(1, b, c, 1, 0, 0);\n        };\n        /*\\\n         * Matrix.x\n         [ method ]\n         **\n         * Returns x coordinate for given point after transformation described by the matrix. See also @Matrix.y\n         - x (number)\n         - y (number)\n         = (number) x\n        \\*/\n        matrixproto.x = function (x, y) {\n            return x * this.a + y * this.c + this.e;\n        };\n        /*\\\n         * Matrix.y\n         [ method ]\n         **\n         * Returns y coordinate for given point after transformation described by the matrix. See also @Matrix.x\n         - x (number)\n         - y (number)\n         = (number) y\n        \\*/\n        matrixproto.y = function (x, y) {\n            return x * this.b + y * this.d + this.f;\n        };\n        matrixproto.get = function (i) {\n            return +this[Str.fromCharCode(97 + i)].toFixed(4);\n        };\n        matrixproto.toString = function () {\n            return \"matrix(\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + \")\";\n        };\n        matrixproto.offset = function () {\n            return [this.e.toFixed(4), this.f.toFixed(4)];\n        };\n        function norm(a) {\n            return a[0] * a[0] + a[1] * a[1];\n        }\n        function normalize(a) {\n            var mag = math.sqrt(norm(a));\n            a[0] && (a[0] /= mag);\n            a[1] && (a[1] /= mag);\n        }\n        /*\\\n         * Matrix.determinant\n         [ method ]\n         **\n         * Finds determinant of the given matrix.\n         = (number) determinant\n        \\*/\n        matrixproto.determinant = function () {\n            return this.a * this.d - this.b * this.c;\n        };\n        /*\\\n         * Matrix.split\n         [ method ]\n         **\n         * Splits matrix into primitive transformations\n         = (object) in format:\n         o dx (number) translation by x\n         o dy (number) translation by y\n         o scalex (number) scale by x\n         o scaley (number) scale by y\n         o shear (number) shear\n         o rotate (number) rotation in deg\n         o isSimple (boolean) could it be represented via simple transformations\n        \\*/\n        matrixproto.split = function () {\n            var out = {};\n            // translation\n            out.dx = this.e;\n            out.dy = this.f;\n\n            // scale and shear\n            var row = [[this.a, this.b], [this.c, this.d]];\n            out.scalex = math.sqrt(norm(row[0]));\n            normalize(row[0]);\n\n            out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];\n            row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];\n\n            out.scaley = math.sqrt(norm(row[1]));\n            normalize(row[1]);\n            out.shear /= out.scaley;\n\n            if (this.determinant() < 0) {\n                out.scalex = -out.scalex;\n            }\n\n            // rotation\n            var sin = row[0][1],\n                cos = row[1][1];\n            if (cos < 0) {\n                out.rotate = Snap.deg(math.acos(cos));\n                if (sin < 0) {\n                    out.rotate = 360 - out.rotate;\n                }\n            } else {\n                out.rotate = Snap.deg(math.asin(sin));\n            }\n\n            out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);\n            out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;\n            out.noRotation = !+out.shear.toFixed(9) && !out.rotate;\n            return out;\n        };\n        /*\\\n         * Matrix.toTransformString\n         [ method ]\n         **\n         * Returns transform string that represents given matrix\n         = (string) transform string\n        \\*/\n        matrixproto.toTransformString = function (shorter) {\n            var s = shorter || this.split();\n            if (!+s.shear.toFixed(9)) {\n                s.scalex = +s.scalex.toFixed(4);\n                s.scaley = +s.scaley.toFixed(4);\n                s.rotate = +s.rotate.toFixed(4);\n                return  (s.dx || s.dy ? \"t\" + [+s.dx.toFixed(4), +s.dy.toFixed(4)] : E) +\n                        (s.rotate ? \"r\" + [+s.rotate.toFixed(4), 0, 0] : E) +\n                        (s.scalex != 1 || s.scaley != 1 ? \"s\" + [s.scalex, s.scaley, 0, 0] : E);\n            } else {\n                return \"m\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];\n            }\n        };\n    })(Matrix.prototype);\n    /*\\\n     * Snap.Matrix\n     [ method ]\n     **\n     * Matrix constructor, extend on your own risk.\n     * To create matrices use @Snap.matrix.\n    \\*/\n    Snap.Matrix = Matrix;\n    /*\\\n     * Snap.matrix\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns a matrix based on the given parameters\n     - a (number)\n     - b (number)\n     - c (number)\n     - d (number)\n     - e (number)\n     - f (number)\n     * or\n     - svgMatrix (SVGMatrix)\n     = (object) @Matrix\n    \\*/\n    Snap.matrix = function (a, b, c, d, e, f) {\n        return new Matrix(a, b, c, d, e, f);\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var has = \"hasOwnProperty\",\n        make = Snap._.make,\n        wrap = Snap._.wrap,\n        is = Snap.is,\n        getSomeDefs = Snap._.getSomeDefs,\n        reURLValue = /^url\\((['\"]?)([^)]+)\\1\\)$/,\n        $ = Snap._.$,\n        URL = Snap.url,\n        Str = String,\n        separator = Snap._.separator,\n        E = \"\";\n    /*\\\n     * Snap.deurl\n     [ method ]\n     **\n     * Unwraps path from `\"url(<path>)\"`.\n     - value (string) url path\n     = (string) unwrapped path\n    \\*/\n    Snap.deurl = function (value) {\n        var res = String(value).match(reURLValue);\n        return res ? res[2] : value;\n    }\n    // Attributes event handlers\n    eve.on(\"snap.util.attr.mask\", function (value) {\n        if (value instanceof Element || value instanceof Fragment) {\n            eve.stop();\n            if (value instanceof Fragment && value.node.childNodes.length == 1) {\n                value = value.node.firstChild;\n                getSomeDefs(this).appendChild(value);\n                value = wrap(value);\n            }\n            if (value.type == \"mask\") {\n                var mask = value;\n            } else {\n                mask = make(\"mask\", getSomeDefs(this));\n                mask.node.appendChild(value.node);\n            }\n            !mask.node.id && $(mask.node, {\n                id: mask.id\n            });\n            $(this.node, {\n                mask: URL(mask.id)\n            });\n        }\n    });\n    (function (clipIt) {\n        eve.on(\"snap.util.attr.clip\", clipIt);\n        eve.on(\"snap.util.attr.clip-path\", clipIt);\n        eve.on(\"snap.util.attr.clipPath\", clipIt);\n    }(function (value) {\n        if (value instanceof Element || value instanceof Fragment) {\n            eve.stop();\n            var clip,\n                node = value.node;\n            while (node) {\n                if (node.nodeName === \"clipPath\") {\n                    clip = new Element(node);\n                    break;\n                }\n                if (node.nodeName === \"svg\") {\n                    clip = undefined;\n                    break;\n                }\n                node = node.parentNode;\n            }\n            if (!clip) {\n                clip = make(\"clipPath\", getSomeDefs(this));\n                clip.node.appendChild(value.node);\n                !clip.node.id && $(clip.node, {\n                    id: clip.id\n                });\n            }\n            $(this.node, {\n                \"clip-path\": URL(clip.node.id || clip.id)\n            });\n        }\n    }));\n    function fillStroke(name) {\n        return function (value) {\n            eve.stop();\n            if (value instanceof Fragment && value.node.childNodes.length == 1 &&\n                (value.node.firstChild.tagName == \"radialGradient\" ||\n                value.node.firstChild.tagName == \"linearGradient\" ||\n                value.node.firstChild.tagName == \"pattern\")) {\n                value = value.node.firstChild;\n                getSomeDefs(this).appendChild(value);\n                value = wrap(value);\n            }\n            if (value instanceof Element) {\n                if (value.type == \"radialGradient\" || value.type == \"linearGradient\"\n                   || value.type == \"pattern\") {\n                    if (!value.node.id) {\n                        $(value.node, {\n                            id: value.id\n                        });\n                    }\n                    var fill = URL(value.node.id);\n                } else {\n                    fill = value.attr(name);\n                }\n            } else {\n                fill = Snap.color(value);\n                if (fill.error) {\n                    var grad = Snap(getSomeDefs(this).ownerSVGElement).gradient(value);\n                    if (grad) {\n                        if (!grad.node.id) {\n                            $(grad.node, {\n                                id: grad.id\n                            });\n                        }\n                        fill = URL(grad.node.id);\n                    } else {\n                        fill = value;\n                    }\n                } else {\n                    fill = Str(fill);\n                }\n            }\n            var attrs = {};\n            attrs[name] = fill;\n            $(this.node, attrs);\n            this.node.style[name] = E;\n        };\n    }\n    eve.on(\"snap.util.attr.fill\", fillStroke(\"fill\"));\n    eve.on(\"snap.util.attr.stroke\", fillStroke(\"stroke\"));\n    var gradrg = /^([lr])(?:\\(([^)]*)\\))?(.*)$/i;\n    eve.on(\"snap.util.grad.parse\", function parseGrad(string) {\n        string = Str(string);\n        var tokens = string.match(gradrg);\n        if (!tokens) {\n            return null;\n        }\n        var type = tokens[1],\n            params = tokens[2],\n            stops = tokens[3];\n        params = params.split(/\\s*,\\s*/).map(function (el) {\n            return +el == el ? +el : el;\n        });\n        if (params.length == 1 && params[0] == 0) {\n            params = [];\n        }\n        stops = stops.split(\"-\");\n        stops = stops.map(function (el) {\n            el = el.split(\":\");\n            var out = {\n                color: el[0]\n            };\n            if (el[1]) {\n                out.offset = parseFloat(el[1]);\n            }\n            return out;\n        });\n        var len = stops.length,\n            start = 0,\n            j = 0;\n        function seed(i, end) {\n            var step = (end - start) / (i - j);\n            for (var k = j; k < i; k++) {\n                stops[k].offset = +(+start + step * (k - j)).toFixed(2);\n            }\n            j = i;\n            start = end;\n        }\n        len--;\n        for (var i = 0; i < len; i++) if (\"offset\" in stops[i]) {\n            seed(i, stops[i].offset);\n        }\n        stops[len].offset = stops[len].offset || 100;\n        seed(len, stops[len].offset);\n        return {\n            type: type,\n            params: params,\n            stops: stops\n        };\n    });\n\n    eve.on(\"snap.util.attr.d\", function (value) {\n        eve.stop();\n        if (is(value, \"array\") && is(value[0], \"array\")) {\n            value = Snap.path.toString.call(value);\n        }\n        value = Str(value);\n        if (value.match(/[ruo]/i)) {\n            value = Snap.path.toAbsolute(value);\n        }\n        $(this.node, {d: value});\n    })(-1);\n    eve.on(\"snap.util.attr.#text\", function (value) {\n        eve.stop();\n        value = Str(value);\n        var txt = glob.doc.createTextNode(value);\n        while (this.node.firstChild) {\n            this.node.removeChild(this.node.firstChild);\n        }\n        this.node.appendChild(txt);\n    })(-1);\n    eve.on(\"snap.util.attr.path\", function (value) {\n        eve.stop();\n        this.attr({d: value});\n    })(-1);\n    eve.on(\"snap.util.attr.class\", function (value) {\n        eve.stop();\n        this.node.className.baseVal = value;\n    })(-1);\n    eve.on(\"snap.util.attr.viewBox\", function (value) {\n        var vb;\n        if (is(value, \"object\") && \"x\" in value) {\n            vb = [value.x, value.y, value.width, value.height].join(\" \");\n        } else if (is(value, \"array\")) {\n            vb = value.join(\" \");\n        } else {\n            vb = value;\n        }\n        $(this.node, {\n            viewBox: vb\n        });\n        eve.stop();\n    })(-1);\n    eve.on(\"snap.util.attr.transform\", function (value) {\n        this.transform(value);\n        eve.stop();\n    })(-1);\n    eve.on(\"snap.util.attr.r\", function (value) {\n        if (this.type == \"rect\") {\n            eve.stop();\n            $(this.node, {\n                rx: value,\n                ry: value\n            });\n        }\n    })(-1);\n    eve.on(\"snap.util.attr.textpath\", function (value) {\n        eve.stop();\n        if (this.type == \"text\") {\n            var id, tp, node;\n            if (!value && this.textPath) {\n                tp = this.textPath;\n                while (tp.node.firstChild) {\n                    this.node.appendChild(tp.node.firstChild);\n                }\n                tp.remove();\n                delete this.textPath;\n                return;\n            }\n            if (is(value, \"string\")) {\n                var defs = getSomeDefs(this),\n                    path = wrap(defs.parentNode).path(value);\n                defs.appendChild(path.node);\n                id = path.id;\n                path.attr({id: id});\n            } else {\n                value = wrap(value);\n                if (value instanceof Element) {\n                    id = value.attr(\"id\");\n                    if (!id) {\n                        id = value.id;\n                        value.attr({id: id});\n                    }\n                }\n            }\n            if (id) {\n                tp = this.textPath;\n                node = this.node;\n                if (tp) {\n                    tp.attr({\"xlink:href\": \"#\" + id});\n                } else {\n                    tp = $(\"textPath\", {\n                        \"xlink:href\": \"#\" + id\n                    });\n                    while (node.firstChild) {\n                        tp.appendChild(node.firstChild);\n                    }\n                    node.appendChild(tp);\n                    this.textPath = wrap(tp);\n                }\n            }\n        }\n    })(-1);\n    eve.on(\"snap.util.attr.text\", function (value) {\n        if (this.type == \"text\") {\n            var i = 0,\n                node = this.node,\n                tuner = function (chunk) {\n                    var out = $(\"tspan\");\n                    if (is(chunk, \"array\")) {\n                        for (var i = 0; i < chunk.length; i++) {\n                            out.appendChild(tuner(chunk[i]));\n                        }\n                    } else {\n                        out.appendChild(glob.doc.createTextNode(chunk));\n                    }\n                    out.normalize && out.normalize();\n                    return out;\n                };\n            while (node.firstChild) {\n                node.removeChild(node.firstChild);\n            }\n            var tuned = tuner(value);\n            while (tuned.firstChild) {\n                node.appendChild(tuned.firstChild);\n            }\n        }\n        eve.stop();\n    })(-1);\n    function setFontSize(value) {\n        eve.stop();\n        if (value == +value) {\n            value += \"px\";\n        }\n        this.node.style.fontSize = value;\n    }\n    eve.on(\"snap.util.attr.fontSize\", setFontSize)(-1);\n    eve.on(\"snap.util.attr.font-size\", setFontSize)(-1);\n\n\n    eve.on(\"snap.util.getattr.transform\", function () {\n        eve.stop();\n        return this.transform();\n    })(-1);\n    eve.on(\"snap.util.getattr.textpath\", function () {\n        eve.stop();\n        return this.textPath;\n    })(-1);\n    // Markers\n    (function () {\n        function getter(end) {\n            return function () {\n                eve.stop();\n                var style = glob.doc.defaultView.getComputedStyle(this.node, null).getPropertyValue(\"marker-\" + end);\n                if (style == \"none\") {\n                    return style;\n                } else {\n                    return Snap(glob.doc.getElementById(style.match(reURLValue)[1]));\n                }\n            };\n        }\n        function setter(end) {\n            return function (value) {\n                eve.stop();\n                var name = \"marker\" + end.charAt(0).toUpperCase() + end.substring(1);\n                if (value == \"\" || !value) {\n                    this.node.style[name] = \"none\";\n                    return;\n                }\n                if (value.type == \"marker\") {\n                    var id = value.node.id;\n                    if (!id) {\n                        $(value.node, {id: value.id});\n                    }\n                    this.node.style[name] = URL(id);\n                    return;\n                }\n            };\n        }\n        eve.on(\"snap.util.getattr.marker-end\", getter(\"end\"))(-1);\n        eve.on(\"snap.util.getattr.markerEnd\", getter(\"end\"))(-1);\n        eve.on(\"snap.util.getattr.marker-start\", getter(\"start\"))(-1);\n        eve.on(\"snap.util.getattr.markerStart\", getter(\"start\"))(-1);\n        eve.on(\"snap.util.getattr.marker-mid\", getter(\"mid\"))(-1);\n        eve.on(\"snap.util.getattr.markerMid\", getter(\"mid\"))(-1);\n        eve.on(\"snap.util.attr.marker-end\", setter(\"end\"))(-1);\n        eve.on(\"snap.util.attr.markerEnd\", setter(\"end\"))(-1);\n        eve.on(\"snap.util.attr.marker-start\", setter(\"start\"))(-1);\n        eve.on(\"snap.util.attr.markerStart\", setter(\"start\"))(-1);\n        eve.on(\"snap.util.attr.marker-mid\", setter(\"mid\"))(-1);\n        eve.on(\"snap.util.attr.markerMid\", setter(\"mid\"))(-1);\n    }());\n    eve.on(\"snap.util.getattr.r\", function () {\n        if (this.type == \"rect\" && $(this.node, \"rx\") == $(this.node, \"ry\")) {\n            eve.stop();\n            return $(this.node, \"rx\");\n        }\n    })(-1);\n    function textExtract(node) {\n        var out = [];\n        var children = node.childNodes;\n        for (var i = 0, ii = children.length; i < ii; i++) {\n            var chi = children[i];\n            if (chi.nodeType == 3) {\n                out.push(chi.nodeValue);\n            }\n            if (chi.tagName == \"tspan\") {\n                if (chi.childNodes.length == 1 && chi.firstChild.nodeType == 3) {\n                    out.push(chi.firstChild.nodeValue);\n                } else {\n                    out.push(textExtract(chi));\n                }\n            }\n        }\n        return out;\n    }\n    eve.on(\"snap.util.getattr.text\", function () {\n        if (this.type == \"text\" || this.type == \"tspan\") {\n            eve.stop();\n            var out = textExtract(this.node);\n            return out.length == 1 ? out[0] : out;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.#text\", function () {\n        return this.node.textContent;\n    })(-1);\n    eve.on(\"snap.util.getattr.fill\", function (internal) {\n        if (internal) {\n            return;\n        }\n        eve.stop();\n        var value = eve(\"snap.util.getattr.fill\", this, true).firstDefined();\n        return Snap(Snap.deurl(value)) || value;\n    })(-1);\n    eve.on(\"snap.util.getattr.stroke\", function (internal) {\n        if (internal) {\n            return;\n        }\n        eve.stop();\n        var value = eve(\"snap.util.getattr.stroke\", this, true).firstDefined();\n        return Snap(Snap.deurl(value)) || value;\n    })(-1);\n    eve.on(\"snap.util.getattr.viewBox\", function () {\n        eve.stop();\n        var vb = $(this.node, \"viewBox\");\n        if (vb) {\n            vb = vb.split(separator);\n            return Snap._.box(+vb[0], +vb[1], +vb[2], +vb[3]);\n        } else {\n            return;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.points\", function () {\n        var p = $(this.node, \"points\");\n        eve.stop();\n        if (p) {\n            return p.split(separator);\n        } else {\n            return;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.path\", function () {\n        var p = $(this.node, \"d\");\n        eve.stop();\n        return p;\n    })(-1);\n    eve.on(\"snap.util.getattr.class\", function () {\n        return this.node.className.baseVal;\n    })(-1);\n    function getFontSize() {\n        eve.stop();\n        return this.node.style.fontSize;\n    }\n    eve.on(\"snap.util.getattr.fontSize\", getFontSize)(-1);\n    eve.on(\"snap.util.getattr.font-size\", getFontSize)(-1);\n});\n\n// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var rgNotSpace = /\\S+/g,\n        rgBadSpace = /[\\t\\r\\n\\f]/g,\n        rgTrim = /(^\\s+|\\s+$)/g,\n        Str = String,\n        elproto = Element.prototype;\n    /*\\\n     * Element.addClass\n     [ method ]\n     **\n     * Adds given class name or list of class names to the element.\n     - value (string) class name or space separated list of class names\n     **\n     = (Element) original element.\n    \\*/\n    elproto.addClass = function (value) {\n        var classes = Str(value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n\n        if (classes.length) {\n            j = 0;\n            while (clazz = classes[j++]) {\n                pos = curClasses.indexOf(clazz);\n                if (!~pos) {\n                    curClasses.push(clazz);\n                }\n            }\n\n            finalValue = curClasses.join(\" \");\n            if (className != finalValue) {\n                elem.className.baseVal = finalValue;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Element.removeClass\n     [ method ]\n     **\n     * Removes given class name or list of class names from the element.\n     - value (string) class name or space separated list of class names\n     **\n     = (Element) original element.\n    \\*/\n    elproto.removeClass = function (value) {\n        var classes = Str(value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n        if (curClasses.length) {\n            j = 0;\n            while (clazz = classes[j++]) {\n                pos = curClasses.indexOf(clazz);\n                if (~pos) {\n                    curClasses.splice(pos, 1);\n                }\n            }\n\n            finalValue = curClasses.join(\" \");\n            if (className != finalValue) {\n                elem.className.baseVal = finalValue;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Element.hasClass\n     [ method ]\n     **\n     * Checks if the element has a given class name in the list of class names applied to it.\n     - value (string) class name\n     **\n     = (boolean) `true` if the element has given class\n    \\*/\n    elproto.hasClass = function (value) {\n        var elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [];\n        return !!~curClasses.indexOf(value);\n    };\n    /*\\\n     * Element.toggleClass\n     [ method ]\n     **\n     * Add or remove one or more classes from the element, depending on either\n     * the class’s presence or the value of the `flag` argument.\n     - value (string) class name or space separated list of class names\n     - flag (boolean) value to determine whether the class should be added or removed\n     **\n     = (Element) original element.\n    \\*/\n    elproto.toggleClass = function (value, flag) {\n        if (flag != null) {\n            if (flag) {\n                return this.addClass(value);\n            } else {\n                return this.removeClass(value);\n            }\n        }\n        var classes = (value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n        j = 0;\n        while (clazz = classes[j++]) {\n            pos = curClasses.indexOf(clazz);\n            if (~pos) {\n                curClasses.splice(pos, 1);\n            } else {\n                curClasses.push(clazz);\n            }\n        }\n\n        finalValue = curClasses.join(\" \");\n        if (className != finalValue) {\n            elem.className.baseVal = finalValue;\n        }\n        return this;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var operators = {\n            \"+\": function (x, y) {\n                    return x + y;\n                },\n            \"-\": function (x, y) {\n                    return x - y;\n                },\n            \"/\": function (x, y) {\n                    return x / y;\n                },\n            \"*\": function (x, y) {\n                    return x * y;\n                }\n        },\n        Str = String,\n        reUnit = /[a-z]+$/i,\n        reAddon = /^\\s*([+\\-\\/*])\\s*=\\s*([\\d.eE+\\-]+)\\s*([^\\d\\s]+)?\\s*$/;\n    function getNumber(val) {\n        return val;\n    }\n    function getUnit(unit) {\n        return function (val) {\n            return +val.toFixed(3) + unit;\n        };\n    }\n    eve.on(\"snap.util.attr\", function (val) {\n        var plus = Str(val).match(reAddon);\n        if (plus) {\n            var evnt = eve.nt(),\n                name = evnt.substring(evnt.lastIndexOf(\".\") + 1),\n                a = this.attr(name),\n                atr = {};\n            eve.stop();\n            var unit = plus[3] || \"\",\n                aUnit = a.match(reUnit),\n                op = operators[plus[1]];\n            if (aUnit && aUnit == unit) {\n                val = op(parseFloat(a), +plus[2]);\n            } else {\n                a = this.asPX(name);\n                val = op(this.asPX(name), this.asPX(name, plus[2] + unit));\n            }\n            if (isNaN(a) || isNaN(val)) {\n                return;\n            }\n            atr[name] = val;\n            this.attr(atr);\n        }\n    })(-10);\n    eve.on(\"snap.util.equal\", function (name, b) {\n        var A, B, a = Str(this.attr(name) || \"\"),\n            el = this,\n            bplus = Str(b).match(reAddon);\n        if (bplus) {\n            eve.stop();\n            var unit = bplus[3] || \"\",\n                aUnit = a.match(reUnit),\n                op = operators[bplus[1]];\n            if (aUnit && aUnit == unit) {\n                return {\n                    from: parseFloat(a),\n                    to: op(parseFloat(a), +bplus[2]),\n                    f: getUnit(aUnit)\n                };\n            } else {\n                a = this.asPX(name);\n                return {\n                    from: a,\n                    to: op(a, this.asPX(name, bplus[2] + unit)),\n                    f: getNumber\n                };\n            }\n        }\n    })(-10);\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var proto = Paper.prototype,\n        is = Snap.is;\n    /*\\\n     * Paper.rect\n     [ method ]\n     *\n     * Draws a rectangle\n     **\n     - x (number) x coordinate of the top left corner\n     - y (number) y coordinate of the top left corner\n     - width (number) width\n     - height (number) height\n     - rx (number) #optional horizontal radius for rounded corners, default is 0\n     - ry (number) #optional vertical radius for rounded corners, default is rx or 0\n     = (object) the `rect` element\n     **\n     > Usage\n     | // regular rectangle\n     | var c = paper.rect(10, 10, 50, 50);\n     | // rectangle with rounded corners\n     | var c = paper.rect(40, 40, 50, 50, 10);\n    \\*/\n    proto.rect = function (x, y, w, h, rx, ry) {\n        var attr;\n        if (ry == null) {\n            ry = rx;\n        }\n        if (is(x, \"object\") && x == \"[object Object]\") {\n            attr = x;\n        } else if (x != null) {\n            attr = {\n                x: x,\n                y: y,\n                width: w,\n                height: h\n            };\n            if (rx != null) {\n                attr.rx = rx;\n                attr.ry = ry;\n            }\n        }\n        return this.el(\"rect\", attr);\n    };\n    /*\\\n     * Paper.circle\n     [ method ]\n     **\n     * Draws a circle\n     **\n     - x (number) x coordinate of the centre\n     - y (number) y coordinate of the centre\n     - r (number) radius\n     = (object) the `circle` element\n     **\n     > Usage\n     | var c = paper.circle(50, 50, 40);\n    \\*/\n    proto.circle = function (cx, cy, r) {\n        var attr;\n        if (is(cx, \"object\") && cx == \"[object Object]\") {\n            attr = cx;\n        } else if (cx != null) {\n            attr = {\n                cx: cx,\n                cy: cy,\n                r: r\n            };\n        }\n        return this.el(\"circle\", attr);\n    };\n\n    var preload = (function () {\n        function onerror() {\n            this.parentNode.removeChild(this);\n        }\n        return function (src, f) {\n            var img = glob.doc.createElement(\"img\"),\n                body = glob.doc.body;\n            img.style.cssText = \"position:absolute;left:-9999em;top:-9999em\";\n            img.onload = function () {\n                f.call(img);\n                img.onload = img.onerror = null;\n                body.removeChild(img);\n            };\n            img.onerror = onerror;\n            body.appendChild(img);\n            img.src = src;\n        };\n    }());\n\n    /*\\\n     * Paper.image\n     [ method ]\n     **\n     * Places an image on the surface\n     **\n     - src (string) URI of the source image\n     - x (number) x offset position\n     - y (number) y offset position\n     - width (number) width of the image\n     - height (number) height of the image\n     = (object) the `image` element\n     * or\n     = (object) Snap element object with type `image`\n     **\n     > Usage\n     | var c = paper.image(\"apple.png\", 10, 10, 80, 80);\n    \\*/\n    proto.image = function (src, x, y, width, height) {\n        var el = this.el(\"image\");\n        if (is(src, \"object\") && \"src\" in src) {\n            el.attr(src);\n        } else if (src != null) {\n            var set = {\n                \"xlink:href\": src,\n                preserveAspectRatio: \"none\"\n            };\n            if (x != null && y != null) {\n                set.x = x;\n                set.y = y;\n            }\n            if (width != null && height != null) {\n                set.width = width;\n                set.height = height;\n            } else {\n                preload(src, function () {\n                    Snap._.$(el.node, {\n                        width: this.offsetWidth,\n                        height: this.offsetHeight\n                    });\n                });\n            }\n            Snap._.$(el.node, set);\n        }\n        return el;\n    };\n    /*\\\n     * Paper.ellipse\n     [ method ]\n     **\n     * Draws an ellipse\n     **\n     - x (number) x coordinate of the centre\n     - y (number) y coordinate of the centre\n     - rx (number) horizontal radius\n     - ry (number) vertical radius\n     = (object) the `ellipse` element\n     **\n     > Usage\n     | var c = paper.ellipse(50, 50, 40, 20);\n    \\*/\n    proto.ellipse = function (cx, cy, rx, ry) {\n        var attr;\n        if (is(cx, \"object\") && cx == \"[object Object]\") {\n            attr = cx;\n        } else if (cx != null) {\n            attr ={\n                cx: cx,\n                cy: cy,\n                rx: rx,\n                ry: ry\n            };\n        }\n        return this.el(\"ellipse\", attr);\n    };\n    // SIERRA Paper.path(): Unclear from the link what a Catmull-Rom curveto is, and why it would make life any easier.\n    /*\\\n     * Paper.path\n     [ method ]\n     **\n     * Creates a `<path>` element using the given string as the path's definition\n     - pathString (string) #optional path string in SVG format\n     * Path string consists of one-letter commands, followed by comma seprarated arguments in numerical form. Example:\n     | \"M10,20L30,40\"\n     * This example features two commands: `M`, with arguments `(10, 20)` and `L` with arguments `(30, 40)`. Uppercase letter commands express coordinates in absolute terms, while lowercase commands express them in relative terms from the most recently declared coordinates.\n     *\n     # <p>Here is short list of commands available, for more details see <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path's data attribute's format are described in the SVG specification.\">SVG path string format</a> or <a href=\"https://developer.mozilla.org/en/SVG/Tutorial/Paths\">article about path strings at MDN</a>.</p>\n     # <table><thead><tr><th>Command</th><th>Name</th><th>Parameters</th></tr></thead><tbody>\n     # <tr><td>M</td><td>moveto</td><td>(x y)+</td></tr>\n     # <tr><td>Z</td><td>closepath</td><td>(none)</td></tr>\n     # <tr><td>L</td><td>lineto</td><td>(x y)+</td></tr>\n     # <tr><td>H</td><td>horizontal lineto</td><td>x+</td></tr>\n     # <tr><td>V</td><td>vertical lineto</td><td>y+</td></tr>\n     # <tr><td>C</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td></tr>\n     # <tr><td>S</td><td>smooth curveto</td><td>(x2 y2 x y)+</td></tr>\n     # <tr><td>Q</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td></tr>\n     # <tr><td>T</td><td>smooth quadratic Bézier curveto</td><td>(x y)+</td></tr>\n     # <tr><td>A</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+</td></tr>\n     # <tr><td>R</td><td><a href=\"http://en.wikipedia.org/wiki/Catmull–Rom_spline#Catmull.E2.80.93Rom_spline\">Catmull-Rom curveto</a>*</td><td>x1 y1 (x y)+</td></tr></tbody></table>\n     * * _Catmull-Rom curveto_ is a not standard SVG command and added to make life easier.\n     * Note: there is a special case when a path consists of only three commands: `M10,10R…z`. In this case the path connects back to its starting point.\n     > Usage\n     | var c = paper.path(\"M10 10L90 90\");\n     | // draw a diagonal line:\n     | // move to 10,10, line to 90,90\n    \\*/\n    proto.path = function (d) {\n        var attr;\n        if (is(d, \"object\") && !is(d, \"array\")) {\n            attr = d;\n        } else if (d) {\n            attr = {d: d};\n        }\n        return this.el(\"path\", attr);\n    };\n    /*\\\n     * Paper.g\n     [ method ]\n     **\n     * Creates a group element\n     **\n     - varargs (…) #optional elements to nest within the group\n     = (object) the `g` element\n     **\n     > Usage\n     | var c1 = paper.circle(),\n     |     c2 = paper.rect(),\n     |     g = paper.g(c2, c1); // note that the order of elements is different\n     * or\n     | var c1 = paper.circle(),\n     |     c2 = paper.rect(),\n     |     g = paper.g();\n     | g.add(c2, c1);\n    \\*/\n    /*\\\n     * Paper.group\n     [ method ]\n     **\n     * See @Paper.g\n    \\*/\n    proto.group = proto.g = function (first) {\n        var attr,\n            el = this.el(\"g\");\n        if (arguments.length == 1 && first && !first.type) {\n            el.attr(first);\n        } else if (arguments.length) {\n            el.add(Array.prototype.slice.call(arguments, 0));\n        }\n        return el;\n    };\n    /*\\\n     * Paper.svg\n     [ method ]\n     **\n     * Creates a nested SVG element.\n     - x (number) @optional X of the element\n     - y (number) @optional Y of the element\n     - width (number) @optional width of the element\n     - height (number) @optional height of the element\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     **\n     = (object) the `svg` element\n     **\n    \\*/\n    proto.svg = function (x, y, width, height, vbx, vby, vbw, vbh) {\n        var attrs = {};\n        if (is(x, \"object\") && y == null) {\n            attrs = x;\n        } else {\n            if (x != null) {\n                attrs.x = x;\n            }\n            if (y != null) {\n                attrs.y = y;\n            }\n            if (width != null) {\n                attrs.width = width;\n            }\n            if (height != null) {\n                attrs.height = height;\n            }\n            if (vbx != null && vby != null && vbw != null && vbh != null) {\n                attrs.viewBox = [vbx, vby, vbw, vbh];\n            }\n        }\n        return this.el(\"svg\", attrs);\n    };\n    /*\\\n     * Paper.mask\n     [ method ]\n     **\n     * Equivalent in behaviour to @Paper.g, except it’s a mask.\n     **\n     = (object) the `mask` element\n     **\n    \\*/\n    proto.mask = function (first) {\n        var attr,\n            el = this.el(\"mask\");\n        if (arguments.length == 1 && first && !first.type) {\n            el.attr(first);\n        } else if (arguments.length) {\n            el.add(Array.prototype.slice.call(arguments, 0));\n        }\n        return el;\n    };\n    /*\\\n     * Paper.ptrn\n     [ method ]\n     **\n     * Equivalent in behaviour to @Paper.g, except it’s a pattern.\n     - x (number) @optional X of the element\n     - y (number) @optional Y of the element\n     - width (number) @optional width of the element\n     - height (number) @optional height of the element\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     **\n     = (object) the `pattern` element\n     **\n    \\*/\n    proto.ptrn = function (x, y, width, height, vx, vy, vw, vh) {\n        if (is(x, \"object\")) {\n            var attr = x;\n        } else {\n            attr = {patternUnits: \"userSpaceOnUse\"};\n            if (x) {\n                attr.x = x;\n            }\n            if (y) {\n                attr.y = y;\n            }\n            if (width != null) {\n                attr.width = width;\n            }\n            if (height != null) {\n                attr.height = height;\n            }\n            if (vx != null && vy != null && vw != null && vh != null) {\n                attr.viewBox = [vx, vy, vw, vh];\n            } else {\n                attr.viewBox = [x || 0, y || 0, width || 0, height || 0];\n            }\n        }\n        return this.el(\"pattern\", attr);\n    };\n    /*\\\n     * Paper.use\n     [ method ]\n     **\n     * Creates a <use> element.\n     - id (string) @optional id of element to link\n     * or\n     - id (Element) @optional element to link\n     **\n     = (object) the `use` element\n     **\n    \\*/\n    proto.use = function (id) {\n        if (id != null) {\n            if (id instanceof Element) {\n                if (!id.attr(\"id\")) {\n                    id.attr({id: Snap._.id(id)});\n                }\n                id = id.attr(\"id\");\n            }\n            if (String(id).charAt() == \"#\") {\n                id = id.substring(1);\n            }\n            return this.el(\"use\", {\"xlink:href\": \"#\" + id});\n        } else {\n            return Element.prototype.use.call(this);\n        }\n    };\n    /*\\\n     * Paper.symbol\n     [ method ]\n     **\n     * Creates a <symbol> element.\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     = (object) the `symbol` element\n     **\n    \\*/\n    proto.symbol = function (vx, vy, vw, vh) {\n        var attr = {};\n        if (vx != null && vy != null && vw != null && vh != null) {\n            attr.viewBox = [vx, vy, vw, vh];\n        }\n\n        return this.el(\"symbol\", attr);\n    };\n    /*\\\n     * Paper.text\n     [ method ]\n     **\n     * Draws a text string\n     **\n     - x (number) x coordinate position\n     - y (number) y coordinate position\n     - text (string|array) The text string to draw or array of strings to nest within separate `<tspan>` elements\n     = (object) the `text` element\n     **\n     > Usage\n     | var t1 = paper.text(50, 50, \"Snap\");\n     | var t2 = paper.text(50, 50, [\"S\",\"n\",\"a\",\"p\"]);\n     | // Text path usage\n     | t1.attr({textpath: \"M10,10L100,100\"});\n     | // or\n     | var pth = paper.path(\"M10,10L100,100\");\n     | t1.attr({textpath: pth});\n    \\*/\n    proto.text = function (x, y, text) {\n        var attr = {};\n        if (is(x, \"object\")) {\n            attr = x;\n        } else if (x != null) {\n            attr = {\n                x: x,\n                y: y,\n                text: text || \"\"\n            };\n        }\n        return this.el(\"text\", attr);\n    };\n    /*\\\n     * Paper.line\n     [ method ]\n     **\n     * Draws a line\n     **\n     - x1 (number) x coordinate position of the start\n     - y1 (number) y coordinate position of the start\n     - x2 (number) x coordinate position of the end\n     - y2 (number) y coordinate position of the end\n     = (object) the `line` element\n     **\n     > Usage\n     | var t1 = paper.line(50, 50, 100, 100);\n    \\*/\n    proto.line = function (x1, y1, x2, y2) {\n        var attr = {};\n        if (is(x1, \"object\")) {\n            attr = x1;\n        } else if (x1 != null) {\n            attr = {\n                x1: x1,\n                x2: x2,\n                y1: y1,\n                y2: y2\n            };\n        }\n        return this.el(\"line\", attr);\n    };\n    /*\\\n     * Paper.polyline\n     [ method ]\n     **\n     * Draws a polyline\n     **\n     - points (array) array of points\n     * or\n     - varargs (…) points\n     = (object) the `polyline` element\n     **\n     > Usage\n     | var p1 = paper.polyline([10, 10, 100, 100]);\n     | var p2 = paper.polyline(10, 10, 100, 100);\n    \\*/\n    proto.polyline = function (points) {\n        if (arguments.length > 1) {\n            points = Array.prototype.slice.call(arguments, 0);\n        }\n        var attr = {};\n        if (is(points, \"object\") && !is(points, \"array\")) {\n            attr = points;\n        } else if (points != null) {\n            attr = {points: points};\n        }\n        return this.el(\"polyline\", attr);\n    };\n    /*\\\n     * Paper.polygon\n     [ method ]\n     **\n     * Draws a polygon. See @Paper.polyline\n    \\*/\n    proto.polygon = function (points) {\n        if (arguments.length > 1) {\n            points = Array.prototype.slice.call(arguments, 0);\n        }\n        var attr = {};\n        if (is(points, \"object\") && !is(points, \"array\")) {\n            attr = points;\n        } else if (points != null) {\n            attr = {points: points};\n        }\n        return this.el(\"polygon\", attr);\n    };\n    // gradients\n    (function () {\n        var $ = Snap._.$;\n        // gradients' helpers\n        /*\\\n         * Element.stops\n         [ method ]\n         **\n         * Only for gradients!\n         * Returns array of gradient stops elements.\n         = (array) the stops array.\n        \\*/\n        function Gstops() {\n            return this.selectAll(\"stop\");\n        }\n        /*\\\n         * Element.addStop\n         [ method ]\n         **\n         * Only for gradients!\n         * Adds another stop to the gradient.\n         - color (string) stops color\n         - offset (number) stops offset 0..100\n         = (object) gradient element\n        \\*/\n        function GaddStop(color, offset) {\n            var stop = $(\"stop\"),\n                attr = {\n                    offset: +offset + \"%\"\n                };\n            color = Snap.color(color);\n            attr[\"stop-color\"] = color.hex;\n            if (color.opacity < 1) {\n                attr[\"stop-opacity\"] = color.opacity;\n            }\n            $(stop, attr);\n            var stops = this.stops(),\n                inserted;\n            for (var i = 0; i < stops.length; i++) {\n                var stopOffset = parseFloat(stops[i].attr(\"offset\"));\n                if (stopOffset > offset) {\n                    this.node.insertBefore(stop, stops[i].node);\n                    inserted = true;\n                    break;\n                }\n            }\n            if (!inserted) {\n                this.node.appendChild(stop);\n            }\n            return this;\n        }\n        function GgetBBox() {\n            if (this.type == \"linearGradient\") {\n                var x1 = $(this.node, \"x1\") || 0,\n                    x2 = $(this.node, \"x2\") || 1,\n                    y1 = $(this.node, \"y1\") || 0,\n                    y2 = $(this.node, \"y2\") || 0;\n                return Snap._.box(x1, y1, math.abs(x2 - x1), math.abs(y2 - y1));\n            } else {\n                var cx = this.node.cx || .5,\n                    cy = this.node.cy || .5,\n                    r = this.node.r || 0;\n                return Snap._.box(cx - r, cy - r, r * 2, r * 2);\n            }\n        }\n        /*\\\n         * Element.setStops\n         [ method ]\n         **\n         * Only for gradients!\n         * Updates stops of the gradient based on passed gradient descriptor. See @Ppaer.gradient\n         - str (string) gradient descriptor part after `()`.\n         = (object) gradient element\n         | var g = paper.gradient(\"l(0, 0, 1, 1)#000-#f00-#fff\");\n         | g.setStops(\"#fff-#000-#f00-#fc0\");\n        \\*/\n        function GsetStops(str) {\n            var grad = str,\n                stops = this.stops();\n            if (typeof str == \"string\") {\n                grad = eve(\"snap.util.grad.parse\", null, \"l(0,0,0,1)\" + str).firstDefined().stops;\n            }\n            if (!Snap.is(grad, \"array\")) {\n                return;\n            }\n            for (var i = 0; i < stops.length; i++) {\n                if (grad[i]) {\n                    var color = Snap.color(grad[i].color),\n                        attr = {\"offset\": grad[i].offset + \"%\"};\n                    attr[\"stop-color\"] = color.hex;\n                    if (color.opacity < 1) {\n                        attr[\"stop-opacity\"] = color.opacity;\n                    }\n                    stops[i].attr(attr);\n                } else {\n                    stops[i].remove();\n                }\n            }\n            for (i = stops.length; i < grad.length; i++) {\n                this.addStop(grad[i].color, grad[i].offset);\n            }\n            return this;\n        }\n        function gradient(defs, str) {\n            var grad = eve(\"snap.util.grad.parse\", null, str).firstDefined(),\n                el;\n            if (!grad) {\n                return null;\n            }\n            grad.params.unshift(defs);\n            if (grad.type.toLowerCase() == \"l\") {\n                el = gradientLinear.apply(0, grad.params);\n            } else {\n                el = gradientRadial.apply(0, grad.params);\n            }\n            if (grad.type != grad.type.toLowerCase()) {\n                $(el.node, {\n                    gradientUnits: \"userSpaceOnUse\"\n                });\n            }\n            var stops = grad.stops,\n                len = stops.length;\n            for (var i = 0; i < len; i++) {\n                var stop = stops[i];\n                el.addStop(stop.color, stop.offset);\n            }\n            return el;\n        }\n        function gradientLinear(defs, x1, y1, x2, y2) {\n            var el = Snap._.make(\"linearGradient\", defs);\n            el.stops = Gstops;\n            el.addStop = GaddStop;\n            el.getBBox = GgetBBox;\n            el.setStops = GsetStops;\n            if (x1 != null) {\n                $(el.node, {\n                    x1: x1,\n                    y1: y1,\n                    x2: x2,\n                    y2: y2\n                });\n            }\n            return el;\n        }\n        function gradientRadial(defs, cx, cy, r, fx, fy) {\n            var el = Snap._.make(\"radialGradient\", defs);\n            el.stops = Gstops;\n            el.addStop = GaddStop;\n            el.getBBox = GgetBBox;\n            if (cx != null) {\n                $(el.node, {\n                    cx: cx,\n                    cy: cy,\n                    r: r\n                });\n            }\n            if (fx != null && fy != null) {\n                $(el.node, {\n                    fx: fx,\n                    fy: fy\n                });\n            }\n            return el;\n        }\n        /*\\\n         * Paper.gradient\n         [ method ]\n         **\n         * Creates a gradient element\n         **\n         - gradient (string) gradient descriptor\n         > Gradient Descriptor\n         * The gradient descriptor is an expression formatted as\n         * follows: `<type>(<coords>)<colors>`.  The `<type>` can be\n         * either linear or radial.  The uppercase `L` or `R` letters\n         * indicate absolute coordinates offset from the SVG surface.\n         * Lowercase `l` or `r` letters indicate coordinates\n         * calculated relative to the element to which the gradient is\n         * applied.  Coordinates specify a linear gradient vector as\n         * `x1`, `y1`, `x2`, `y2`, or a radial gradient as `cx`, `cy`,\n         * `r` and optional `fx`, `fy` specifying a focal point away\n         * from the center of the circle. Specify `<colors>` as a list\n         * of dash-separated CSS color values.  Each color may be\n         * followed by a custom offset value, separated with a colon\n         * character.\n         > Examples\n         * Linear gradient, relative from top-left corner to bottom-right\n         * corner, from black through red to white:\n         | var g = paper.gradient(\"l(0, 0, 1, 1)#000-#f00-#fff\");\n         * Linear gradient, absolute from (0, 0) to (100, 100), from black\n         * through red at 25% to white:\n         | var g = paper.gradient(\"L(0, 0, 100, 100)#000-#f00:25-#fff\");\n         * Radial gradient, relative from the center of the element with radius\n         * half the width, from black to white:\n         | var g = paper.gradient(\"r(0.5, 0.5, 0.5)#000-#fff\");\n         * To apply the gradient:\n         | paper.circle(50, 50, 40).attr({\n         |     fill: g\n         | });\n         = (object) the `gradient` element\n        \\*/\n        proto.gradient = function (str) {\n            return gradient(this.defs, str);\n        };\n        proto.gradientLinear = function (x1, y1, x2, y2) {\n            return gradientLinear(this.defs, x1, y1, x2, y2);\n        };\n        proto.gradientRadial = function (cx, cy, r, fx, fy) {\n            return gradientRadial(this.defs, cx, cy, r, fx, fy);\n        };\n        /*\\\n         * Paper.toString\n         [ method ]\n         **\n         * Returns SVG code for the @Paper\n         = (string) SVG code for the @Paper\n        \\*/\n        proto.toString = function () {\n            var doc = this.node.ownerDocument,\n                f = doc.createDocumentFragment(),\n                d = doc.createElement(\"div\"),\n                svg = this.node.cloneNode(true),\n                res;\n            f.appendChild(d);\n            d.appendChild(svg);\n            Snap._.$(svg, {xmlns: \"http://www.w3.org/2000/svg\"});\n            res = d.innerHTML;\n            f.removeChild(f.firstChild);\n            return res;\n        };\n        /*\\\n         * Paper.toDataURL\n         [ method ]\n         **\n         * Returns SVG code for the @Paper as Data URI string.\n         = (string) Data URI string\n        \\*/\n        proto.toDataURL = function () {\n            if (window && window.btoa) {\n                return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(this)));\n            }\n        };\n        /*\\\n         * Paper.clear\n         [ method ]\n         **\n         * Removes all child nodes of the paper, except <defs>.\n        \\*/\n        proto.clear = function () {\n            var node = this.node.firstChild,\n                next;\n            while (node) {\n                next = node.nextSibling;\n                if (node.tagName != \"defs\") {\n                    node.parentNode.removeChild(node);\n                } else {\n                    proto.clear.call({node: node});\n                }\n                node = next;\n            }\n        };\n    }());\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        clone = Snap._.clone,\n        has = \"hasOwnProperty\",\n        p2s = /,?([a-z]),?/gi,\n        toFloat = parseFloat,\n        math = Math,\n        PI = math.PI,\n        mmin = math.min,\n        mmax = math.max,\n        pow = math.pow,\n        abs = math.abs;\n    function paths(ps) {\n        var p = paths.ps = paths.ps || {};\n        if (p[ps]) {\n            p[ps].sleep = 100;\n        } else {\n            p[ps] = {\n                sleep: 100\n            };\n        }\n        setTimeout(function () {\n            for (var key in p) if (p[has](key) && key != ps) {\n                p[key].sleep--;\n                !p[key].sleep && delete p[key];\n            }\n        });\n        return p[ps];\n    }\n    function box(x, y, width, height) {\n        if (x == null) {\n            x = y = width = height = 0;\n        }\n        if (y == null) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            x = x.x;\n        }\n        return {\n            x: x,\n            y: y,\n            width: width,\n            w: width,\n            height: height,\n            h: height,\n            x2: x + width,\n            y2: y + height,\n            cx: x + width / 2,\n            cy: y + height / 2,\n            r1: math.min(width, height) / 2,\n            r2: math.max(width, height) / 2,\n            r0: math.sqrt(width * width + height * height) / 2,\n            path: rectPath(x, y, width, height),\n            vb: [x, y, width, height].join(\" \")\n        };\n    }\n    function toString() {\n        return this.join(\",\").replace(p2s, \"$1\");\n    }\n    function pathClone(pathArray) {\n        var res = clone(pathArray);\n        res.toString = toString;\n        return res;\n    }\n    function getPointAtSegmentLength(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {\n        if (length == null) {\n            return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);\n        } else {\n            return findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y,\n                getTotLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));\n        }\n    }\n    function getLengthFactory(istotal, subpath) {\n        function O(val) {\n            return +(+val).toFixed(3);\n        }\n        return Snap._.cacher(function (path, length, onlystart) {\n            if (path instanceof Element) {\n                path = path.attr(\"d\");\n            }\n            path = path2curve(path);\n            var x, y, p, l, sp = \"\", subpaths = {}, point,\n                len = 0;\n            for (var i = 0, ii = path.length; i < ii; i++) {\n                p = path[i];\n                if (p[0] == \"M\") {\n                    x = +p[1];\n                    y = +p[2];\n                } else {\n                    l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n                    if (len + l > length) {\n                        if (subpath && !subpaths.start) {\n                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n                            sp += [\n                                \"C\" + O(point.start.x),\n                                O(point.start.y),\n                                O(point.m.x),\n                                O(point.m.y),\n                                O(point.x),\n                                O(point.y)\n                            ];\n                            if (onlystart) {return sp;}\n                            subpaths.start = sp;\n                            sp = [\n                                \"M\" + O(point.x),\n                                O(point.y) + \"C\" + O(point.n.x),\n                                O(point.n.y),\n                                O(point.end.x),\n                                O(point.end.y),\n                                O(p[5]),\n                                O(p[6])\n                            ].join();\n                            len += l;\n                            x = +p[5];\n                            y = +p[6];\n                            continue;\n                        }\n                        if (!istotal && !subpath) {\n                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n                            return point;\n                        }\n                    }\n                    len += l;\n                    x = +p[5];\n                    y = +p[6];\n                }\n                sp += p.shift() + p;\n            }\n            subpaths.end = sp;\n            point = istotal ? len : subpath ? subpaths : findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);\n            return point;\n        }, null, Snap._.clone);\n    }\n    var getTotalLength = getLengthFactory(1),\n        getPointAtLength = getLengthFactory(),\n        getSubpathsAtLength = getLengthFactory(0, 1);\n    function findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n        var t1 = 1 - t,\n            t13 = pow(t1, 3),\n            t12 = pow(t1, 2),\n            t2 = t * t,\n            t3 = t2 * t,\n            x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n            y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,\n            mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),\n            my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),\n            nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),\n            ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),\n            ax = t1 * p1x + t * c1x,\n            ay = t1 * p1y + t * c1y,\n            cx = t1 * c2x + t * p2x,\n            cy = t1 * c2y + t * p2y,\n            alpha = 90 - math.atan2(mx - nx, my - ny) * 180 / PI;\n        // (mx > nx || my < ny) && (alpha += 180);\n        return {\n            x: x,\n            y: y,\n            m: {x: mx, y: my},\n            n: {x: nx, y: ny},\n            start: {x: ax, y: ay},\n            end: {x: cx, y: cy},\n            alpha: alpha\n        };\n    }\n    function bezierBBox(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n        if (!Snap.is(p1x, \"array\")) {\n            p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];\n        }\n        var bbox = curveDim.apply(null, p1x);\n        return box(\n            bbox.min.x,\n            bbox.min.y,\n            bbox.max.x - bbox.min.x,\n            bbox.max.y - bbox.min.y\n        );\n    }\n    function isPointInsideBBox(bbox, x, y) {\n        return  x >= bbox.x &&\n                x <= bbox.x + bbox.width &&\n                y >= bbox.y &&\n                y <= bbox.y + bbox.height;\n    }\n    function isBBoxIntersect(bbox1, bbox2) {\n        bbox1 = box(bbox1);\n        bbox2 = box(bbox2);\n        return isPointInsideBBox(bbox2, bbox1.x, bbox1.y)\n            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y)\n            || isPointInsideBBox(bbox2, bbox1.x, bbox1.y2)\n            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2)\n            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y)\n            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y)\n            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y2)\n            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2)\n            || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x\n                || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)\n            && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y\n                || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n    }\n    function base3(t, p1, p2, p3, p4) {\n        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n            t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n        return t * t2 - 3 * p1 + 3 * p2;\n    }\n    function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n        if (z == null) {\n            z = 1;\n        }\n        z = z > 1 ? 1 : z < 0 ? 0 : z;\n        var z2 = z / 2,\n            n = 12,\n            Tvalues = [-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],\n            Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],\n            sum = 0;\n        for (var i = 0; i < n; i++) {\n            var ct = z2 * Tvalues[i] + z2,\n                xbase = base3(ct, x1, x2, x3, x4),\n                ybase = base3(ct, y1, y2, y3, y4),\n                comb = xbase * xbase + ybase * ybase;\n            sum += Cvalues[i] * math.sqrt(comb);\n        }\n        return z2 * sum;\n    }\n    function getTotLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {\n        if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {\n            return;\n        }\n        var t = 1,\n            step = t / 2,\n            t2 = t - step,\n            l,\n            e = .01;\n        l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n        while (abs(l - ll) > e) {\n            step /= 2;\n            t2 += (l < ll ? 1 : -1) * step;\n            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n        }\n        return t2;\n    }\n    function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {\n        if (\n            mmax(x1, x2) < mmin(x3, x4) ||\n            mmin(x1, x2) > mmax(x3, x4) ||\n            mmax(y1, y2) < mmin(y3, y4) ||\n            mmin(y1, y2) > mmax(y3, y4)\n        ) {\n            return;\n        }\n        var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n            ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n            denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n        if (!denominator) {\n            return;\n        }\n        var px = nx / denominator,\n            py = ny / denominator,\n            px2 = +px.toFixed(2),\n            py2 = +py.toFixed(2);\n        if (\n            px2 < +mmin(x1, x2).toFixed(2) ||\n            px2 > +mmax(x1, x2).toFixed(2) ||\n            px2 < +mmin(x3, x4).toFixed(2) ||\n            px2 > +mmax(x3, x4).toFixed(2) ||\n            py2 < +mmin(y1, y2).toFixed(2) ||\n            py2 > +mmax(y1, y2).toFixed(2) ||\n            py2 < +mmin(y3, y4).toFixed(2) ||\n            py2 > +mmax(y3, y4).toFixed(2)\n        ) {\n            return;\n        }\n        return {x: px, y: py};\n    }\n    function inter(bez1, bez2) {\n        return interHelper(bez1, bez2);\n    }\n    function interCount(bez1, bez2) {\n        return interHelper(bez1, bez2, 1);\n    }\n    function interHelper(bez1, bez2, justCount) {\n        var bbox1 = bezierBBox(bez1),\n            bbox2 = bezierBBox(bez2);\n        if (!isBBoxIntersect(bbox1, bbox2)) {\n            return justCount ? 0 : [];\n        }\n        var l1 = bezlen.apply(0, bez1),\n            l2 = bezlen.apply(0, bez2),\n            n1 = ~~(l1 / 8),\n            n2 = ~~(l2 / 8),\n            dots1 = [],\n            dots2 = [],\n            xy = {},\n            res = justCount ? 0 : [];\n        for (var i = 0; i < n1 + 1; i++) {\n            var p = findDotsAtSegment.apply(0, bez1.concat(i / n1));\n            dots1.push({x: p.x, y: p.y, t: i / n1});\n        }\n        for (i = 0; i < n2 + 1; i++) {\n            p = findDotsAtSegment.apply(0, bez2.concat(i / n2));\n            dots2.push({x: p.x, y: p.y, t: i / n2});\n        }\n        for (i = 0; i < n1; i++) {\n            for (var j = 0; j < n2; j++) {\n                var di = dots1[i],\n                    di1 = dots1[i + 1],\n                    dj = dots2[j],\n                    dj1 = dots2[j + 1],\n                    ci = abs(di1.x - di.x) < .001 ? \"y\" : \"x\",\n                    cj = abs(dj1.x - dj.x) < .001 ? \"y\" : \"x\",\n                    is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);\n                if (is) {\n                    if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {\n                        continue;\n                    }\n                    xy[is.x.toFixed(4)] = is.y.toFixed(4);\n                    var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n                        t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n                    if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n                        if (justCount) {\n                            res++;\n                        } else {\n                            res.push({\n                                x: is.x,\n                                y: is.y,\n                                t1: t1,\n                                t2: t2\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    function pathIntersection(path1, path2) {\n        return interPathHelper(path1, path2);\n    }\n    function pathIntersectionNumber(path1, path2) {\n        return interPathHelper(path1, path2, 1);\n    }\n    function interPathHelper(path1, path2, justCount) {\n        path1 = path2curve(path1);\n        path2 = path2curve(path2);\n        var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,\n            res = justCount ? 0 : [];\n        for (var i = 0, ii = path1.length; i < ii; i++) {\n            var pi = path1[i];\n            if (pi[0] == \"M\") {\n                x1 = x1m = pi[1];\n                y1 = y1m = pi[2];\n            } else {\n                if (pi[0] == \"C\") {\n                    bez1 = [x1, y1].concat(pi.slice(1));\n                    x1 = bez1[6];\n                    y1 = bez1[7];\n                } else {\n                    bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n                    x1 = x1m;\n                    y1 = y1m;\n                }\n                for (var j = 0, jj = path2.length; j < jj; j++) {\n                    var pj = path2[j];\n                    if (pj[0] == \"M\") {\n                        x2 = x2m = pj[1];\n                        y2 = y2m = pj[2];\n                    } else {\n                        if (pj[0] == \"C\") {\n                            bez2 = [x2, y2].concat(pj.slice(1));\n                            x2 = bez2[6];\n                            y2 = bez2[7];\n                        } else {\n                            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n                            x2 = x2m;\n                            y2 = y2m;\n                        }\n                        var intr = interHelper(bez1, bez2, justCount);\n                        if (justCount) {\n                            res += intr;\n                        } else {\n                            for (var k = 0, kk = intr.length; k < kk; k++) {\n                                intr[k].segment1 = i;\n                                intr[k].segment2 = j;\n                                intr[k].bez1 = bez1;\n                                intr[k].bez2 = bez2;\n                            }\n                            res = res.concat(intr);\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    function isPointInsidePath(path, x, y) {\n        var bbox = pathBBox(path);\n        return isPointInsideBBox(bbox, x, y) &&\n               interPathHelper(path, [[\"M\", x, y], [\"H\", bbox.x2 + 10]], 1) % 2 == 1;\n    }\n    function pathBBox(path) {\n        var pth = paths(path);\n        if (pth.bbox) {\n            return clone(pth.bbox);\n        }\n        if (!path) {\n            return box();\n        }\n        path = path2curve(path);\n        var x = 0,\n            y = 0,\n            X = [],\n            Y = [],\n            p;\n        for (var i = 0, ii = path.length; i < ii; i++) {\n            p = path[i];\n            if (p[0] == \"M\") {\n                x = p[1];\n                y = p[2];\n                X.push(x);\n                Y.push(y);\n            } else {\n                var dim = curveDim(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n                X = X.concat(dim.min.x, dim.max.x);\n                Y = Y.concat(dim.min.y, dim.max.y);\n                x = p[5];\n                y = p[6];\n            }\n        }\n        var xmin = mmin.apply(0, X),\n            ymin = mmin.apply(0, Y),\n            xmax = mmax.apply(0, X),\n            ymax = mmax.apply(0, Y),\n            bb = box(xmin, ymin, xmax - xmin, ymax - ymin);\n        pth.bbox = clone(bb);\n        return bb;\n    }\n    function rectPath(x, y, w, h, r) {\n        if (r) {\n            return [\n                [\"M\", +x + +r, y],\n                [\"l\", w - r * 2, 0],\n                [\"a\", r, r, 0, 0, 1, r, r],\n                [\"l\", 0, h - r * 2],\n                [\"a\", r, r, 0, 0, 1, -r, r],\n                [\"l\", r * 2 - w, 0],\n                [\"a\", r, r, 0, 0, 1, -r, -r],\n                [\"l\", 0, r * 2 - h],\n                [\"a\", r, r, 0, 0, 1, r, -r],\n                [\"z\"]\n            ];\n        }\n        var res = [[\"M\", x, y], [\"l\", w, 0], [\"l\", 0, h], [\"l\", -w, 0], [\"z\"]];\n        res.toString = toString;\n        return res;\n    }\n    function ellipsePath(x, y, rx, ry, a) {\n        if (a == null && ry == null) {\n            ry = rx;\n        }\n        x = +x;\n        y = +y;\n        rx = +rx;\n        ry = +ry;\n        if (a != null) {\n            var rad = Math.PI / 180,\n                x1 = x + rx * Math.cos(-ry * rad),\n                x2 = x + rx * Math.cos(-a * rad),\n                y1 = y + rx * Math.sin(-ry * rad),\n                y2 = y + rx * Math.sin(-a * rad),\n                res = [[\"M\", x1, y1], [\"A\", rx, rx, 0, +(a - ry > 180), 0, x2, y2]];\n        } else {\n            res = [\n                [\"M\", x, y],\n                [\"m\", 0, -ry],\n                [\"a\", rx, ry, 0, 1, 1, 0, 2 * ry],\n                [\"a\", rx, ry, 0, 1, 1, 0, -2 * ry],\n                [\"z\"]\n            ];\n        }\n        res.toString = toString;\n        return res;\n    }\n    var unit2px = Snap._unit2px,\n        getPath = {\n        path: function (el) {\n            return el.attr(\"path\");\n        },\n        circle: function (el) {\n            var attr = unit2px(el);\n            return ellipsePath(attr.cx, attr.cy, attr.r);\n        },\n        ellipse: function (el) {\n            var attr = unit2px(el);\n            return ellipsePath(attr.cx || 0, attr.cy || 0, attr.rx, attr.ry);\n        },\n        rect: function (el) {\n            var attr = unit2px(el);\n            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height, attr.rx, attr.ry);\n        },\n        image: function (el) {\n            var attr = unit2px(el);\n            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height);\n        },\n        line: function (el) {\n            return \"M\" + [el.attr(\"x1\") || 0, el.attr(\"y1\") || 0, el.attr(\"x2\"), el.attr(\"y2\")];\n        },\n        polyline: function (el) {\n            return \"M\" + el.attr(\"points\");\n        },\n        polygon: function (el) {\n            return \"M\" + el.attr(\"points\") + \"z\";\n        },\n        deflt: function (el) {\n            var bbox = el.node.getBBox();\n            return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n        }\n    };\n    function pathToRelative(pathArray) {\n        var pth = paths(pathArray),\n            lowerCase = String.prototype.toLowerCase;\n        if (pth.rel) {\n            return pathClone(pth.rel);\n        }\n        if (!Snap.is(pathArray, \"array\") || !Snap.is(pathArray && pathArray[0], \"array\")) {\n            pathArray = Snap.parsePathString(pathArray);\n        }\n        var res = [],\n            x = 0,\n            y = 0,\n            mx = 0,\n            my = 0,\n            start = 0;\n        if (pathArray[0][0] == \"M\") {\n            x = pathArray[0][1];\n            y = pathArray[0][2];\n            mx = x;\n            my = y;\n            start++;\n            res.push([\"M\", x, y]);\n        }\n        for (var i = start, ii = pathArray.length; i < ii; i++) {\n            var r = res[i] = [],\n                pa = pathArray[i];\n            if (pa[0] != lowerCase.call(pa[0])) {\n                r[0] = lowerCase.call(pa[0]);\n                switch (r[0]) {\n                    case \"a\":\n                        r[1] = pa[1];\n                        r[2] = pa[2];\n                        r[3] = pa[3];\n                        r[4] = pa[4];\n                        r[5] = pa[5];\n                        r[6] = +(pa[6] - x).toFixed(3);\n                        r[7] = +(pa[7] - y).toFixed(3);\n                        break;\n                    case \"v\":\n                        r[1] = +(pa[1] - y).toFixed(3);\n                        break;\n                    case \"m\":\n                        mx = pa[1];\n                        my = pa[2];\n                    default:\n                        for (var j = 1, jj = pa.length; j < jj; j++) {\n                            r[j] = +(pa[j] - (j % 2 ? x : y)).toFixed(3);\n                        }\n                }\n            } else {\n                r = res[i] = [];\n                if (pa[0] == \"m\") {\n                    mx = pa[1] + x;\n                    my = pa[2] + y;\n                }\n                for (var k = 0, kk = pa.length; k < kk; k++) {\n                    res[i][k] = pa[k];\n                }\n            }\n            var len = res[i].length;\n            switch (res[i][0]) {\n                case \"z\":\n                    x = mx;\n                    y = my;\n                    break;\n                case \"h\":\n                    x += +res[i][len - 1];\n                    break;\n                case \"v\":\n                    y += +res[i][len - 1];\n                    break;\n                default:\n                    x += +res[i][len - 2];\n                    y += +res[i][len - 1];\n            }\n        }\n        res.toString = toString;\n        pth.rel = pathClone(res);\n        return res;\n    }\n    function pathToAbsolute(pathArray) {\n        var pth = paths(pathArray);\n        if (pth.abs) {\n            return pathClone(pth.abs);\n        }\n        if (!is(pathArray, \"array\") || !is(pathArray && pathArray[0], \"array\")) { // rough assumption\n            pathArray = Snap.parsePathString(pathArray);\n        }\n        if (!pathArray || !pathArray.length) {\n            return [[\"M\", 0, 0]];\n        }\n        var res = [],\n            x = 0,\n            y = 0,\n            mx = 0,\n            my = 0,\n            start = 0,\n            pa0;\n        if (pathArray[0][0] == \"M\") {\n            x = +pathArray[0][1];\n            y = +pathArray[0][2];\n            mx = x;\n            my = y;\n            start++;\n            res[0] = [\"M\", x, y];\n        }\n        var crz = pathArray.length == 3 &&\n            pathArray[0][0] == \"M\" &&\n            pathArray[1][0].toUpperCase() == \"R\" &&\n            pathArray[2][0].toUpperCase() == \"Z\";\n        for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n            res.push(r = []);\n            pa = pathArray[i];\n            pa0 = pa[0];\n            if (pa0 != pa0.toUpperCase()) {\n                r[0] = pa0.toUpperCase();\n                switch (r[0]) {\n                    case \"A\":\n                        r[1] = pa[1];\n                        r[2] = pa[2];\n                        r[3] = pa[3];\n                        r[4] = pa[4];\n                        r[5] = pa[5];\n                        r[6] = +pa[6] + x;\n                        r[7] = +pa[7] + y;\n                        break;\n                    case \"V\":\n                        r[1] = +pa[1] + y;\n                        break;\n                    case \"H\":\n                        r[1] = +pa[1] + x;\n                        break;\n                    case \"R\":\n                        var dots = [x, y].concat(pa.slice(1));\n                        for (var j = 2, jj = dots.length; j < jj; j++) {\n                            dots[j] = +dots[j] + x;\n                            dots[++j] = +dots[j] + y;\n                        }\n                        res.pop();\n                        res = res.concat(catmullRom2bezier(dots, crz));\n                        break;\n                    case \"O\":\n                        res.pop();\n                        dots = ellipsePath(x, y, pa[1], pa[2]);\n                        dots.push(dots[0]);\n                        res = res.concat(dots);\n                        break;\n                    case \"U\":\n                        res.pop();\n                        res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n                        r = [\"U\"].concat(res[res.length - 1].slice(-2));\n                        break;\n                    case \"M\":\n                        mx = +pa[1] + x;\n                        my = +pa[2] + y;\n                    default:\n                        for (j = 1, jj = pa.length; j < jj; j++) {\n                            r[j] = +pa[j] + (j % 2 ? x : y);\n                        }\n                }\n            } else if (pa0 == \"R\") {\n                dots = [x, y].concat(pa.slice(1));\n                res.pop();\n                res = res.concat(catmullRom2bezier(dots, crz));\n                r = [\"R\"].concat(pa.slice(-2));\n            } else if (pa0 == \"O\") {\n                res.pop();\n                dots = ellipsePath(x, y, pa[1], pa[2]);\n                dots.push(dots[0]);\n                res = res.concat(dots);\n            } else if (pa0 == \"U\") {\n                res.pop();\n                res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n                r = [\"U\"].concat(res[res.length - 1].slice(-2));\n            } else {\n                for (var k = 0, kk = pa.length; k < kk; k++) {\n                    r[k] = pa[k];\n                }\n            }\n            pa0 = pa0.toUpperCase();\n            if (pa0 != \"O\") {\n                switch (r[0]) {\n                    case \"Z\":\n                        x = +mx;\n                        y = +my;\n                        break;\n                    case \"H\":\n                        x = r[1];\n                        break;\n                    case \"V\":\n                        y = r[1];\n                        break;\n                    case \"M\":\n                        mx = r[r.length - 2];\n                        my = r[r.length - 1];\n                    default:\n                        x = r[r.length - 2];\n                        y = r[r.length - 1];\n                }\n            }\n        }\n        res.toString = toString;\n        pth.abs = pathClone(res);\n        return res;\n    }\n    function l2c(x1, y1, x2, y2) {\n        return [x1, y1, x2, y2, x2, y2];\n    }\n    function q2c(x1, y1, ax, ay, x2, y2) {\n        var _13 = 1 / 3,\n            _23 = 2 / 3;\n        return [\n                _13 * x1 + _23 * ax,\n                _13 * y1 + _23 * ay,\n                _13 * x2 + _23 * ax,\n                _13 * y2 + _23 * ay,\n                x2,\n                y2\n            ];\n    }\n    function a2c(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n        // for more information of where this math came from visit:\n        // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n        var _120 = PI * 120 / 180,\n            rad = PI / 180 * (+angle || 0),\n            res = [],\n            xy,\n            rotate = Snap._.cacher(function (x, y, rad) {\n                var X = x * math.cos(rad) - y * math.sin(rad),\n                    Y = x * math.sin(rad) + y * math.cos(rad);\n                return {x: X, y: Y};\n            });\n        if (!rx || !ry) {\n            return [x1, y1, x2, y2, x2, y2];\n        }\n        if (!recursive) {\n            xy = rotate(x1, y1, -rad);\n            x1 = xy.x;\n            y1 = xy.y;\n            xy = rotate(x2, y2, -rad);\n            x2 = xy.x;\n            y2 = xy.y;\n            var cos = math.cos(PI / 180 * angle),\n                sin = math.sin(PI / 180 * angle),\n                x = (x1 - x2) / 2,\n                y = (y1 - y2) / 2;\n            var h = x * x / (rx * rx) + y * y / (ry * ry);\n            if (h > 1) {\n                h = math.sqrt(h);\n                rx = h * rx;\n                ry = h * ry;\n            }\n            var rx2 = rx * rx,\n                ry2 = ry * ry,\n                k = (large_arc_flag == sweep_flag ? -1 : 1) *\n                    math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n                cx = k * rx * y / ry + (x1 + x2) / 2,\n                cy = k * -ry * x / rx + (y1 + y2) / 2,\n                f1 = math.asin(((y1 - cy) / ry).toFixed(9)),\n                f2 = math.asin(((y2 - cy) / ry).toFixed(9));\n\n            f1 = x1 < cx ? PI - f1 : f1;\n            f2 = x2 < cx ? PI - f2 : f2;\n            f1 < 0 && (f1 = PI * 2 + f1);\n            f2 < 0 && (f2 = PI * 2 + f2);\n            if (sweep_flag && f1 > f2) {\n                f1 = f1 - PI * 2;\n            }\n            if (!sweep_flag && f2 > f1) {\n                f2 = f2 - PI * 2;\n            }\n        } else {\n            f1 = recursive[0];\n            f2 = recursive[1];\n            cx = recursive[2];\n            cy = recursive[3];\n        }\n        var df = f2 - f1;\n        if (abs(df) > _120) {\n            var f2old = f2,\n                x2old = x2,\n                y2old = y2;\n            f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n            x2 = cx + rx * math.cos(f2);\n            y2 = cy + ry * math.sin(f2);\n            res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n        }\n        df = f2 - f1;\n        var c1 = math.cos(f1),\n            s1 = math.sin(f1),\n            c2 = math.cos(f2),\n            s2 = math.sin(f2),\n            t = math.tan(df / 4),\n            hx = 4 / 3 * rx * t,\n            hy = 4 / 3 * ry * t,\n            m1 = [x1, y1],\n            m2 = [x1 + hx * s1, y1 - hy * c1],\n            m3 = [x2 + hx * s2, y2 - hy * c2],\n            m4 = [x2, y2];\n        m2[0] = 2 * m1[0] - m2[0];\n        m2[1] = 2 * m1[1] - m2[1];\n        if (recursive) {\n            return [m2, m3, m4].concat(res);\n        } else {\n            res = [m2, m3, m4].concat(res).join().split(\",\");\n            var newres = [];\n            for (var i = 0, ii = res.length; i < ii; i++) {\n                newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n            }\n            return newres;\n        }\n    }\n    function findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n        var t1 = 1 - t;\n        return {\n            x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t * c1x + t1 * 3 * t * t * c2x + pow(t, 3) * p2x,\n            y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t * c1y + t1 * 3 * t * t * c2y + pow(t, 3) * p2y\n        };\n    }\n\n    // Returns bounding box of cubic bezier curve.\n    // Source: http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n    // Original version: NISHIO Hirokazu\n    // Modifications: https://github.com/timo22345\n    function curveDim(x0, y0, x1, y1, x2, y2, x3, y3) {\n        var tvalues = [],\n            bounds = [[], []],\n            a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n        for (var i = 0; i < 2; ++i) {\n            if (i == 0) {\n                b = 6 * x0 - 12 * x1 + 6 * x2;\n                a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n                c = 3 * x1 - 3 * x0;\n            } else {\n                b = 6 * y0 - 12 * y1 + 6 * y2;\n                a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n                c = 3 * y1 - 3 * y0;\n            }\n            if (abs(a) < 1e-12) {\n                if (abs(b) < 1e-12) {\n                    continue;\n                }\n                t = -c / b;\n                if (0 < t && t < 1) {\n                    tvalues.push(t);\n                }\n                continue;\n            }\n            b2ac = b * b - 4 * c * a;\n            sqrtb2ac = math.sqrt(b2ac);\n            if (b2ac < 0) {\n                continue;\n            }\n            t1 = (-b + sqrtb2ac) / (2 * a);\n            if (0 < t1 && t1 < 1) {\n                tvalues.push(t1);\n            }\n            t2 = (-b - sqrtb2ac) / (2 * a);\n            if (0 < t2 && t2 < 1) {\n                tvalues.push(t2);\n            }\n        }\n\n        var x, y, j = tvalues.length,\n            jlen = j,\n            mt;\n        while (j--) {\n            t = tvalues[j];\n            mt = 1 - t;\n            bounds[0][j] = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;\n            bounds[1][j] = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;\n        }\n\n        bounds[0][jlen] = x0;\n        bounds[1][jlen] = y0;\n        bounds[0][jlen + 1] = x3;\n        bounds[1][jlen + 1] = y3;\n        bounds[0].length = bounds[1].length = jlen + 2;\n\n\n        return {\n          min: {x: mmin.apply(0, bounds[0]), y: mmin.apply(0, bounds[1])},\n          max: {x: mmax.apply(0, bounds[0]), y: mmax.apply(0, bounds[1])}\n        };\n    }\n\n    function path2curve(path, path2) {\n        var pth = !path2 && paths(path);\n        if (!path2 && pth.curve) {\n            return pathClone(pth.curve);\n        }\n        var p = pathToAbsolute(path),\n            p2 = path2 && pathToAbsolute(path2),\n            attrs = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n            attrs2 = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n            processPath = function (path, d, pcom) {\n                var nx, ny;\n                if (!path) {\n                    return [\"C\", d.x, d.y, d.x, d.y, d.x, d.y];\n                }\n                !(path[0] in {T: 1, Q: 1}) && (d.qx = d.qy = null);\n                switch (path[0]) {\n                    case \"M\":\n                        d.X = path[1];\n                        d.Y = path[2];\n                        break;\n                    case \"A\":\n                        path = [\"C\"].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));\n                        break;\n                    case \"S\":\n                        if (pcom == \"C\" || pcom == \"S\") { // In \"S\" case we have to take into account, if the previous command is C/S.\n                            nx = d.x * 2 - d.bx;          // And reflect the previous\n                            ny = d.y * 2 - d.by;          // command's control point relative to the current point.\n                        }\n                        else {                            // or some else or nothing\n                            nx = d.x;\n                            ny = d.y;\n                        }\n                        path = [\"C\", nx, ny].concat(path.slice(1));\n                        break;\n                    case \"T\":\n                        if (pcom == \"Q\" || pcom == \"T\") { // In \"T\" case we have to take into account, if the previous command is Q/T.\n                            d.qx = d.x * 2 - d.qx;        // And make a reflection similar\n                            d.qy = d.y * 2 - d.qy;        // to case \"S\".\n                        }\n                        else {                            // or something else or nothing\n                            d.qx = d.x;\n                            d.qy = d.y;\n                        }\n                        path = [\"C\"].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n                        break;\n                    case \"Q\":\n                        d.qx = path[1];\n                        d.qy = path[2];\n                        path = [\"C\"].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n                        break;\n                    case \"L\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], path[2]));\n                        break;\n                    case \"H\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], d.y));\n                        break;\n                    case \"V\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, d.x, path[1]));\n                        break;\n                    case \"Z\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, d.X, d.Y));\n                        break;\n                }\n                return path;\n            },\n            fixArc = function (pp, i) {\n                if (pp[i].length > 7) {\n                    pp[i].shift();\n                    var pi = pp[i];\n                    while (pi.length) {\n                        pcoms1[i] = \"A\"; // if created multiple C:s, their original seg is saved\n                        p2 && (pcoms2[i] = \"A\"); // the same as above\n                        pp.splice(i++, 0, [\"C\"].concat(pi.splice(0, 6)));\n                    }\n                    pp.splice(i, 1);\n                    ii = mmax(p.length, p2 && p2.length || 0);\n                }\n            },\n            fixM = function (path1, path2, a1, a2, i) {\n                if (path1 && path2 && path1[i][0] == \"M\" && path2[i][0] != \"M\") {\n                    path2.splice(i, 0, [\"M\", a2.x, a2.y]);\n                    a1.bx = 0;\n                    a1.by = 0;\n                    a1.x = path1[i][1];\n                    a1.y = path1[i][2];\n                    ii = mmax(p.length, p2 && p2.length || 0);\n                }\n            },\n            pcoms1 = [], // path commands of original path p\n            pcoms2 = [], // path commands of original path p2\n            pfirst = \"\", // temporary holder for original path command\n            pcom = \"\"; // holder for previous path command of original path\n        for (var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {\n            p[i] && (pfirst = p[i][0]); // save current path command\n\n            if (pfirst != \"C\") // C is not saved yet, because it may be result of conversion\n            {\n                pcoms1[i] = pfirst; // Save current path command\n                i && ( pcom = pcoms1[i - 1]); // Get previous path command pcom\n            }\n            p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n\n            if (pcoms1[i] != \"A\" && pfirst == \"C\") pcoms1[i] = \"C\"; // A is the only command\n            // which may produce multiple C:s\n            // so we have to make sure that C is also C in original path\n\n            fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\n            if (p2) { // the same procedures is done to p2\n                p2[i] && (pfirst = p2[i][0]);\n                if (pfirst != \"C\") {\n                    pcoms2[i] = pfirst;\n                    i && (pcom = pcoms2[i - 1]);\n                }\n                p2[i] = processPath(p2[i], attrs2, pcom);\n\n                if (pcoms2[i] != \"A\" && pfirst == \"C\") {\n                    pcoms2[i] = \"C\";\n                }\n\n                fixArc(p2, i);\n            }\n            fixM(p, p2, attrs, attrs2, i);\n            fixM(p2, p, attrs2, attrs, i);\n            var seg = p[i],\n                seg2 = p2 && p2[i],\n                seglen = seg.length,\n                seg2len = p2 && seg2.length;\n            attrs.x = seg[seglen - 2];\n            attrs.y = seg[seglen - 1];\n            attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;\n            attrs.by = toFloat(seg[seglen - 3]) || attrs.y;\n            attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);\n            attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);\n            attrs2.x = p2 && seg2[seg2len - 2];\n            attrs2.y = p2 && seg2[seg2len - 1];\n        }\n        if (!p2) {\n            pth.curve = pathClone(p);\n        }\n        return p2 ? [p, p2] : p;\n    }\n    function mapPath(path, matrix) {\n        if (!matrix) {\n            return path;\n        }\n        var x, y, i, j, ii, jj, pathi;\n        path = path2curve(path);\n        for (i = 0, ii = path.length; i < ii; i++) {\n            pathi = path[i];\n            for (j = 1, jj = pathi.length; j < jj; j += 2) {\n                x = matrix.x(pathi[j], pathi[j + 1]);\n                y = matrix.y(pathi[j], pathi[j + 1]);\n                pathi[j] = x;\n                pathi[j + 1] = y;\n            }\n        }\n        return path;\n    }\n\n    // http://schepers.cc/getting-to-the-point\n    function catmullRom2bezier(crp, z) {\n        var d = [];\n        for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n            var p = [\n                        {x: +crp[i - 2], y: +crp[i - 1]},\n                        {x: +crp[i],     y: +crp[i + 1]},\n                        {x: +crp[i + 2], y: +crp[i + 3]},\n                        {x: +crp[i + 4], y: +crp[i + 5]}\n                    ];\n            if (z) {\n                if (!i) {\n                    p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};\n                } else if (iLen - 4 == i) {\n                    p[3] = {x: +crp[0], y: +crp[1]};\n                } else if (iLen - 2 == i) {\n                    p[2] = {x: +crp[0], y: +crp[1]};\n                    p[3] = {x: +crp[2], y: +crp[3]};\n                }\n            } else {\n                if (iLen - 4 == i) {\n                    p[3] = p[2];\n                } else if (!i) {\n                    p[0] = {x: +crp[i], y: +crp[i + 1]};\n                }\n            }\n            d.push([\"C\",\n                  (-p[0].x + 6 * p[1].x + p[2].x) / 6,\n                  (-p[0].y + 6 * p[1].y + p[2].y) / 6,\n                  (p[1].x + 6 * p[2].x - p[3].x) / 6,\n                  (p[1].y + 6*p[2].y - p[3].y) / 6,\n                  p[2].x,\n                  p[2].y\n            ]);\n        }\n\n        return d;\n    }\n\n    // export\n    Snap.path = paths;\n\n    /*\\\n     * Snap.path.getTotalLength\n     [ method ]\n     **\n     * Returns the length of the given path in pixels\n     **\n     - path (string) SVG path string\n     **\n     = (number) length\n    \\*/\n    Snap.path.getTotalLength = getTotalLength;\n    /*\\\n     * Snap.path.getPointAtLength\n     [ method ]\n     **\n     * Returns the coordinates of the point located at the given length along the given path\n     **\n     - path (string) SVG path string\n     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n     **\n     = (object) representation of the point:\n     o {\n     o     x: (number) x coordinate,\n     o     y: (number) y coordinate,\n     o     alpha: (number) angle of derivative\n     o }\n    \\*/\n    Snap.path.getPointAtLength = getPointAtLength;\n    /*\\\n     * Snap.path.getSubpath\n     [ method ]\n     **\n     * Returns the subpath of a given path between given start and end lengths\n     **\n     - path (string) SVG path string\n     - from (number) length, in pixels, from the start of the path to the start of the segment\n     - to (number) length, in pixels, from the start of the path to the end of the segment\n     **\n     = (string) path string definition for the segment\n    \\*/\n    Snap.path.getSubpath = function (path, from, to) {\n        if (this.getTotalLength(path) - to < 1e-6) {\n            return getSubpathsAtLength(path, from).end;\n        }\n        var a = getSubpathsAtLength(path, to, 1);\n        return from ? getSubpathsAtLength(a, from).end : a;\n    };\n    /*\\\n     * Element.getTotalLength\n     [ method ]\n     **\n     * Returns the length of the path in pixels (only works for `path` elements)\n     = (number) length\n    \\*/\n    elproto.getTotalLength = function () {\n        if (this.node.getTotalLength) {\n            return this.node.getTotalLength();\n        }\n    };\n    // SIERRA Element.getPointAtLength()/Element.getTotalLength(): If a <path> is broken into different segments, is the jump distance to the new coordinates set by the _M_ or _m_ commands calculated as part of the path's total length?\n    /*\\\n     * Element.getPointAtLength\n     [ method ]\n     **\n     * Returns coordinates of the point located at the given length on the given path (only works for `path` elements)\n     **\n     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n     **\n     = (object) representation of the point:\n     o {\n     o     x: (number) x coordinate,\n     o     y: (number) y coordinate,\n     o     alpha: (number) angle of derivative\n     o }\n    \\*/\n    elproto.getPointAtLength = function (length) {\n        return getPointAtLength(this.attr(\"d\"), length);\n    };\n    // SIERRA Element.getSubpath(): Similar to the problem for Element.getPointAtLength(). Unclear how this would work for a segmented path. Overall, the concept of _subpath_ and what I'm calling a _segment_ (series of non-_M_ or _Z_ commands) is unclear.\n    /*\\\n     * Element.getSubpath\n     [ method ]\n     **\n     * Returns subpath of a given element from given start and end lengths (only works for `path` elements)\n     **\n     - from (number) length, in pixels, from the start of the path to the start of the segment\n     - to (number) length, in pixels, from the start of the path to the end of the segment\n     **\n     = (string) path string definition for the segment\n    \\*/\n    elproto.getSubpath = function (from, to) {\n        return Snap.path.getSubpath(this.attr(\"d\"), from, to);\n    };\n    Snap._.box = box;\n    /*\\\n     * Snap.path.findDotsAtSegment\n     [ method ]\n     **\n     * Utility method\n     **\n     * Finds dot coordinates on the given cubic beziér curve at the given t\n     - p1x (number) x of the first point of the curve\n     - p1y (number) y of the first point of the curve\n     - c1x (number) x of the first anchor of the curve\n     - c1y (number) y of the first anchor of the curve\n     - c2x (number) x of the second anchor of the curve\n     - c2y (number) y of the second anchor of the curve\n     - p2x (number) x of the second point of the curve\n     - p2y (number) y of the second point of the curve\n     - t (number) position on the curve (0..1)\n     = (object) point information in format:\n     o {\n     o     x: (number) x coordinate of the point,\n     o     y: (number) y coordinate of the point,\n     o     m: {\n     o         x: (number) x coordinate of the left anchor,\n     o         y: (number) y coordinate of the left anchor\n     o     },\n     o     n: {\n     o         x: (number) x coordinate of the right anchor,\n     o         y: (number) y coordinate of the right anchor\n     o     },\n     o     start: {\n     o         x: (number) x coordinate of the start of the curve,\n     o         y: (number) y coordinate of the start of the curve\n     o     },\n     o     end: {\n     o         x: (number) x coordinate of the end of the curve,\n     o         y: (number) y coordinate of the end of the curve\n     o     },\n     o     alpha: (number) angle of the curve derivative at the point\n     o }\n    \\*/\n    Snap.path.findDotsAtSegment = findDotsAtSegment;\n    /*\\\n     * Snap.path.bezierBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns the bounding box of a given cubic beziér curve\n     - p1x (number) x of the first point of the curve\n     - p1y (number) y of the first point of the curve\n     - c1x (number) x of the first anchor of the curve\n     - c1y (number) y of the first anchor of the curve\n     - c2x (number) x of the second anchor of the curve\n     - c2y (number) y of the second anchor of the curve\n     - p2x (number) x of the second point of the curve\n     - p2y (number) y of the second point of the curve\n     * or\n     - bez (array) array of six points for beziér curve\n     = (object) bounding box\n     o {\n     o     x: (number) x coordinate of the left top point of the box,\n     o     y: (number) y coordinate of the left top point of the box,\n     o     x2: (number) x coordinate of the right bottom point of the box,\n     o     y2: (number) y coordinate of the right bottom point of the box,\n     o     width: (number) width of the box,\n     o     height: (number) height of the box\n     o }\n    \\*/\n    Snap.path.bezierBBox = bezierBBox;\n    /*\\\n     * Snap.path.isPointInsideBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if given point is inside bounding box\n     - bbox (string) bounding box\n     - x (string) x coordinate of the point\n     - y (string) y coordinate of the point\n     = (boolean) `true` if point is inside\n    \\*/\n    Snap.path.isPointInsideBBox = isPointInsideBBox;\n    Snap.closest = function (x, y, X, Y) {\n        var r = 100,\n            b = box(x - r / 2, y - r / 2, r, r),\n            inside = [],\n            getter = X[0].hasOwnProperty(\"x\") ? function (i) {\n                return {\n                    x: X[i].x,\n                    y: X[i].y\n                };\n            } : function (i) {\n                return {\n                    x: X[i],\n                    y: Y[i]\n                };\n            },\n            found = 0;\n        while (r <= 1e6 && !found) {\n            for (var i = 0, ii = X.length; i < ii; i++) {\n                var xy = getter(i);\n                if (isPointInsideBBox(b, xy.x, xy.y)) {\n                    found++;\n                    inside.push(xy);\n                    break;\n                }\n            }\n            if (!found) {\n                r *= 2;\n                b = box(x - r / 2, y - r / 2, r, r)\n            }\n        }\n        if (r == 1e6) {\n            return;\n        }\n        var len = Infinity,\n            res;\n        for (i = 0, ii = inside.length; i < ii; i++) {\n            var l = Snap.len(x, y, inside[i].x, inside[i].y);\n            if (len > l) {\n                len = l;\n                inside[i].len = l;\n                res = inside[i];\n            }\n        }\n        return res;\n    };\n    /*\\\n     * Snap.path.isBBoxIntersect\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if two bounding boxes intersect\n     - bbox1 (string) first bounding box\n     - bbox2 (string) second bounding box\n     = (boolean) `true` if bounding boxes intersect\n    \\*/\n    Snap.path.isBBoxIntersect = isBBoxIntersect;\n    /*\\\n     * Snap.path.intersection\n     [ method ]\n     **\n     * Utility method\n     **\n     * Finds intersections of two paths\n     - path1 (string) path string\n     - path2 (string) path string\n     = (array) dots of intersection\n     o [\n     o     {\n     o         x: (number) x coordinate of the point,\n     o         y: (number) y coordinate of the point,\n     o         t1: (number) t value for segment of path1,\n     o         t2: (number) t value for segment of path2,\n     o         segment1: (number) order number for segment of path1,\n     o         segment2: (number) order number for segment of path2,\n     o         bez1: (array) eight coordinates representing beziér curve for the segment of path1,\n     o         bez2: (array) eight coordinates representing beziér curve for the segment of path2\n     o     }\n     o ]\n    \\*/\n    Snap.path.intersection = pathIntersection;\n    Snap.path.intersectionNumber = pathIntersectionNumber;\n    /*\\\n     * Snap.path.isPointInside\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if given point is inside a given closed path.\n     *\n     * Note: fill mode doesn’t affect the result of this method.\n     - path (string) path string\n     - x (number) x of the point\n     - y (number) y of the point\n     = (boolean) `true` if point is inside the path\n    \\*/\n    Snap.path.isPointInside = isPointInsidePath;\n    /*\\\n     * Snap.path.getBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns the bounding box of a given path\n     - path (string) path string\n     = (object) bounding box\n     o {\n     o     x: (number) x coordinate of the left top point of the box,\n     o     y: (number) y coordinate of the left top point of the box,\n     o     x2: (number) x coordinate of the right bottom point of the box,\n     o     y2: (number) y coordinate of the right bottom point of the box,\n     o     width: (number) width of the box,\n     o     height: (number) height of the box\n     o }\n    \\*/\n    Snap.path.getBBox = pathBBox;\n    Snap.path.get = getPath;\n    /*\\\n     * Snap.path.toRelative\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path coordinates into relative values\n     - path (string) path string\n     = (array) path string\n    \\*/\n    Snap.path.toRelative = pathToRelative;\n    /*\\\n     * Snap.path.toAbsolute\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path coordinates into absolute values\n     - path (string) path string\n     = (array) path string\n    \\*/\n    Snap.path.toAbsolute = pathToAbsolute;\n    /*\\\n     * Snap.path.toCubic\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path to a new path where all segments are cubic beziér curves\n     - pathString (string|array) path string or array of segments\n     = (array) array of segments\n    \\*/\n    Snap.path.toCubic = path2curve;\n    /*\\\n     * Snap.path.map\n     [ method ]\n     **\n     * Transform the path string with the given matrix\n     - path (string) path string\n     - matrix (object) see @Matrix\n     = (string) transformed path string\n    \\*/\n    Snap.path.map = mapPath;\n    Snap.path.toString = toString;\n    Snap.path.clone = pathClone;\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var mmax = Math.max,\n        mmin = Math.min;\n\n    // Set\n    var Set = function (items) {\n        this.items = [];\n\tthis.bindings = {};\n        this.length = 0;\n        this.type = \"set\";\n        if (items) {\n            for (var i = 0, ii = items.length; i < ii; i++) {\n                if (items[i]) {\n                    this[this.items.length] = this.items[this.items.length] = items[i];\n                    this.length++;\n                }\n            }\n        }\n    },\n    setproto = Set.prototype;\n    /*\\\n     * Set.push\n     [ method ]\n     **\n     * Adds each argument to the current set\n     = (object) original element\n    \\*/\n    setproto.push = function () {\n        var item,\n            len;\n        for (var i = 0, ii = arguments.length; i < ii; i++) {\n            item = arguments[i];\n            if (item) {\n                len = this.items.length;\n                this[len] = this.items[len] = item;\n                this.length++;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Set.pop\n     [ method ]\n     **\n     * Removes last element and returns it\n     = (object) element\n    \\*/\n    setproto.pop = function () {\n        this.length && delete this[this.length--];\n        return this.items.pop();\n    };\n    /*\\\n     * Set.forEach\n     [ method ]\n     **\n     * Executes given function for each element in the set\n     *\n     * If the function returns `false`, the loop stops running.\n     **\n     - callback (function) function to run\n     - thisArg (object) context object for the callback\n     = (object) Set object\n    \\*/\n    setproto.forEach = function (callback, thisArg) {\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            if (callback.call(thisArg, this.items[i], i) === false) {\n                return this;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Set.animate\n     [ method ]\n     **\n     * Animates each element in set in sync.\n     *\n     **\n     - attrs (object) key-value pairs of destination attributes\n     - duration (number) duration of the animation in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function that executes when the animation ends\n     * or\n     - animation (array) array of animation parameter for each element in set in format `[attrs, duration, easing, callback]`\n     > Usage\n     | // animate all elements in set to radius 10\n     | set.animate({r: 10}, 500, mina.easein);\n     | // or\n     | // animate first element to radius 10, but second to radius 20 and in different time\n     | set.animate([{r: 10}, 500, mina.easein], [{r: 20}, 1500, mina.easein]);\n     = (Element) the current element\n    \\*/\n    setproto.animate = function (attrs, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        if (attrs instanceof Snap._.Animation) {\n            callback = attrs.callback;\n            easing = attrs.easing;\n            ms = easing.dur;\n            attrs = attrs.attr;\n        }\n        var args = arguments;\n        if (Snap.is(attrs, \"array\") && Snap.is(args[args.length - 1], \"array\")) {\n            var each = true;\n        }\n        var begin,\n            handler = function () {\n                if (begin) {\n                    this.b = begin;\n                } else {\n                    begin = this.b;\n                }\n            },\n            cb = 0,\n            set = this,\n            callbacker = callback && function () {\n                if (++cb == set.length) {\n                    callback.call(this);\n                }\n            };\n        return this.forEach(function (el, i) {\n            eve.once(\"snap.animcreated.\" + el.id, handler);\n            if (each) {\n                args[i] && el.animate.apply(el, args[i]);\n            } else {\n                el.animate(attrs, ms, easing, callbacker);\n            }\n        });\n    };\n    /*\\\n     * Set.remove\n     [ method ]\n     **\n     * Removes all children of the set.\n     *\n     = (object) Set object\n    \\*/\n    setproto.remove = function () {\n        while (this.length) {\n            this.pop().remove();\n        }\n        return this;\n    };\n    /*\\\n     * Set.bind\n     [ method ]\n     **\n     * Specifies how to handle a specific attribute when applied\n     * to a set.\n     *\n     **\n     - attr (string) attribute name\n     - callback (function) function to run\n     * or\n     - attr (string) attribute name\n     - element (Element) specific element in the set to apply the attribute to\n     * or\n     - attr (string) attribute name\n     - element (Element) specific element in the set to apply the attribute to\n     - eattr (string) attribute on the element to bind the attribute to\n     = (object) Set object\n    \\*/\n    setproto.bind = function (attr, a, b) {\n        var data = {};\n        if (typeof a == \"function\") {\n            this.bindings[attr] = a;\n        } else {\n            var aname = b || attr;\n            this.bindings[attr] = function (v) {\n                data[aname] = v;\n                a.attr(data);\n            };\n        }\n        return this;\n    };\n    /*\\\n     * Set.attr\n     [ method ]\n     **\n     * Equivalent of @Element.attr.\n     = (object) Set object\n    \\*/\n    setproto.attr = function (value) {\n        var unbound = {};\n        for (var k in value) {\n            if (this.bindings[k]) {\n                this.bindings[k](value[k]);\n            } else {\n                unbound[k] = value[k];\n            }\n        }\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            this.items[i].attr(unbound);\n        }\n        return this;\n    };\n    /*\\\n     * Set.clear\n     [ method ]\n     **\n     * Removes all elements from the set\n    \\*/\n    setproto.clear = function () {\n        while (this.length) {\n            this.pop();\n        }\n    };\n    /*\\\n     * Set.splice\n     [ method ]\n     **\n     * Removes range of elements from the set\n     **\n     - index (number) position of the deletion\n     - count (number) number of element to remove\n     - insertion… (object) #optional elements to insert\n     = (object) set elements that were deleted\n    \\*/\n    setproto.splice = function (index, count, insertion) {\n        index = index < 0 ? mmax(this.length + index, 0) : index;\n        count = mmax(0, mmin(this.length - index, count));\n        var tail = [],\n            todel = [],\n            args = [],\n            i;\n        for (i = 2; i < arguments.length; i++) {\n            args.push(arguments[i]);\n        }\n        for (i = 0; i < count; i++) {\n            todel.push(this[index + i]);\n        }\n        for (; i < this.length - index; i++) {\n            tail.push(this[index + i]);\n        }\n        var arglen = args.length;\n        for (i = 0; i < arglen + tail.length; i++) {\n            this.items[index + i] = this[index + i] = i < arglen ? args[i] : tail[i - arglen];\n        }\n        i = this.items.length = this.length -= count - arglen;\n        while (this[i]) {\n            delete this[i++];\n        }\n        return new Set(todel);\n    };\n    /*\\\n     * Set.exclude\n     [ method ]\n     **\n     * Removes given element from the set\n     **\n     - element (object) element to remove\n     = (boolean) `true` if object was found and removed from the set\n    \\*/\n    setproto.exclude = function (el) {\n        for (var i = 0, ii = this.length; i < ii; i++) if (this[i] == el) {\n            this.splice(i, 1);\n            return true;\n        }\n        return false;\n    };\n    /*\\\n     * Set.insertAfter\n     [ method ]\n     **\n     * Inserts set elements after given element.\n     **\n     - element (object) set will be inserted after this element\n     = (object) Set object\n    \\*/\n    setproto.insertAfter = function (el) {\n        var i = this.items.length;\n        while (i--) {\n            this.items[i].insertAfter(el);\n        }\n        return this;\n    };\n    /*\\\n     * Set.getBBox\n     [ method ]\n     **\n     * Union of all bboxes of the set. See @Element.getBBox.\n     = (object) bounding box descriptor. See @Element.getBBox.\n    \\*/\n    setproto.getBBox = function () {\n        var x = [],\n            y = [],\n            x2 = [],\n            y2 = [];\n        for (var i = this.items.length; i--;) if (!this.items[i].removed) {\n            var box = this.items[i].getBBox();\n            x.push(box.x);\n            y.push(box.y);\n            x2.push(box.x + box.width);\n            y2.push(box.y + box.height);\n        }\n        x = mmin.apply(0, x);\n        y = mmin.apply(0, y);\n        x2 = mmax.apply(0, x2);\n        y2 = mmax.apply(0, y2);\n        return {\n            x: x,\n            y: y,\n            x2: x2,\n            y2: y2,\n            width: x2 - x,\n            height: y2 - y,\n            cx: x + (x2 - x) / 2,\n            cy: y + (y2 - y) / 2\n        };\n    };\n    /*\\\n     * Set.insertAfter\n     [ method ]\n     **\n     * Creates a clone of the set.\n     **\n     = (object) New Set object\n    \\*/\n    setproto.clone = function (s) {\n        s = new Set;\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            s.push(this.items[i].clone());\n        }\n        return s;\n    };\n    setproto.toString = function () {\n        return \"Snap\\u2018s set\";\n    };\n    setproto.type = \"set\";\n    // export\n    /*\\\n     * Snap.Set\n     [ property ]\n     **\n     * Set constructor.\n    \\*/\n    Snap.Set = Set;\n    /*\\\n     * Snap.set\n     [ method ]\n     **\n     * Creates a set and fills it with list of arguments.\n     **\n     = (object) New Set object\n     | var r = paper.rect(0, 0, 10, 10),\n     |     s1 = Snap.set(), // empty set\n     |     s2 = Snap.set(r, paper.circle(100, 100, 20)); // prefilled set\n    \\*/\n    Snap.set = function () {\n        var set = new Set;\n        if (arguments.length) {\n            set.push.apply(set, Array.prototype.slice.call(arguments, 0));\n        }\n        return set;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var names = {},\n        reUnit = /[%a-z]+$/i,\n        Str = String;\n    names.stroke = names.fill = \"colour\";\n    function getEmpty(item) {\n        var l = item[0];\n        switch (l.toLowerCase()) {\n            case \"t\": return [l, 0, 0];\n            case \"m\": return [l, 1, 0, 0, 1, 0, 0];\n            case \"r\": if (item.length == 4) {\n                return [l, 0, item[2], item[3]];\n            } else {\n                return [l, 0];\n            }\n            case \"s\": if (item.length == 5) {\n                return [l, 1, 1, item[3], item[4]];\n            } else if (item.length == 3) {\n                return [l, 1, 1];\n            } else {\n                return [l, 1];\n            }\n        }\n    }\n    function equaliseTransform(t1, t2, getBBox) {\n        t1 = t1 || new Snap.Matrix;\n        t2 = t2 || new Snap.Matrix;\n        t1 = Snap.parseTransformString(t1.toTransformString()) || [];\n        t2 = Snap.parseTransformString(t2.toTransformString()) || [];\n        var maxlength = Math.max(t1.length, t2.length),\n            from = [],\n            to = [],\n            i = 0, j, jj,\n            tt1, tt2;\n        for (; i < maxlength; i++) {\n            tt1 = t1[i] || getEmpty(t2[i]);\n            tt2 = t2[i] || getEmpty(tt1);\n            if (tt1[0] != tt2[0] ||\n                tt1[0].toLowerCase() == \"r\" && (tt1[2] != tt2[2] || tt1[3] != tt2[3]) ||\n                tt1[0].toLowerCase() == \"s\" && (tt1[3] != tt2[3] || tt1[4] != tt2[4])\n                ) {\n                    t1 = Snap._.transform2matrix(t1, getBBox());\n                    t2 = Snap._.transform2matrix(t2, getBBox());\n                    from = [[\"m\", t1.a, t1.b, t1.c, t1.d, t1.e, t1.f]];\n                    to = [[\"m\", t2.a, t2.b, t2.c, t2.d, t2.e, t2.f]];\n                    break;\n            }\n            from[i] = [];\n            to[i] = [];\n            for (j = 0, jj = Math.max(tt1.length, tt2.length); j < jj; j++) {\n                j in tt1 && (from[i][j] = tt1[j]);\n                j in tt2 && (to[i][j] = tt2[j]);\n            }\n        }\n        return {\n            from: path2array(from),\n            to: path2array(to),\n            f: getPath(from)\n        };\n    }\n    function getNumber(val) {\n        return val;\n    }\n    function getUnit(unit) {\n        return function (val) {\n            return +val.toFixed(3) + unit;\n        };\n    }\n    function getViewBox(val) {\n        return val.join(\" \");\n    }\n    function getColour(clr) {\n        return Snap.rgb(clr[0], clr[1], clr[2], clr[3]);\n    }\n    function getPath(path) {\n        var k = 0, i, ii, j, jj, out, a, b = [];\n        for (i = 0, ii = path.length; i < ii; i++) {\n            out = \"[\";\n            a = ['\"' + path[i][0] + '\"'];\n            for (j = 1, jj = path[i].length; j < jj; j++) {\n                a[j] = \"val[\" + k++ + \"]\";\n            }\n            out += a + \"]\";\n            b[i] = out;\n        }\n        return Function(\"val\", \"return Snap.path.toString.call([\" + b + \"])\");\n    }\n    function path2array(path) {\n        var out = [];\n        for (var i = 0, ii = path.length; i < ii; i++) {\n            for (var j = 1, jj = path[i].length; j < jj; j++) {\n                out.push(path[i][j]);\n            }\n        }\n        return out;\n    }\n    function isNumeric(obj) {\n        return isFinite(obj);\n    }\n    function arrayEqual(arr1, arr2) {\n        if (!Snap.is(arr1, \"array\") || !Snap.is(arr2, \"array\")) {\n            return false;\n        }\n        return arr1.toString() == arr2.toString();\n    }\n    Element.prototype.equal = function (name, b) {\n        return eve(\"snap.util.equal\", this, name, b).firstDefined();\n    };\n    eve.on(\"snap.util.equal\", function (name, b) {\n        var A, B, a = Str(this.attr(name) || \"\"),\n            el = this;\n        if (names[name] == \"colour\") {\n            A = Snap.color(a);\n            B = Snap.color(b);\n            return {\n                from: [A.r, A.g, A.b, A.opacity],\n                to: [B.r, B.g, B.b, B.opacity],\n                f: getColour\n            };\n        }\n        if (name == \"viewBox\") {\n            A = this.attr(name).vb.split(\" \").map(Number);\n            B = b.split(\" \").map(Number);\n            return {\n                from: A,\n                to: B,\n                f: getViewBox\n            };\n        }\n        if (name == \"transform\" || name == \"gradientTransform\" || name == \"patternTransform\") {\n            if (typeof b == \"string\") {\n                b = Str(b).replace(/\\.{3}|\\u2026/g, a);\n            }\n            a = this.matrix;\n            if (!Snap._.rgTransform.test(b)) {\n                b = Snap._.transform2matrix(Snap._.svgTransform2string(b), this.getBBox());\n            } else {\n                b = Snap._.transform2matrix(b, this.getBBox());\n            }\n            return equaliseTransform(a, b, function () {\n                return el.getBBox(1);\n            });\n        }\n        if (name == \"d\" || name == \"path\") {\n            A = Snap.path.toCubic(a, b);\n            return {\n                from: path2array(A[0]),\n                to: path2array(A[1]),\n                f: getPath(A[0])\n            };\n        }\n        if (name == \"points\") {\n            A = Str(a).split(Snap._.separator);\n            B = Str(b).split(Snap._.separator);\n            return {\n                from: A,\n                to: B,\n                f: function (val) { return val; }\n            };\n        }\n        if (isNumeric(a) && isNumeric(b)) {\n            return {\n                from: parseFloat(a),\n                to: parseFloat(b),\n                f: getNumber\n            };\n        }\n        var aUnit = a.match(reUnit),\n            bUnit = Str(b).match(reUnit);\n        if (aUnit && arrayEqual(aUnit, bUnit)) {\n            return {\n                from: parseFloat(a),\n                to: parseFloat(b),\n                f: getUnit(aUnit)\n            };\n        } else {\n            return {\n                from: this.asPX(name),\n                to: this.asPX(name, b),\n                f: getNumber\n            };\n        }\n    });\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n    has = \"hasOwnProperty\",\n    supportsTouch = \"createTouch\" in glob.doc,\n    events = [\n        \"click\", \"dblclick\", \"mousedown\", \"mousemove\", \"mouseout\",\n        \"mouseover\", \"mouseup\", \"touchstart\", \"touchmove\", \"touchend\",\n        \"touchcancel\"\n    ],\n    touchMap = {\n        mousedown: \"touchstart\",\n        mousemove: \"touchmove\",\n        mouseup: \"touchend\"\n    },\n    getScroll = function (xy, el) {\n        var name = xy == \"y\" ? \"scrollTop\" : \"scrollLeft\",\n            doc = el && el.node ? el.node.ownerDocument : glob.doc;\n        return doc[name in doc.documentElement ? \"documentElement\" : \"body\"][name];\n    },\n    preventDefault = function () {\n        this.returnValue = false;\n    },\n    preventTouch = function () {\n        return this.originalEvent.preventDefault();\n    },\n    stopPropagation = function () {\n        this.cancelBubble = true;\n    },\n    stopTouch = function () {\n        return this.originalEvent.stopPropagation();\n    },\n    addEvent = function (obj, type, fn, element) {\n        var realName = supportsTouch && touchMap[type] ? touchMap[type] : type,\n            f = function (e) {\n                var scrollY = getScroll(\"y\", element),\n                    scrollX = getScroll(\"x\", element);\n                if (supportsTouch && touchMap[has](type)) {\n                    for (var i = 0, ii = e.targetTouches && e.targetTouches.length; i < ii; i++) {\n                        if (e.targetTouches[i].target == obj || obj.contains(e.targetTouches[i].target)) {\n                            var olde = e;\n                            e = e.targetTouches[i];\n                            e.originalEvent = olde;\n                            e.preventDefault = preventTouch;\n                            e.stopPropagation = stopTouch;\n                            break;\n                        }\n                    }\n                }\n                var x = e.clientX + scrollX,\n                    y = e.clientY + scrollY;\n                return fn.call(element, e, x, y);\n            };\n\n        if (type !== realName) {\n            obj.addEventListener(type, f, false);\n        }\n\n        obj.addEventListener(realName, f, false);\n\n        return function () {\n            if (type !== realName) {\n                obj.removeEventListener(type, f, false);\n            }\n\n            obj.removeEventListener(realName, f, false);\n            return true;\n        };\n    },\n    drag = [],\n    dragMove = function (e) {\n        var x = e.clientX,\n            y = e.clientY,\n            scrollY = getScroll(\"y\"),\n            scrollX = getScroll(\"x\"),\n            dragi,\n            j = drag.length;\n        while (j--) {\n            dragi = drag[j];\n            if (supportsTouch) {\n                var i = e.touches && e.touches.length,\n                    touch;\n                while (i--) {\n                    touch = e.touches[i];\n                    if (touch.identifier == dragi.el._drag.id || dragi.el.node.contains(touch.target)) {\n                        x = touch.clientX;\n                        y = touch.clientY;\n                        (e.originalEvent ? e.originalEvent : e).preventDefault();\n                        break;\n                    }\n                }\n            } else {\n                e.preventDefault();\n            }\n            var node = dragi.el.node,\n                o,\n                next = node.nextSibling,\n                parent = node.parentNode,\n                display = node.style.display;\n            // glob.win.opera && parent.removeChild(node);\n            // node.style.display = \"none\";\n            // o = dragi.el.paper.getElementByPoint(x, y);\n            // node.style.display = display;\n            // glob.win.opera && (next ? parent.insertBefore(node, next) : parent.appendChild(node));\n            // o && eve(\"snap.drag.over.\" + dragi.el.id, dragi.el, o);\n            x += scrollX;\n            y += scrollY;\n            eve(\"snap.drag.move.\" + dragi.el.id, dragi.move_scope || dragi.el, x - dragi.el._drag.x, y - dragi.el._drag.y, x, y, e);\n        }\n    },\n    dragUp = function (e) {\n        Snap.unmousemove(dragMove).unmouseup(dragUp);\n        var i = drag.length,\n            dragi;\n        while (i--) {\n            dragi = drag[i];\n            dragi.el._drag = {};\n            eve(\"snap.drag.end.\" + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);\n            eve.off(\"snap.drag.*.\" + dragi.el.id);\n        }\n        drag = [];\n    };\n    /*\\\n     * Element.click\n     [ method ]\n     **\n     * Adds a click event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unclick\n     [ method ]\n     **\n     * Removes a click event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.dblclick\n     [ method ]\n     **\n     * Adds a double click event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.undblclick\n     [ method ]\n     **\n     * Removes a double click event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mousedown\n     [ method ]\n     **\n     * Adds a mousedown event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmousedown\n     [ method ]\n     **\n     * Removes a mousedown event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mousemove\n     [ method ]\n     **\n     * Adds a mousemove event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmousemove\n     [ method ]\n     **\n     * Removes a mousemove event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseout\n     [ method ]\n     **\n     * Adds a mouseout event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseout\n     [ method ]\n     **\n     * Removes a mouseout event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseover\n     [ method ]\n     **\n     * Adds a mouseover event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseover\n     [ method ]\n     **\n     * Removes a mouseover event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseup\n     [ method ]\n     **\n     * Adds a mouseup event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseup\n     [ method ]\n     **\n     * Removes a mouseup event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchstart\n     [ method ]\n     **\n     * Adds a touchstart event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchstart\n     [ method ]\n     **\n     * Removes a touchstart event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchmove\n     [ method ]\n     **\n     * Adds a touchmove event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchmove\n     [ method ]\n     **\n     * Removes a touchmove event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchend\n     [ method ]\n     **\n     * Adds a touchend event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchend\n     [ method ]\n     **\n     * Removes a touchend event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchcancel\n     [ method ]\n     **\n     * Adds a touchcancel event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchcancel\n     [ method ]\n     **\n     * Removes a touchcancel event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    for (var i = events.length; i--;) {\n        (function (eventName) {\n            Snap[eventName] = elproto[eventName] = function (fn, scope) {\n                if (Snap.is(fn, \"function\")) {\n                    this.events = this.events || [];\n                    this.events.push({\n                        name: eventName,\n                        f: fn,\n                        unbind: addEvent(this.node || document, eventName, fn, scope || this)\n                    });\n                } else {\n                    for (var i = 0, ii = this.events.length; i < ii; i++) if (this.events[i].name == eventName) {\n                        try {\n                            this.events[i].f.call(this);\n                        } catch (e) {}\n                    }\n                }\n                return this;\n            };\n            Snap[\"un\" + eventName] =\n            elproto[\"un\" + eventName] = function (fn) {\n                var events = this.events || [],\n                    l = events.length;\n                while (l--) if (events[l].name == eventName &&\n                               (events[l].f == fn || !fn)) {\n                    events[l].unbind();\n                    events.splice(l, 1);\n                    !events.length && delete this.events;\n                    return this;\n                }\n                return this;\n            };\n        })(events[i]);\n    }\n    /*\\\n     * Element.hover\n     [ method ]\n     **\n     * Adds hover event handlers to the element\n     - f_in (function) handler for hover in\n     - f_out (function) handler for hover out\n     - icontext (object) #optional context for hover in handler\n     - ocontext (object) #optional context for hover out handler\n     = (object) @Element\n    \\*/\n    elproto.hover = function (f_in, f_out, scope_in, scope_out) {\n        return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);\n    };\n    /*\\\n     * Element.unhover\n     [ method ]\n     **\n     * Removes hover event handlers from the element\n     - f_in (function) handler for hover in\n     - f_out (function) handler for hover out\n     = (object) @Element\n    \\*/\n    elproto.unhover = function (f_in, f_out) {\n        return this.unmouseover(f_in).unmouseout(f_out);\n    };\n    var draggable = [];\n    // SIERRA unclear what _context_ refers to for starting, ending, moving the drag gesture.\n    // SIERRA Element.drag(): _x position of the mouse_: Where are the x/y values offset from?\n    // SIERRA Element.drag(): much of this member's doc appears to be duplicated for some reason.\n    // SIERRA Unclear about this sentence: _Additionally following drag events will be triggered: drag.start.<id> on start, drag.end.<id> on end and drag.move.<id> on every move._ Is there a global _drag_ object to which you can assign handlers keyed by an element's ID?\n    /*\\\n     * Element.drag\n     [ method ]\n     **\n     * Adds event handlers for an element's drag gesture\n     **\n     - onmove (function) handler for moving\n     - onstart (function) handler for drag start\n     - onend (function) handler for drag end\n     - mcontext (object) #optional context for moving handler\n     - scontext (object) #optional context for drag start handler\n     - econtext (object) #optional context for drag end handler\n     * Additionaly following `drag` events are triggered: `drag.start.<id>` on start, \n     * `drag.end.<id>` on end and `drag.move.<id>` on every move. When element is dragged over another element \n     * `drag.over.<id>` fires as well.\n     *\n     * Start event and start handler are called in specified context or in context of the element with following parameters:\n     o x (number) x position of the mouse\n     o y (number) y position of the mouse\n     o event (object) DOM event object\n     * Move event and move handler are called in specified context or in context of the element with following parameters:\n     o dx (number) shift by x from the start point\n     o dy (number) shift by y from the start point\n     o x (number) x position of the mouse\n     o y (number) y position of the mouse\n     o event (object) DOM event object\n     * End event and end handler are called in specified context or in context of the element with following parameters:\n     o event (object) DOM event object\n     = (object) @Element\n    \\*/\n    elproto.drag = function (onmove, onstart, onend, move_scope, start_scope, end_scope) {\n        var el = this;\n        if (!arguments.length) {\n            var origTransform;\n            return el.drag(function (dx, dy) {\n                this.attr({\n                    transform: origTransform + (origTransform ? \"T\" : \"t\") + [dx, dy]\n                });\n            }, function () {\n                origTransform = this.transform().local;\n            });\n        }\n        function start(e, x, y) {\n            (e.originalEvent || e).preventDefault();\n            el._drag.x = x;\n            el._drag.y = y;\n            el._drag.id = e.identifier;\n            !drag.length && Snap.mousemove(dragMove).mouseup(dragUp);\n            drag.push({el: el, move_scope: move_scope, start_scope: start_scope, end_scope: end_scope});\n            onstart && eve.on(\"snap.drag.start.\" + el.id, onstart);\n            onmove && eve.on(\"snap.drag.move.\" + el.id, onmove);\n            onend && eve.on(\"snap.drag.end.\" + el.id, onend);\n            eve(\"snap.drag.start.\" + el.id, start_scope || move_scope || el, x, y, e);\n        }\n        function init(e, x, y) {\n            eve(\"snap.draginit.\" + el.id, el, e, x, y);\n        }\n        eve.on(\"snap.draginit.\" + el.id, start);\n        el._drag = {};\n        draggable.push({el: el, start: start, init: init});\n        el.mousedown(init);\n        return el;\n    };\n    /*\n     * Element.onDragOver\n     [ method ]\n     **\n     * Shortcut to assign event handler for `drag.over.<id>` event, where `id` is the element's `id` (see @Element.id)\n     - f (function) handler for event, first argument would be the element you are dragging over\n    \\*/\n    // elproto.onDragOver = function (f) {\n    //     f ? eve.on(\"snap.drag.over.\" + this.id, f) : eve.unbind(\"snap.drag.over.\" + this.id);\n    // };\n    /*\\\n     * Element.undrag\n     [ method ]\n     **\n     * Removes all drag event handlers from the given element\n    \\*/\n    elproto.undrag = function () {\n        var i = draggable.length;\n        while (i--) if (draggable[i].el == this) {\n            this.unmousedown(draggable[i].init);\n            draggable.splice(i, 1);\n            eve.unbind(\"snap.drag.*.\" + this.id);\n            eve.unbind(\"snap.draginit.\" + this.id);\n        }\n        !draggable.length && Snap.unmousemove(dragMove).unmouseup(dragUp);\n        return this;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n        pproto = Paper.prototype,\n        rgurl = /^\\s*url\\((.+)\\)/,\n        Str = String,\n        $ = Snap._.$;\n    Snap.filter = {};\n    /*\\\n     * Paper.filter\n     [ method ]\n     **\n     * Creates a `<filter>` element\n     **\n     - filstr (string) SVG fragment of filter provided as a string\n     = (object) @Element\n     * Note: It is recommended to use filters embedded into the page inside an empty SVG element.\n     > Usage\n     | var f = paper.filter('<feGaussianBlur stdDeviation=\"2\"/>'),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    pproto.filter = function (filstr) {\n        var paper = this;\n        if (paper.type != \"svg\") {\n            paper = paper.paper;\n        }\n        var f = Snap.parse(Str(filstr)),\n            id = Snap._.id(),\n            width = paper.node.offsetWidth,\n            height = paper.node.offsetHeight,\n            filter = $(\"filter\");\n        $(filter, {\n            id: id,\n            filterUnits: \"userSpaceOnUse\"\n        });\n        filter.appendChild(f.node);\n        paper.defs.appendChild(filter);\n        return new Element(filter);\n    };\n\n    eve.on(\"snap.util.getattr.filter\", function () {\n        eve.stop();\n        var p = $(this.node, \"filter\");\n        if (p) {\n            var match = Str(p).match(rgurl);\n            return match && Snap.select(match[1]);\n        }\n    });\n    eve.on(\"snap.util.attr.filter\", function (value) {\n        if (value instanceof Element && value.type == \"filter\") {\n            eve.stop();\n            var id = value.node.id;\n            if (!id) {\n                $(value.node, {id: value.id});\n                id = value.id;\n            }\n            $(this.node, {\n                filter: Snap.url(id)\n            });\n        }\n        if (!value || value == \"none\") {\n            eve.stop();\n            this.node.removeAttribute(\"filter\");\n        }\n    });\n    /*\\\n     * Snap.filter.blur\n     [ method ]\n     **\n     * Returns an SVG markup string for the blur filter\n     **\n     - x (number) amount of horizontal blur, in pixels\n     - y (number) #optional amount of vertical blur, in pixels\n     = (string) filter representation\n     > Usage\n     | var f = paper.filter(Snap.filter.blur(5, 10)),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    Snap.filter.blur = function (x, y) {\n        if (x == null) {\n            x = 2;\n        }\n        var def = y == null ? x : [x, y];\n        return Snap.format('\\<feGaussianBlur stdDeviation=\"{def}\"/>', {\n            def: def\n        });\n    };\n    Snap.filter.blur.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.shadow\n     [ method ]\n     **\n     * Returns an SVG markup string for the shadow filter\n     **\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - blur (number) #optional amount of blur\n     - color (string) #optional color of the shadow\n     - opacity (number) #optional `0..1` opacity of the shadow\n     * or\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - color (string) #optional color of the shadow\n     - opacity (number) #optional `0..1` opacity of the shadow\n     * which makes blur default to `4`. Or\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - opacity (number) #optional `0..1` opacity of the shadow\n     = (string) filter representation\n     > Usage\n     | var f = paper.filter(Snap.filter.shadow(0, 2, .3)),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    Snap.filter.shadow = function (dx, dy, blur, color, opacity) {\n        if (opacity == null) {\n            if (color == null) {\n                opacity = blur;\n                blur = 4;\n                color = \"#000\";\n            } else {\n                opacity = color;\n                color = blur;\n                blur = 4;\n            }\n        }\n        if (blur == null) {\n            blur = 4;\n        }\n        if (opacity == null) {\n            opacity = 1;\n        }\n        if (dx == null) {\n            dx = 0;\n            dy = 2;\n        }\n        if (dy == null) {\n            dy = dx;\n        }\n        color = Snap.color(color);\n        return Snap.format('<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"{blur}\"/><feOffset dx=\"{dx}\" dy=\"{dy}\" result=\"offsetblur\"/><feFlood flood-color=\"{color}\"/><feComposite in2=\"offsetblur\" operator=\"in\"/><feComponentTransfer><feFuncA type=\"linear\" slope=\"{opacity}\"/></feComponentTransfer><feMerge><feMergeNode/><feMergeNode in=\"SourceGraphic\"/></feMerge>', {\n            color: color,\n            dx: dx,\n            dy: dy,\n            blur: blur,\n            opacity: opacity\n        });\n    };\n    Snap.filter.shadow.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.grayscale\n     [ method ]\n     **\n     * Returns an SVG markup string for the grayscale filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.grayscale = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {b} {h} 0 0 0 0 0 1 0\"/>', {\n            a: 0.2126 + 0.7874 * (1 - amount),\n            b: 0.7152 - 0.7152 * (1 - amount),\n            c: 0.0722 - 0.0722 * (1 - amount),\n            d: 0.2126 - 0.2126 * (1 - amount),\n            e: 0.7152 + 0.2848 * (1 - amount),\n            f: 0.0722 - 0.0722 * (1 - amount),\n            g: 0.2126 - 0.2126 * (1 - amount),\n            h: 0.0722 + 0.9278 * (1 - amount)\n        });\n    };\n    Snap.filter.grayscale.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.sepia\n     [ method ]\n     **\n     * Returns an SVG markup string for the sepia filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.sepia = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {h} {i} 0 0 0 0 0 1 0\"/>', {\n            a: 0.393 + 0.607 * (1 - amount),\n            b: 0.769 - 0.769 * (1 - amount),\n            c: 0.189 - 0.189 * (1 - amount),\n            d: 0.349 - 0.349 * (1 - amount),\n            e: 0.686 + 0.314 * (1 - amount),\n            f: 0.168 - 0.168 * (1 - amount),\n            g: 0.272 - 0.272 * (1 - amount),\n            h: 0.534 - 0.534 * (1 - amount),\n            i: 0.131 + 0.869 * (1 - amount)\n        });\n    };\n    Snap.filter.sepia.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.saturate\n     [ method ]\n     **\n     * Returns an SVG markup string for the saturate filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.saturate = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"saturate\" values=\"{amount}\"/>', {\n            amount: 1 - amount\n        });\n    };\n    Snap.filter.saturate.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.hueRotate\n     [ method ]\n     **\n     * Returns an SVG markup string for the hue-rotate filter\n     **\n     - angle (number) angle of rotation\n     = (string) filter representation\n    \\*/\n    Snap.filter.hueRotate = function (angle) {\n        angle = angle || 0;\n        return Snap.format('<feColorMatrix type=\"hueRotate\" values=\"{angle}\"/>', {\n            angle: angle\n        });\n    };\n    Snap.filter.hueRotate.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.invert\n     [ method ]\n     **\n     * Returns an SVG markup string for the invert filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.invert = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n//        <feColorMatrix type=\"matrix\" values=\"-1 0 0 0 1  0 -1 0 0 1  0 0 -1 0 1  0 0 0 1 0\" color-interpolation-filters=\"sRGB\"/>\n        return Snap.format('<feComponentTransfer><feFuncR type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncG type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncB type=\"table\" tableValues=\"{amount} {amount2}\"/></feComponentTransfer>', {\n            amount: amount,\n            amount2: 1 - amount\n        });\n    };\n    Snap.filter.invert.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.brightness\n     [ method ]\n     **\n     * Returns an SVG markup string for the brightness filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.brightness = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\"/><feFuncG type=\"linear\" slope=\"{amount}\"/><feFuncB type=\"linear\" slope=\"{amount}\"/></feComponentTransfer>', {\n            amount: amount\n        });\n    };\n    Snap.filter.brightness.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.contrast\n     [ method ]\n     **\n     * Returns an SVG markup string for the contrast filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.contrast = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncG type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncB type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/></feComponentTransfer>', {\n            amount: amount,\n            amount2: .5 - amount / 2\n        });\n    };\n    Snap.filter.contrast.toString = function () {\n        return this();\n    };\n});\n\n// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var box = Snap._.box,\n        is = Snap.is,\n        firstLetter = /^[^a-z]*([tbmlrc])/i,\n        toString = function () {\n            return \"T\" + this.dx + \",\" + this.dy;\n        };\n    /*\\\n     * Element.getAlign\n     [ method ]\n     **\n     * Returns shift needed to align the element relatively to given element.\n     * If no elements specified, parent `<svg>` container will be used.\n     - el (object) @optional alignment element\n     - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n     = (object|string) Object in format `{dx: , dy: }` also has a string representation as a transformation string\n     > Usage\n     | el.transform(el.getAlign(el2, \"top\"));\n     * or\n     | var dy = el.getAlign(el2, \"top\").dy;\n    \\*/\n    Element.prototype.getAlign = function (el, way) {\n        if (way == null && is(el, \"string\")) {\n            way = el;\n            el = null;\n        }\n        el = el || this.paper;\n        var bx = el.getBBox ? el.getBBox() : box(el),\n            bb = this.getBBox(),\n            out = {};\n        way = way && way.match(firstLetter);\n        way = way ? way[1].toLowerCase() : \"c\";\n        switch (way) {\n            case \"t\":\n                out.dx = 0;\n                out.dy = bx.y - bb.y;\n            break;\n            case \"b\":\n                out.dx = 0;\n                out.dy = bx.y2 - bb.y2;\n            break;\n            case \"m\":\n                out.dx = 0;\n                out.dy = bx.cy - bb.cy;\n            break;\n            case \"l\":\n                out.dx = bx.x - bb.x;\n                out.dy = 0;\n            break;\n            case \"r\":\n                out.dx = bx.x2 - bb.x2;\n                out.dy = 0;\n            break;\n            default:\n                out.dx = bx.cx - bb.cx;\n                out.dy = 0;\n            break;\n        }\n        out.toString = toString;\n        return out;\n    };\n    /*\\\n     * Element.align\n     [ method ]\n     **\n     * Aligns the element relatively to given one via transformation.\n     * If no elements specified, parent `<svg>` container will be used.\n     - el (object) @optional alignment element\n     - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n     = (object) this element\n     > Usage\n     | el.align(el2, \"top\");\n     * or\n     | el.align(\"middle\");\n    \\*/\n    Element.prototype.align = function (el, way) {\n        return this.transform(\"...\" + this.getAlign(el, way));\n    };\n});\n\n// Copyright (c) 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    // Colours are from https://www.materialui.co\n    var red         = \"#ffebee#ffcdd2#ef9a9a#e57373#ef5350#f44336#e53935#d32f2f#c62828#b71c1c#ff8a80#ff5252#ff1744#d50000\",\n        pink        = \"#FCE4EC#F8BBD0#F48FB1#F06292#EC407A#E91E63#D81B60#C2185B#AD1457#880E4F#FF80AB#FF4081#F50057#C51162\",\n        purple      = \"#F3E5F5#E1BEE7#CE93D8#BA68C8#AB47BC#9C27B0#8E24AA#7B1FA2#6A1B9A#4A148C#EA80FC#E040FB#D500F9#AA00FF\",\n        deeppurple  = \"#EDE7F6#D1C4E9#B39DDB#9575CD#7E57C2#673AB7#5E35B1#512DA8#4527A0#311B92#B388FF#7C4DFF#651FFF#6200EA\",\n        indigo      = \"#E8EAF6#C5CAE9#9FA8DA#7986CB#5C6BC0#3F51B5#3949AB#303F9F#283593#1A237E#8C9EFF#536DFE#3D5AFE#304FFE\",\n        blue        = \"#E3F2FD#BBDEFB#90CAF9#64B5F6#64B5F6#2196F3#1E88E5#1976D2#1565C0#0D47A1#82B1FF#448AFF#2979FF#2962FF\",\n        lightblue   = \"#E1F5FE#B3E5FC#81D4FA#4FC3F7#29B6F6#03A9F4#039BE5#0288D1#0277BD#01579B#80D8FF#40C4FF#00B0FF#0091EA\",\n        cyan        = \"#E0F7FA#B2EBF2#80DEEA#4DD0E1#26C6DA#00BCD4#00ACC1#0097A7#00838F#006064#84FFFF#18FFFF#00E5FF#00B8D4\",\n        teal        = \"#E0F2F1#B2DFDB#80CBC4#4DB6AC#26A69A#009688#00897B#00796B#00695C#004D40#A7FFEB#64FFDA#1DE9B6#00BFA5\",\n        green       = \"#E8F5E9#C8E6C9#A5D6A7#81C784#66BB6A#4CAF50#43A047#388E3C#2E7D32#1B5E20#B9F6CA#69F0AE#00E676#00C853\",\n        lightgreen  = \"#F1F8E9#DCEDC8#C5E1A5#AED581#9CCC65#8BC34A#7CB342#689F38#558B2F#33691E#CCFF90#B2FF59#76FF03#64DD17\",\n        lime        = \"#F9FBE7#F0F4C3#E6EE9C#DCE775#D4E157#CDDC39#C0CA33#AFB42B#9E9D24#827717#F4FF81#EEFF41#C6FF00#AEEA00\",\n        yellow      = \"#FFFDE7#FFF9C4#FFF59D#FFF176#FFEE58#FFEB3B#FDD835#FBC02D#F9A825#F57F17#FFFF8D#FFFF00#FFEA00#FFD600\",\n        amber       = \"#FFF8E1#FFECB3#FFE082#FFD54F#FFCA28#FFC107#FFB300#FFA000#FF8F00#FF6F00#FFE57F#FFD740#FFC400#FFAB00\",\n        orange      = \"#FFF3E0#FFE0B2#FFCC80#FFB74D#FFA726#FF9800#FB8C00#F57C00#EF6C00#E65100#FFD180#FFAB40#FF9100#FF6D00\",\n        deeporange  = \"#FBE9E7#FFCCBC#FFAB91#FF8A65#FF7043#FF5722#F4511E#E64A19#D84315#BF360C#FF9E80#FF6E40#FF3D00#DD2C00\",\n        brown       = \"#EFEBE9#D7CCC8#BCAAA4#A1887F#8D6E63#795548#6D4C41#5D4037#4E342E#3E2723\",\n        grey        = \"#FAFAFA#F5F5F5#EEEEEE#E0E0E0#BDBDBD#9E9E9E#757575#616161#424242#212121\",\n        bluegrey    = \"#ECEFF1#CFD8DC#B0BEC5#90A4AE#78909C#607D8B#546E7A#455A64#37474F#263238\";\n    /*\\\n     * Snap.mui\n     [ property ]\n     **\n     * Contain Material UI colours.\n     | Snap().rect(0, 0, 10, 10).attr({fill: Snap.mui.deeppurple, stroke: Snap.mui.amber[600]});\n     # For colour reference: <a href=\"https://www.materialui.co\">https://www.materialui.co</a>.\n    \\*/\n    Snap.mui = {};\n    /*\\\n     * Snap.flat\n     [ property ]\n     **\n     * Contain Flat UI colours.\n     | Snap().rect(0, 0, 10, 10).attr({fill: Snap.flat.carrot, stroke: Snap.flat.wetasphalt});\n     # For colour reference: <a href=\"https://www.materialui.co\">https://www.materialui.co</a>.\n    \\*/\n    Snap.flat = {};\n    function saveColor(colors) {\n        colors = colors.split(/(?=#)/);\n        var color = new String(colors[5]);\n        color[50] = colors[0];\n        color[100] = colors[1];\n        color[200] = colors[2];\n        color[300] = colors[3];\n        color[400] = colors[4];\n        color[500] = colors[5];\n        color[600] = colors[6];\n        color[700] = colors[7];\n        color[800] = colors[8];\n        color[900] = colors[9];\n        if (colors[10]) {\n            color.A100 = colors[10];\n            color.A200 = colors[11];\n            color.A400 = colors[12];\n            color.A700 = colors[13];\n        }\n        return color;\n    }\n    Snap.mui.red = saveColor(red);\n    Snap.mui.pink = saveColor(pink);\n    Snap.mui.purple = saveColor(purple);\n    Snap.mui.deeppurple = saveColor(deeppurple);\n    Snap.mui.indigo = saveColor(indigo);\n    Snap.mui.blue = saveColor(blue);\n    Snap.mui.lightblue = saveColor(lightblue);\n    Snap.mui.cyan = saveColor(cyan);\n    Snap.mui.teal = saveColor(teal);\n    Snap.mui.green = saveColor(green);\n    Snap.mui.lightgreen = saveColor(lightgreen);\n    Snap.mui.lime = saveColor(lime);\n    Snap.mui.yellow = saveColor(yellow);\n    Snap.mui.amber = saveColor(amber);\n    Snap.mui.orange = saveColor(orange);\n    Snap.mui.deeporange = saveColor(deeporange);\n    Snap.mui.brown = saveColor(brown);\n    Snap.mui.grey = saveColor(grey);\n    Snap.mui.bluegrey = saveColor(bluegrey);\n    Snap.flat.turquoise = \"#1abc9c\";\n    Snap.flat.greensea = \"#16a085\";\n    Snap.flat.sunflower = \"#f1c40f\";\n    Snap.flat.orange = \"#f39c12\";\n    Snap.flat.emerland = \"#2ecc71\";\n    Snap.flat.nephritis = \"#27ae60\";\n    Snap.flat.carrot = \"#e67e22\";\n    Snap.flat.pumpkin = \"#d35400\";\n    Snap.flat.peterriver = \"#3498db\";\n    Snap.flat.belizehole = \"#2980b9\";\n    Snap.flat.alizarin = \"#e74c3c\";\n    Snap.flat.pomegranate = \"#c0392b\";\n    Snap.flat.amethyst = \"#9b59b6\";\n    Snap.flat.wisteria = \"#8e44ad\";\n    Snap.flat.clouds = \"#ecf0f1\";\n    Snap.flat.silver = \"#bdc3c7\";\n    Snap.flat.wetasphalt = \"#34495e\";\n    Snap.flat.midnightblue = \"#2c3e50\";\n    Snap.flat.concrete = \"#95a5a6\";\n    Snap.flat.asbestos = \"#7f8c8d\";\n    /*\\\n     * Snap.importMUIColors\n     [ method ]\n     **\n     * Imports Material UI colours into global object.\n     | Snap.importMUIColors();\n     | Snap().rect(0, 0, 10, 10).attr({fill: deeppurple, stroke: amber[600]});\n     # For colour reference: <a href=\"https://www.materialui.co\">https://www.materialui.co</a>.\n    \\*/\n    Snap.importMUIColors = function () {\n        for (var color in Snap.mui) {\n            if (Snap.mui.hasOwnProperty(color)) {\n                window[color] = Snap.mui[color];\n            }\n        }\n    };\n});\n\nreturn Snap;\n}));\n}.call(window));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/snapsvg/dist/snap.svg.js\n// module id = 10\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_11__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"Vue\"\n// module id = 11\n// module chunks = 0","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"VueOffCanvas\"},[_c('div',{staticClass:\"overlay\",class:{'overlay--show': _vm.isOpen},on:{\"click\":_vm.toggleOffCanvas}}),_vm._v(\" \"),_c('div',{staticClass:\"container\"},[_c('div',{staticClass:\"menu-wrap\"},[_vm._m(0),_vm._v(\" \"),_c('button',{staticClass:\"close-button\",on:{\"click\":_vm.toggleOffCanvas}},[_vm._v(\"\\n                Close Menu\\n        \")]),_vm._v(\" \"),_c('div',{staticClass:\"morph-shape\",attrs:{\"id\":\"morph-shape\"}},[_c('svg',{attrs:{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"100%\",\"height\":\"100%\",\"viewBox\":\"0 0 100 800\",\"preserveAspectRatio\":\"none\"}},[_c('path',{attrs:{\"d\":\"M-1,0h101c0,0-97.833,153.603-97.833,396.167C2.167,627.579,100,800,100,800H-1V0z\"}})])])]),_vm._v(\" \"),_c('button',{staticClass:\"menu-button\",on:{\"click\":_vm.toggleOffCanvas}},[_vm._v(\"\\n              Hamburger Menu\\n      \")]),_vm._v(\" \"),_c('div',{staticClass:\"content-wrap\"},[_c('div',{staticClass:\"content\"},[_c('header',{staticClass:\"codrops-header\"},[_vm._m(1),_vm._v(\" \"),_c('nav',{staticClass:\"codrops-demos\"},[_c('a',{staticClass:\"current-demo\",on:{\"click\":_vm.toggleOffCanvas}},[_vm._v(\"OPEN Off-Canvas\")])]),_vm._v(\" \"),_vm._m(2),_vm._v(\" \"),_vm._m(3)])])])])])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('nav',{staticClass:\"menu\"},[_c('div',{staticClass:\"icon-list\"},[_c('a',{attrs:{\"href\":\"#\"}},[_c('i',{staticClass:\"fa fa-fw fa-star-o\"}),_c('span',[_vm._v(\"Favorites\")])]),_vm._v(\" \"),_c('a',{attrs:{\"href\":\"#\"}},[_c('i',{staticClass:\"fa fa-fw fa-bell-o\"}),_c('span',[_vm._v(\"Alerts\")])]),_vm._v(\" \"),_c('a',{attrs:{\"href\":\"#\"}},[_c('i',{staticClass:\"fa fa-fw fa-envelope-o\"}),_c('span',[_vm._v(\"Messages\")])]),_vm._v(\" \"),_c('a',{attrs:{\"href\":\"#\"}},[_c('i',{staticClass:\"fa fa-fw fa-comment-o\"}),_c('span',[_vm._v(\"Comments\")])]),_vm._v(\" \"),_c('a',{attrs:{\"href\":\"#\"}},[_c('i',{staticClass:\"fa fa-fw fa-bar-chart-o\"}),_c('span',[_vm._v(\"Analytics\")])]),_vm._v(\" \"),_c('a',{attrs:{\"href\":\"#\"}},[_c('i',{staticClass:\"fa fa-fw fa-newspaper-o\"}),_c('span',[_vm._v(\"Reading List\")])])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h1',[_vm._v(\"\\n              Off-Canvas Menu Effects\\n              \"),_c('span',[_vm._v(\"Showing (off-canvas) menus stylishly\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"codrops-links\"},[_c('a',{attrs:{\"href\":\"http://tympanus.net/codrops/?p=20100\"}},[_c('span',[_c('i',{staticClass:\"fa fa-link\"}),_vm._v(\" See Codrops Article\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"codrops-links\"},[_c('a',{attrs:{\"href\":\"https://github.com/mazipan/vue-offcanvas-menu\"}},[_c('span',[_c('i',{staticClass:\"fa fa-github\"}),_vm._v(\" See Github\")])])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-207b2120\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/VueOffCanvas.vue\n// module id = 12\n// module chunks = 0"],"sourceRoot":""}